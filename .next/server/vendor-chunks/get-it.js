"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/get-it";
exports.ids = ["vendor-chunks/get-it"];
exports.modules = {

/***/ "(ssr)/./node_modules/get-it/dist/_chunks/defaultOptionsValidator-2bJolbLg.cjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/get-it/dist/_chunks/defaultOptionsValidator-2bJolbLg.cjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nconst isReactNative = typeof navigator === \"undefined\" ? false : navigator.product === \"ReactNative\";\nconst defaultOptions = {\n    timeout: isReactNative ? 6e4 : 12e4\n};\nconst processOptions = function processOptions2(opts) {\n    const options = {\n        ...defaultOptions,\n        ...typeof opts === \"string\" ? {\n            url: opts\n        } : opts\n    };\n    const { searchParams } = new URL(options.url, \"http://localhost\");\n    options.timeout = normalizeTimeout(options.timeout);\n    if (options.query) {\n        for (const [key, value] of Object.entries(options.query)){\n            if (value !== void 0) {\n                if (Array.isArray(value)) {\n                    for (const v of value){\n                        searchParams.append(key, v);\n                    }\n                } else {\n                    searchParams.append(key, value);\n                }\n            }\n        }\n    }\n    const [url] = options.url.split(\"?\");\n    const search = searchParams.toString();\n    if (search) {\n        options.url = \"\".concat(url, \"?\").concat(search);\n    }\n    options.method = options.body && !options.method ? \"POST\" : (options.method || \"GET\").toUpperCase();\n    return options;\n};\nfunction normalizeTimeout(time) {\n    if (time === false || time === 0) {\n        return false;\n    }\n    if (time.connect || time.socket) {\n        return time;\n    }\n    const delay = Number(time);\n    if (isNaN(delay)) {\n        return normalizeTimeout(defaultOptions.timeout);\n    }\n    return {\n        connect: delay,\n        socket: delay\n    };\n}\nconst validUrl = /^https?:\\/\\//i;\nconst validateOptions = function validateOptions2(options) {\n    if (!validUrl.test(options.url)) {\n        throw new Error('\"'.concat(options.url, '\" is not a valid URL'));\n    }\n};\nexports.processOptions = processOptions;\nexports.validateOptions = validateOptions; //# sourceMappingURL=defaultOptionsValidator-2bJolbLg.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ2V0LWl0L2Rpc3QvX2NodW5rcy9kZWZhdWx0T3B0aW9uc1ZhbGlkYXRvci0yYkpvbGJMZy5janMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxnQkFBZ0IsT0FBT0MsY0FBYyxjQUFjLFFBQVFBLFVBQVVDLE9BQU8sS0FBSztBQUN2RixNQUFNQyxpQkFBaUI7SUFDckJDLFNBQVNKLGdCQUFnQixNQUFNO0FBQ2pDO0FBQ0EsTUFBTUssaUJBQWlCLFNBQVNDLGdCQUFnQkMsSUFBSTtJQUNsRCxNQUFNQyxVQUFVO1FBQ2QsR0FBR0wsY0FBYztRQUNqQixHQUFJLE9BQU9JLFNBQVMsV0FBVztZQUM3QkUsS0FBS0Y7UUFDUCxJQUFJQSxJQUFJO0lBQ1Y7SUFDQSxNQUFNLEVBQ0pHLFlBQVksRUFDYixHQUFHLElBQUlDLElBQUlILFFBQVFDLEdBQUcsRUFBRTtJQUN6QkQsUUFBUUosT0FBTyxHQUFHUSxpQkFBaUJKLFFBQVFKLE9BQU87SUFDbEQsSUFBSUksUUFBUUssS0FBSyxFQUFFO1FBQ2pCLEtBQUssTUFBTSxDQUFDQyxLQUFLQyxNQUFNLElBQUlDLE9BQU9DLE9BQU8sQ0FBQ1QsUUFBUUssS0FBSyxFQUFHO1lBQ3hELElBQUlFLFVBQVUsS0FBSyxHQUFHO2dCQUNwQixJQUFJRyxNQUFNQyxPQUFPLENBQUNKLFFBQVE7b0JBQ3hCLEtBQUssTUFBTUssS0FBS0wsTUFBTzt3QkFDckJMLGFBQWFXLE1BQU0sQ0FBQ1AsS0FBS007b0JBQzNCO2dCQUNGLE9BQU87b0JBQ0xWLGFBQWFXLE1BQU0sQ0FBQ1AsS0FBS0M7Z0JBQzNCO1lBQ0Y7UUFDRjtJQUNGO0lBQ0EsTUFBTSxDQUFDTixJQUFJLEdBQUdELFFBQVFDLEdBQUcsQ0FBQ2EsS0FBSyxDQUFDO0lBQ2hDLE1BQU1DLFNBQVNiLGFBQWFjLFFBQVE7SUFDcEMsSUFBSUQsUUFBUTtRQUNWZixRQUFRQyxHQUFHLEdBQUcsR0FBR2dCLE1BQU0sQ0FBQ2hCLEtBQUssS0FBS2dCLE1BQU0sQ0FBQ0Y7SUFDM0M7SUFDQWYsUUFBUWtCLE1BQU0sR0FBR2xCLFFBQVFtQixJQUFJLElBQUksQ0FBQ25CLFFBQVFrQixNQUFNLEdBQUcsU0FBUyxDQUFDbEIsUUFBUWtCLE1BQU0sSUFBSSxLQUFJLEVBQUdFLFdBQVc7SUFDakcsT0FBT3BCO0FBQ1Q7QUFDQSxTQUFTSSxpQkFBaUJpQixJQUFJO0lBQzVCLElBQUlBLFNBQVMsU0FBU0EsU0FBUyxHQUFHO1FBQ2hDLE9BQU87SUFDVDtJQUNBLElBQUlBLEtBQUtDLE9BQU8sSUFBSUQsS0FBS0UsTUFBTSxFQUFFO1FBQy9CLE9BQU9GO0lBQ1Q7SUFDQSxNQUFNRyxRQUFRQyxPQUFPSjtJQUNyQixJQUFJSyxNQUFNRixRQUFRO1FBQ2hCLE9BQU9wQixpQkFBaUJULGVBQWVDLE9BQU87SUFDaEQ7SUFDQSxPQUFPO1FBQ0wwQixTQUFTRTtRQUNURCxRQUFRQztJQUNWO0FBQ0Y7QUFDQSxNQUFNRyxXQUFXO0FBQ2pCLE1BQU1DLGtCQUFrQixTQUFTQyxpQkFBaUI3QixPQUFPO0lBQ3ZELElBQUksQ0FBQzJCLFNBQVNHLElBQUksQ0FBQzlCLFFBQVFDLEdBQUcsR0FBRztRQUMvQixNQUFNLElBQUk4QixNQUFNLElBQUlkLE1BQU0sQ0FBQ2pCLFFBQVFDLEdBQUcsRUFBRTtJQUMxQztBQUNGO0FBQ0ErQixzQkFBc0IsR0FBR25DO0FBQ3pCbUMsdUJBQXVCLEdBQUdKLGlCQUMxQiw2REFBNkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uaWtlLy4vbm9kZV9tb2R1bGVzL2dldC1pdC9kaXN0L19jaHVua3MvZGVmYXVsdE9wdGlvbnNWYWxpZGF0b3ItMmJKb2xiTGcuY2pzPzA2NzIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBpc1JlYWN0TmF0aXZlID0gdHlwZW9mIG5hdmlnYXRvciA9PT0gXCJ1bmRlZmluZWRcIiA/IGZhbHNlIDogbmF2aWdhdG9yLnByb2R1Y3QgPT09IFwiUmVhY3ROYXRpdmVcIjtcbmNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICB0aW1lb3V0OiBpc1JlYWN0TmF0aXZlID8gNmU0IDogMTJlNFxufTtcbmNvbnN0IHByb2Nlc3NPcHRpb25zID0gZnVuY3Rpb24gcHJvY2Vzc09wdGlvbnMyKG9wdHMpIHtcbiAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAuLi5kZWZhdWx0T3B0aW9ucyxcbiAgICAuLi4odHlwZW9mIG9wdHMgPT09IFwic3RyaW5nXCIgPyB7XG4gICAgICB1cmw6IG9wdHNcbiAgICB9IDogb3B0cylcbiAgfTtcbiAgY29uc3Qge1xuICAgIHNlYXJjaFBhcmFtc1xuICB9ID0gbmV3IFVSTChvcHRpb25zLnVybCwgXCJodHRwOi8vbG9jYWxob3N0XCIpO1xuICBvcHRpb25zLnRpbWVvdXQgPSBub3JtYWxpemVUaW1lb3V0KG9wdGlvbnMudGltZW91dCk7XG4gIGlmIChvcHRpb25zLnF1ZXJ5KSB7XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMob3B0aW9ucy5xdWVyeSkpIHtcbiAgICAgIGlmICh2YWx1ZSAhPT0gdm9pZCAwKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgIGZvciAoY29uc3QgdiBvZiB2YWx1ZSkge1xuICAgICAgICAgICAgc2VhcmNoUGFyYW1zLmFwcGVuZChrZXksIHYpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWFyY2hQYXJhbXMuYXBwZW5kKGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNvbnN0IFt1cmxdID0gb3B0aW9ucy51cmwuc3BsaXQoXCI/XCIpO1xuICBjb25zdCBzZWFyY2ggPSBzZWFyY2hQYXJhbXMudG9TdHJpbmcoKTtcbiAgaWYgKHNlYXJjaCkge1xuICAgIG9wdGlvbnMudXJsID0gXCJcIi5jb25jYXQodXJsLCBcIj9cIikuY29uY2F0KHNlYXJjaCk7XG4gIH1cbiAgb3B0aW9ucy5tZXRob2QgPSBvcHRpb25zLmJvZHkgJiYgIW9wdGlvbnMubWV0aG9kID8gXCJQT1NUXCIgOiAob3B0aW9ucy5tZXRob2QgfHwgXCJHRVRcIikudG9VcHBlckNhc2UoKTtcbiAgcmV0dXJuIG9wdGlvbnM7XG59O1xuZnVuY3Rpb24gbm9ybWFsaXplVGltZW91dCh0aW1lKSB7XG4gIGlmICh0aW1lID09PSBmYWxzZSB8fCB0aW1lID09PSAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICh0aW1lLmNvbm5lY3QgfHwgdGltZS5zb2NrZXQpIHtcbiAgICByZXR1cm4gdGltZTtcbiAgfVxuICBjb25zdCBkZWxheSA9IE51bWJlcih0aW1lKTtcbiAgaWYgKGlzTmFOKGRlbGF5KSkge1xuICAgIHJldHVybiBub3JtYWxpemVUaW1lb3V0KGRlZmF1bHRPcHRpb25zLnRpbWVvdXQpO1xuICB9XG4gIHJldHVybiB7XG4gICAgY29ubmVjdDogZGVsYXksXG4gICAgc29ja2V0OiBkZWxheVxuICB9O1xufVxuY29uc3QgdmFsaWRVcmwgPSAvXmh0dHBzPzpcXC9cXC8vaTtcbmNvbnN0IHZhbGlkYXRlT3B0aW9ucyA9IGZ1bmN0aW9uIHZhbGlkYXRlT3B0aW9uczIob3B0aW9ucykge1xuICBpZiAoIXZhbGlkVXJsLnRlc3Qob3B0aW9ucy51cmwpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdcIicuY29uY2F0KG9wdGlvbnMudXJsLCAnXCIgaXMgbm90IGEgdmFsaWQgVVJMJykpO1xuICB9XG59O1xuZXhwb3J0cy5wcm9jZXNzT3B0aW9ucyA9IHByb2Nlc3NPcHRpb25zO1xuZXhwb3J0cy52YWxpZGF0ZU9wdGlvbnMgPSB2YWxpZGF0ZU9wdGlvbnM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWZhdWx0T3B0aW9uc1ZhbGlkYXRvci0yYkpvbGJMZy5janMubWFwXG4iXSwibmFtZXMiOlsiaXNSZWFjdE5hdGl2ZSIsIm5hdmlnYXRvciIsInByb2R1Y3QiLCJkZWZhdWx0T3B0aW9ucyIsInRpbWVvdXQiLCJwcm9jZXNzT3B0aW9ucyIsInByb2Nlc3NPcHRpb25zMiIsIm9wdHMiLCJvcHRpb25zIiwidXJsIiwic2VhcmNoUGFyYW1zIiwiVVJMIiwibm9ybWFsaXplVGltZW91dCIsInF1ZXJ5Iiwia2V5IiwidmFsdWUiLCJPYmplY3QiLCJlbnRyaWVzIiwiQXJyYXkiLCJpc0FycmF5IiwidiIsImFwcGVuZCIsInNwbGl0Iiwic2VhcmNoIiwidG9TdHJpbmciLCJjb25jYXQiLCJtZXRob2QiLCJib2R5IiwidG9VcHBlckNhc2UiLCJ0aW1lIiwiY29ubmVjdCIsInNvY2tldCIsImRlbGF5IiwiTnVtYmVyIiwiaXNOYU4iLCJ2YWxpZFVybCIsInZhbGlkYXRlT3B0aW9ucyIsInZhbGlkYXRlT3B0aW9uczIiLCJ0ZXN0IiwiRXJyb3IiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/get-it/dist/_chunks/defaultOptionsValidator-2bJolbLg.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/get-it/dist/index.cjs":
/*!********************************************!*\
  !*** ./node_modules/get-it/dist/index.cjs ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar defaultOptionsValidator = __webpack_require__(/*! ./_chunks/defaultOptionsValidator-2bJolbLg.cjs */ \"(ssr)/./node_modules/get-it/dist/_chunks/defaultOptionsValidator-2bJolbLg.cjs\");\nvar decompressResponse = __webpack_require__(/*! decompress-response */ \"(ssr)/./node_modules/decompress-response/index.js\");\nvar follow = __webpack_require__(/*! follow-redirects */ \"(ssr)/./node_modules/follow-redirects/index.js\");\nvar http = __webpack_require__(/*! http */ \"http\");\nvar https = __webpack_require__(/*! https */ \"https\");\nvar toStream = __webpack_require__(/*! into-stream */ \"(ssr)/./node_modules/into-stream/index.js\");\nvar isStream = __webpack_require__(/*! is-stream */ \"(ssr)/./node_modules/is-stream/index.js\");\nvar progressStream = __webpack_require__(/*! progress-stream */ \"(ssr)/./node_modules/progress-stream/index.js\");\nvar qs = __webpack_require__(/*! querystring */ \"querystring\");\nvar url = __webpack_require__(/*! url */ \"url\");\nvar tunnel = __webpack_require__(/*! tunnel-agent */ \"(ssr)/./node_modules/tunnel-agent/index.js\");\nfunction _interopDefaultCompat(e) {\n    return e && typeof e === \"object\" && \"default\" in e ? e : {\n        default: e\n    };\n}\nfunction _interopNamespaceCompat(e) {\n    if (e && typeof e === \"object\" && \"default\" in e) return e;\n    var n = Object.create(null);\n    if (e) {\n        Object.keys(e).forEach(function(k) {\n            if (k !== \"default\") {\n                var d = Object.getOwnPropertyDescriptor(e, k);\n                Object.defineProperty(n, k, d.get ? d : {\n                    enumerable: true,\n                    get: function() {\n                        return e[k];\n                    }\n                });\n            }\n        });\n    }\n    n.default = e;\n    return Object.freeze(n);\n}\nvar decompressResponse__default = /*#__PURE__*/ _interopDefaultCompat(decompressResponse);\nvar follow__default = /*#__PURE__*/ _interopDefaultCompat(follow);\nvar http__default = /*#__PURE__*/ _interopDefaultCompat(http);\nvar https__default = /*#__PURE__*/ _interopDefaultCompat(https);\nvar toStream__default = /*#__PURE__*/ _interopDefaultCompat(toStream);\nvar isStream__default = /*#__PURE__*/ _interopDefaultCompat(isStream);\nvar progressStream__default = /*#__PURE__*/ _interopDefaultCompat(progressStream);\nvar qs__default = /*#__PURE__*/ _interopDefaultCompat(qs);\nvar url__default = /*#__PURE__*/ _interopDefaultCompat(url);\nvar tunnel__namespace = /*#__PURE__*/ _interopNamespaceCompat(tunnel);\nconst middlewareReducer = (middleware)=>function applyMiddleware(hook, defaultValue) {\n        const bailEarly = hook === \"onError\";\n        let value = defaultValue;\n        for(var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){\n            args[_key - 2] = arguments[_key];\n        }\n        for(let i = 0; i < middleware[hook].length; i++){\n            const handler = middleware[hook][i];\n            value = handler(value, ...args);\n            if (bailEarly && !value) {\n                break;\n            }\n        }\n        return value;\n    };\nfunction createPubSub() {\n    const subscribers = /* @__PURE__ */ Object.create(null);\n    let nextId = 0;\n    function subscribe(subscriber) {\n        const id = nextId++;\n        subscribers[id] = subscriber;\n        return function unsubscribe() {\n            delete subscribers[id];\n        };\n    }\n    function publish(event) {\n        for(const id in subscribers){\n            subscribers[id](event);\n        }\n    }\n    return {\n        publish,\n        subscribe\n    };\n}\nconst channelNames = [\n    \"request\",\n    \"response\",\n    \"progress\",\n    \"error\",\n    \"abort\"\n];\nconst middlehooks = [\n    \"processOptions\",\n    \"validateOptions\",\n    \"interceptRequest\",\n    \"finalizeOptions\",\n    \"onRequest\",\n    \"onResponse\",\n    \"onError\",\n    \"onReturn\",\n    \"onHeaders\"\n];\nfunction createRequester(initMiddleware, httpRequest) {\n    const loadedMiddleware = [];\n    const middleware = middlehooks.reduce((ware, name)=>{\n        ware[name] = ware[name] || [];\n        return ware;\n    }, {\n        processOptions: [\n            defaultOptionsValidator.processOptions\n        ],\n        validateOptions: [\n            defaultOptionsValidator.validateOptions\n        ]\n    });\n    function request(opts) {\n        const onResponse = (reqErr, res, ctx)=>{\n            let error = reqErr;\n            let response = res;\n            if (!error) {\n                try {\n                    response = applyMiddleware(\"onResponse\", res, ctx);\n                } catch (err) {\n                    response = null;\n                    error = err;\n                }\n            }\n            error = error && applyMiddleware(\"onError\", error, ctx);\n            if (error) {\n                channels.error.publish(error);\n            } else if (response) {\n                channels.response.publish(response);\n            }\n        };\n        const channels = channelNames.reduce((target, name)=>{\n            target[name] = createPubSub();\n            return target;\n        }, {});\n        const applyMiddleware = middlewareReducer(middleware);\n        const options = applyMiddleware(\"processOptions\", opts);\n        applyMiddleware(\"validateOptions\", options);\n        const context = {\n            options,\n            channels,\n            applyMiddleware\n        };\n        let ongoingRequest;\n        const unsubscribe = channels.request.subscribe((ctx)=>{\n            ongoingRequest = httpRequest(ctx, (err, res)=>onResponse(err, res, ctx));\n        });\n        channels.abort.subscribe(()=>{\n            unsubscribe();\n            if (ongoingRequest) {\n                ongoingRequest.abort();\n            }\n        });\n        const returnValue = applyMiddleware(\"onReturn\", channels, context);\n        if (returnValue === channels) {\n            channels.request.publish(context);\n        }\n        return returnValue;\n    }\n    request.use = function use(newMiddleware) {\n        if (!newMiddleware) {\n            throw new Error(\"Tried to add middleware that resolved to falsey value\");\n        }\n        if (typeof newMiddleware === \"function\") {\n            throw new Error(\"Tried to add middleware that was a function. It probably expects you to pass options to it.\");\n        }\n        if (newMiddleware.onReturn && middleware.onReturn.length > 0) {\n            throw new Error(\"Tried to add new middleware with `onReturn` handler, but another handler has already been registered for this event\");\n        }\n        middlehooks.forEach((key)=>{\n            if (newMiddleware[key]) {\n                middleware[key].push(newMiddleware[key]);\n            }\n        });\n        loadedMiddleware.push(newMiddleware);\n        return request;\n    };\n    request.clone = ()=>createRequester(loadedMiddleware, httpRequest);\n    initMiddleware.forEach(request.use);\n    return request;\n}\nfunction lowerCaseHeaders(headers) {\n    return Object.keys(headers || {}).reduce((acc, header)=>{\n        acc[header.toLowerCase()] = headers[header];\n        return acc;\n    }, {});\n}\nfunction formatHostname(hostname) {\n    return hostname.replace(/^\\.*/, \".\").toLowerCase();\n}\nfunction parseNoProxyZone(zoneStr) {\n    const zone = zoneStr.trim().toLowerCase();\n    const zoneParts = zone.split(\":\", 2);\n    const zoneHost = formatHostname(zoneParts[0]);\n    const zonePort = zoneParts[1];\n    const hasPort = zone.indexOf(\":\") > -1;\n    return {\n        hostname: zoneHost,\n        port: zonePort,\n        hasPort\n    };\n}\nfunction uriInNoProxy(uri, noProxy) {\n    const port = uri.port || (uri.protocol === \"https:\" ? \"443\" : \"80\");\n    const hostname = formatHostname(uri.hostname);\n    const noProxyList = noProxy.split(\",\");\n    return noProxyList.map(parseNoProxyZone).some((noProxyZone)=>{\n        const isMatchedAt = hostname.indexOf(noProxyZone.hostname);\n        const hostnameMatched = isMatchedAt > -1 && isMatchedAt === hostname.length - noProxyZone.hostname.length;\n        if (noProxyZone.hasPort) {\n            return port === noProxyZone.port && hostnameMatched;\n        }\n        return hostnameMatched;\n    });\n}\nfunction getProxyFromUri(uri) {\n    const noProxy = process.env.NO_PROXY || process.env.no_proxy || \"\";\n    if (noProxy === \"*\") {\n        return null;\n    }\n    if (noProxy !== \"\" && uriInNoProxy(uri, noProxy)) {\n        return null;\n    }\n    if (uri.protocol === \"http:\") {\n        return process.env.HTTP_PROXY || process.env.http_proxy || null;\n    }\n    if (uri.protocol === \"https:\") {\n        return process.env.HTTPS_PROXY || process.env.https_proxy || process.env.HTTP_PROXY || process.env.http_proxy || null;\n    }\n    return null;\n}\nfunction getHostFromUri(uri) {\n    let host = uri.host;\n    if (uri.port) {\n        if (uri.port === \"80\" && uri.protocol === \"http:\" || uri.port === \"443\" && uri.protocol === \"https:\") {\n            host = uri.hostname;\n        }\n    }\n    return host;\n}\nfunction getHostHeaderWithPort(uri) {\n    const port = uri.port || (uri.protocol === \"https:\" ? \"443\" : \"80\");\n    return \"\".concat(uri.hostname, \":\").concat(port);\n}\nfunction rewriteUriForProxy(reqOpts, uri, proxy) {\n    const headers = reqOpts.headers || {};\n    const options = Object.assign({}, reqOpts, {\n        headers\n    });\n    headers.host = headers.host || getHostHeaderWithPort(uri);\n    options.protocol = proxy.protocol || options.protocol;\n    options.hostname = proxy.host.replace(/:\\d+/, \"\");\n    options.port = proxy.port;\n    options.host = getHostFromUri(Object.assign({}, uri, proxy));\n    options.href = \"\".concat(options.protocol, \"//\").concat(options.host).concat(options.path);\n    options.path = url__default.default.format(uri);\n    return options;\n}\nfunction getProxyOptions(options) {\n    let proxy;\n    if (options.hasOwnProperty(\"proxy\")) {\n        proxy = options.proxy;\n    } else {\n        const uri = url__default.default.parse(options.url);\n        proxy = getProxyFromUri(uri);\n    }\n    return typeof proxy === \"string\" ? url__default.default.parse(proxy) : proxy;\n}\n/*! simple-concat. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */ function concat(stream, cb) {\n    const chunks = [];\n    stream.on(\"data\", function(chunk) {\n        chunks.push(chunk);\n    });\n    stream.once(\"end\", function() {\n        if (cb) cb(null, Buffer.concat(chunks));\n        cb = null;\n    });\n    stream.once(\"error\", function(err) {\n        if (cb) cb(err);\n        cb = null;\n    });\n}\nfunction timedOut(req, time) {\n    if (req.timeoutTimer) {\n        return req;\n    }\n    const delays = isNaN(time) ? time : {\n        socket: time,\n        connect: time\n    };\n    const hostHeader = req.getHeader(\"host\");\n    const host = hostHeader ? \" to \" + hostHeader : \"\";\n    if (delays.connect !== void 0) {\n        req.timeoutTimer = setTimeout(function timeoutHandler() {\n            req.abort();\n            const e = new Error(\"Connection timed out on request\" + host);\n            e.code = \"ETIMEDOUT\";\n            req.emit(\"error\", e);\n        }, delays.connect);\n    }\n    req.on(\"socket\", function assign(socket) {\n        if (!(socket.connecting || socket._connecting)) {\n            connect();\n            return;\n        }\n        socket.once(\"connect\", connect);\n    });\n    function clear() {\n        if (req.timeoutTimer) {\n            clearTimeout(req.timeoutTimer);\n            req.timeoutTimer = null;\n        }\n    }\n    function connect() {\n        clear();\n        if (delays.socket !== void 0) {\n            req.setTimeout(delays.socket, function socketTimeoutHandler() {\n                req.abort();\n                const e = new Error(\"Socket timed out on request\" + host);\n                e.code = \"ESOCKETTIMEDOUT\";\n                req.emit(\"error\", e);\n            });\n        }\n    }\n    return req.on(\"error\", clear);\n}\nconst uriParts = [\n    \"protocol\",\n    \"slashes\",\n    \"auth\",\n    \"host\",\n    \"port\",\n    \"hostname\",\n    \"hash\",\n    \"search\",\n    \"query\",\n    \"pathname\",\n    \"path\",\n    \"href\"\n];\nconst defaultProxyHeaderWhiteList = [\n    \"accept\",\n    \"accept-charset\",\n    \"accept-encoding\",\n    \"accept-language\",\n    \"accept-ranges\",\n    \"cache-control\",\n    \"content-encoding\",\n    \"content-language\",\n    \"content-location\",\n    \"content-md5\",\n    \"content-range\",\n    \"content-type\",\n    \"connection\",\n    \"date\",\n    \"expect\",\n    \"max-forwards\",\n    \"pragma\",\n    \"referer\",\n    \"te\",\n    \"user-agent\",\n    \"via\"\n];\nconst defaultProxyHeaderExclusiveList = [\n    \"proxy-authorization\"\n];\nfunction shouldEnable(options) {\n    if (typeof options.tunnel !== \"undefined\") {\n        return Boolean(options.tunnel);\n    }\n    const uri = url__default.default.parse(options.url);\n    if (uri.protocol === \"https:\") {\n        return true;\n    }\n    return false;\n}\nfunction applyAgent() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let proxy = arguments.length > 1 ? arguments[1] : undefined;\n    const options = Object.assign({}, opts);\n    const proxyHeaderWhiteList = defaultProxyHeaderWhiteList.concat(options.proxyHeaderWhiteList || []).map((header)=>header.toLowerCase());\n    const proxyHeaderExclusiveList = defaultProxyHeaderExclusiveList.concat(options.proxyHeaderExclusiveList || []).map((header)=>header.toLowerCase());\n    const proxyHeaders = getAllowedProxyHeaders(options.headers, proxyHeaderWhiteList);\n    proxyHeaders.host = constructProxyHost(options);\n    options.headers = Object.keys(options.headers || {}).reduce((headers, header)=>{\n        const isAllowed = proxyHeaderExclusiveList.indexOf(header.toLowerCase()) === -1;\n        if (isAllowed) {\n            headers[header] = options.headers[header];\n        }\n        return headers;\n    }, {});\n    const tunnelFn = getTunnelFn(options, proxy);\n    const tunnelOptions = constructTunnelOptions(options, proxy, proxyHeaders);\n    options.agent = tunnelFn(tunnelOptions);\n    return options;\n}\nfunction getTunnelFn(options, proxy) {\n    const uri = getUriParts(options);\n    const tunnelFnName = constructTunnelFnName(uri, proxy);\n    return tunnel__namespace[tunnelFnName];\n}\nfunction getUriParts(options) {\n    return uriParts.reduce((uri, part)=>{\n        uri[part] = options[part];\n        return uri;\n    }, {});\n}\nfunction constructTunnelFnName(uri, proxy) {\n    const uriProtocol = uri.protocol === \"https:\" ? \"https\" : \"http\";\n    const proxyProtocol = proxy.protocol === \"https:\" ? \"Https\" : \"Http\";\n    return \"\".concat(uriProtocol, \"Over\").concat(proxyProtocol);\n}\nfunction constructProxyHost(uri) {\n    const port = uri.port;\n    const protocol = uri.protocol;\n    let proxyHost = \"\".concat(uri.hostname, \":\");\n    if (port) {\n        proxyHost += port;\n    } else if (protocol === \"https:\") {\n        proxyHost += \"443\";\n    } else {\n        proxyHost += \"80\";\n    }\n    return proxyHost;\n}\nfunction getAllowedProxyHeaders(headers, whiteList) {\n    return Object.keys(headers).filter((header)=>whiteList.indexOf(header.toLowerCase()) !== -1).reduce((set, header)=>{\n        set[header] = headers[header];\n        return set;\n    }, {});\n}\nfunction constructTunnelOptions(options, proxy, proxyHeaders) {\n    return {\n        proxy: {\n            host: proxy.hostname,\n            port: +proxy.port,\n            proxyAuth: proxy.auth,\n            headers: proxyHeaders\n        },\n        headers: options.headers,\n        ca: options.ca,\n        cert: options.cert,\n        key: options.key,\n        passphrase: options.passphrase,\n        pfx: options.pfx,\n        ciphers: options.ciphers,\n        rejectUnauthorized: options.rejectUnauthorized,\n        secureOptions: options.secureOptions,\n        secureProtocol: options.secureProtocol\n    };\n}\nconst adapter = \"node\";\nconst reduceResponse = (res, reqUrl, method, body)=>({\n        body,\n        url: reqUrl,\n        method,\n        headers: res.headers,\n        statusCode: res.statusCode,\n        statusMessage: res.statusMessage\n    });\nconst httpRequester = (context, cb)=>{\n    const { options } = context;\n    const uri = Object.assign({}, url__default.default.parse(options.url));\n    if (typeof fetch === \"function\" && options.fetch) {\n        const controller = new AbortController();\n        const reqOpts2 = context.applyMiddleware(\"finalizeOptions\", {\n            ...uri,\n            method: options.method,\n            headers: {\n                ...typeof options.fetch === \"object\" && options.fetch.headers ? lowerCaseHeaders(options.fetch.headers) : {},\n                ...lowerCaseHeaders(options.headers)\n            },\n            maxRedirects: options.maxRedirects\n        });\n        const fetchOpts = {\n            credentials: options.withCredentials ? \"include\" : \"omit\",\n            ...typeof options.fetch === \"object\" ? options.fetch : {},\n            method: reqOpts2.method,\n            headers: reqOpts2.headers,\n            body: options.body,\n            signal: controller.signal\n        };\n        const injectedResponse2 = context.applyMiddleware(\"interceptRequest\", void 0, {\n            adapter,\n            context\n        });\n        if (injectedResponse2) {\n            const cbTimer = setTimeout(cb, 0, null, injectedResponse2);\n            const cancel = ()=>clearTimeout(cbTimer);\n            return {\n                abort: cancel\n            };\n        }\n        const request2 = fetch(options.url, fetchOpts);\n        context.applyMiddleware(\"onRequest\", {\n            options,\n            adapter,\n            request: request2,\n            context\n        });\n        request2.then(async (res)=>{\n            const body = options.rawBody ? res.body : await res.text();\n            const headers = {};\n            res.headers.forEach((value, key)=>{\n                headers[key] = value;\n            });\n            cb(null, {\n                body,\n                url: res.url,\n                method: options.method,\n                headers,\n                statusCode: res.status,\n                statusMessage: res.statusText\n            });\n        }).catch((err)=>{\n            if (err.name == \"AbortError\") return;\n            cb(err);\n        });\n        return {\n            abort: ()=>controller.abort()\n        };\n    }\n    const bodyType = isStream__default.default(options.body) ? \"stream\" : typeof options.body;\n    if (bodyType !== \"undefined\" && bodyType !== \"stream\" && bodyType !== \"string\" && !Buffer.isBuffer(options.body)) {\n        throw new Error(\"Request body must be a string, buffer or stream, got \".concat(bodyType));\n    }\n    const lengthHeader = {};\n    if (options.bodySize) {\n        lengthHeader[\"content-length\"] = options.bodySize;\n    } else if (options.body && bodyType !== \"stream\") {\n        lengthHeader[\"content-length\"] = Buffer.byteLength(options.body);\n    }\n    let aborted = false;\n    const callback = (err, res)=>!aborted && cb(err, res);\n    context.channels.abort.subscribe(()=>{\n        aborted = true;\n    });\n    let reqOpts = Object.assign({}, uri, {\n        method: options.method,\n        headers: Object.assign({}, lowerCaseHeaders(options.headers), lengthHeader),\n        maxRedirects: options.maxRedirects\n    });\n    const proxy = getProxyOptions(options);\n    const tunnel = proxy && shouldEnable(options);\n    const injectedResponse = context.applyMiddleware(\"interceptRequest\", void 0, {\n        adapter,\n        context\n    });\n    if (injectedResponse) {\n        const cbTimer = setImmediate(callback, null, injectedResponse);\n        const abort = ()=>clearImmediate(cbTimer);\n        return {\n            abort\n        };\n    }\n    if (options.maxRedirects !== 0) {\n        reqOpts.maxRedirects = options.maxRedirects || 5;\n    }\n    if (proxy && tunnel) {\n        reqOpts = applyAgent(reqOpts, proxy);\n    } else if (proxy && !tunnel) {\n        reqOpts = rewriteUriForProxy(reqOpts, uri, proxy);\n    }\n    if (!tunnel && proxy && proxy.auth && !reqOpts.headers[\"proxy-authorization\"]) {\n        const [username, password] = proxy.auth.username ? [\n            proxy.auth.username,\n            proxy.auth.password\n        ] : proxy.auth.split(\":\").map((item)=>qs__default.default.unescape(item));\n        const auth = Buffer.from(\"\".concat(username, \":\").concat(password), \"utf8\");\n        const authBase64 = auth.toString(\"base64\");\n        reqOpts.headers[\"proxy-authorization\"] = \"Basic \".concat(authBase64);\n    }\n    const transport = getRequestTransport(reqOpts, proxy, tunnel);\n    if (typeof options.debug === \"function\" && proxy) {\n        options.debug(\"Proxying using %s\", reqOpts.agent ? \"tunnel agent\" : \"\".concat(reqOpts.host, \":\").concat(reqOpts.port));\n    }\n    const tryCompressed = reqOpts.method !== \"HEAD\";\n    if (tryCompressed && !reqOpts.headers[\"accept-encoding\"] && options.compress !== false) {\n        reqOpts.headers[\"accept-encoding\"] = \"br, gzip, deflate\";\n    }\n    const finalOptions = context.applyMiddleware(\"finalizeOptions\", reqOpts);\n    const request = transport.request(finalOptions, (response)=>{\n        const res = tryCompressed ? decompressResponse__default.default(response) : response;\n        const resStream = context.applyMiddleware(\"onHeaders\", res, {\n            headers: response.headers,\n            adapter,\n            context\n        });\n        const reqUrl = \"responseUrl\" in response ? response.responseUrl : options.url;\n        if (options.stream) {\n            callback(null, reduceResponse(res, reqUrl, reqOpts.method, resStream));\n            return;\n        }\n        concat(resStream, (err, data)=>{\n            if (err) {\n                return callback(err);\n            }\n            const body = options.rawBody ? data : data.toString();\n            const reduced = reduceResponse(res, reqUrl, reqOpts.method, body);\n            return callback(null, reduced);\n        });\n    });\n    if (options.timeout) {\n        timedOut(request, options.timeout);\n    }\n    request.once(\"error\", callback);\n    const { bodyStream, progress } = getProgressStream(options);\n    context.applyMiddleware(\"onRequest\", {\n        options,\n        adapter,\n        request,\n        context,\n        progress\n    });\n    if (bodyStream) {\n        bodyStream.pipe(request);\n    } else {\n        request.end(options.body);\n    }\n    return {\n        abort: ()=>request.abort()\n    };\n};\nfunction getProgressStream(options) {\n    if (!options.body) {\n        return {};\n    }\n    const bodyIsStream = isStream__default.default(options.body);\n    const length = options.bodySize || (bodyIsStream ? null : Buffer.byteLength(options.body));\n    if (!length) {\n        return bodyIsStream ? {\n            bodyStream: options.body\n        } : {};\n    }\n    const progress = progressStream__default.default({\n        time: 16,\n        length\n    });\n    const bodyStream = bodyIsStream ? options.body : toStream__default.default(options.body);\n    return {\n        bodyStream: bodyStream.pipe(progress),\n        progress\n    };\n}\nfunction getRequestTransport(reqOpts, proxy, tunnel) {\n    const isHttpsRequest = reqOpts.protocol === \"https:\";\n    const transports = reqOpts.maxRedirects === 0 ? {\n        http: http__default.default,\n        https: https__default.default\n    } : {\n        http: follow__default.default.http,\n        https: follow__default.default.https\n    };\n    if (!proxy || tunnel) {\n        return isHttpsRequest ? transports.https : transports.http;\n    }\n    let isHttpsProxy = proxy.port === 443;\n    if (proxy.protocol) {\n        isHttpsProxy = /^https:?/.test(proxy.protocol);\n    }\n    return isHttpsProxy ? transports.https : transports.http;\n}\nconst getIt = function() {\n    let initMiddleware = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let httpRequest = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : httpRequester;\n    return createRequester(initMiddleware, httpRequest);\n};\nconst environment = \"node\";\nexports.adapter = adapter;\nexports.environment = environment;\nexports.getIt = getIt; //# sourceMappingURL=index.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/get-it/dist/index.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/get-it/dist/middleware.cjs":
/*!*************************************************!*\
  !*** ./node_modules/get-it/dist/middleware.cjs ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar http = __webpack_require__(/*! http */ \"http\");\nvar https = __webpack_require__(/*! https */ \"https\");\nvar debugIt = __webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\");\nvar defaultOptionsValidator = __webpack_require__(/*! ./_chunks/defaultOptionsValidator-2bJolbLg.cjs */ \"(ssr)/./node_modules/get-it/dist/_chunks/defaultOptionsValidator-2bJolbLg.cjs\");\nvar isPlainObject = __webpack_require__(/*! is-plain-object */ \"(ssr)/./node_modules/is-plain-object/dist/is-plain-object.js\");\nvar progressStream = __webpack_require__(/*! progress-stream */ \"(ssr)/./node_modules/progress-stream/index.js\");\nvar allowed = __webpack_require__(/*! is-retry-allowed */ \"(ssr)/./node_modules/is-retry-allowed/index.js\");\nfunction _interopDefaultCompat(e) {\n    return e && typeof e === \"object\" && \"default\" in e ? e : {\n        default: e\n    };\n}\nvar debugIt__default = /*#__PURE__*/ _interopDefaultCompat(debugIt);\nvar progressStream__default = /*#__PURE__*/ _interopDefaultCompat(progressStream);\nvar allowed__default = /*#__PURE__*/ _interopDefaultCompat(allowed);\nconst isHttpsProto = /^https:/i;\nfunction agent(opts) {\n    const httpAgent = new http.Agent(opts);\n    const httpsAgent = new https.Agent(opts);\n    const agents = {\n        http: httpAgent,\n        https: httpsAgent\n    };\n    return {\n        finalizeOptions: (options)=>{\n            if (options.agent) {\n                return options;\n            }\n            if (options.maxRedirects > 0) {\n                return {\n                    ...options,\n                    agents\n                };\n            }\n            const isHttps = isHttpsProto.test(options.href || options.protocol);\n            return {\n                ...options,\n                agent: isHttps ? httpsAgent : httpAgent\n            };\n        }\n    };\n}\nconst leadingSlash = /^\\//;\nconst trailingSlash = /\\/$/;\nfunction base(baseUrl) {\n    const baseUri = baseUrl.replace(trailingSlash, \"\");\n    return {\n        processOptions: (options)=>{\n            if (/^https?:\\/\\//i.test(options.url)) {\n                return options;\n            }\n            const url = [\n                baseUri,\n                options.url.replace(leadingSlash, \"\")\n            ].join(\"/\");\n            return Object.assign({}, options, {\n                url\n            });\n        }\n    };\n}\nconst SENSITIVE_HEADERS = [\n    \"cookie\",\n    \"authorization\"\n];\nconst hasOwn = Object.prototype.hasOwnProperty;\nconst redactKeys = (source, redacted)=>{\n    const target = {};\n    for(const key in source){\n        if (hasOwn.call(source, key)) {\n            target[key] = redacted.indexOf(key.toLowerCase()) > -1 ? \"<redacted>\" : source[key];\n        }\n    }\n    return target;\n};\nfunction debug() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const verbose = opts.verbose;\n    const namespace = opts.namespace || \"get-it\";\n    const defaultLogger = debugIt__default.default(namespace);\n    const log = opts.log || defaultLogger;\n    const shortCircuit = log === defaultLogger && !debugIt__default.default.enabled(namespace);\n    let requestId = 0;\n    return {\n        processOptions: (options)=>{\n            options.debug = log;\n            options.requestId = options.requestId || ++requestId;\n            return options;\n        },\n        onRequest: (event)=>{\n            if (shortCircuit || !event) {\n                return event;\n            }\n            const options = event.options;\n            log(\"[%s] HTTP %s %s\", options.requestId, options.method, options.url);\n            if (verbose && options.body && typeof options.body === \"string\") {\n                log(\"[%s] Request body: %s\", options.requestId, options.body);\n            }\n            if (verbose && options.headers) {\n                const headers = opts.redactSensitiveHeaders === false ? options.headers : redactKeys(options.headers, SENSITIVE_HEADERS);\n                log(\"[%s] Request headers: %s\", options.requestId, JSON.stringify(headers, null, 2));\n            }\n            return event;\n        },\n        onResponse: (res, context)=>{\n            if (shortCircuit || !res) {\n                return res;\n            }\n            const reqId = context.options.requestId;\n            log(\"[%s] Response code: %s %s\", reqId, res.statusCode, res.statusMessage);\n            if (verbose && res.body) {\n                log(\"[%s] Response body: %s\", reqId, stringifyBody(res));\n            }\n            return res;\n        },\n        onError: (err, context)=>{\n            const reqId = context.options.requestId;\n            if (!err) {\n                log(\"[%s] Error encountered, but handled by an earlier middleware\", reqId);\n                return err;\n            }\n            log(\"[%s] ERROR: %s\", reqId, err.message);\n            return err;\n        }\n    };\n}\nfunction stringifyBody(res) {\n    const contentType = (res.headers[\"content-type\"] || \"\").toLowerCase();\n    const isJson = contentType.indexOf(\"application/json\") !== -1;\n    return isJson ? tryFormat(res.body) : res.body;\n}\nfunction tryFormat(body) {\n    try {\n        const parsed = typeof body === \"string\" ? JSON.parse(body) : body;\n        return JSON.stringify(parsed, null, 2);\n    } catch (err) {\n        return body;\n    }\n}\nfunction headers(_headers) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return {\n        processOptions: (options)=>{\n            const existing = options.headers || {};\n            options.headers = opts.override ? Object.assign({}, existing, _headers) : Object.assign({}, _headers, existing);\n            return options;\n        }\n    };\n}\nclass HttpError extends Error {\n    constructor(res, ctx){\n        super();\n        const truncatedUrl = res.url.length > 400 ? \"\".concat(res.url.slice(0, 399), \"…\") : res.url;\n        let msg = \"\".concat(res.method, \"-request to \").concat(truncatedUrl, \" resulted in \");\n        msg += \"HTTP \".concat(res.statusCode, \" \").concat(res.statusMessage);\n        this.message = msg.trim();\n        this.response = res;\n        this.request = ctx.options;\n    }\n}\nfunction httpErrors() {\n    return {\n        onResponse: (res, ctx)=>{\n            const isHttpError = res.statusCode >= 400;\n            if (!isHttpError) {\n                return res;\n            }\n            throw new HttpError(res, ctx);\n        }\n    };\n}\nfunction injectResponse() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (typeof opts.inject !== \"function\") {\n        throw new Error(\"`injectResponse` middleware requires a `inject` function\");\n    }\n    const inject = function inject2(prevValue, event) {\n        const response = opts.inject(event, prevValue);\n        if (!response) {\n            return prevValue;\n        }\n        const options = event.context.options;\n        return {\n            body: \"\",\n            url: options.url,\n            method: options.method,\n            headers: {},\n            statusCode: 200,\n            statusMessage: \"OK\",\n            ...response\n        };\n    };\n    return {\n        interceptRequest: inject\n    };\n}\nconst isBuffer = typeof Buffer === \"undefined\" ? ()=>false : (obj)=>Buffer.isBuffer(obj);\nconst serializeTypes = [\n    \"boolean\",\n    \"string\",\n    \"number\"\n];\nfunction jsonRequest() {\n    return {\n        processOptions: (options)=>{\n            const body = options.body;\n            if (!body) {\n                return options;\n            }\n            const isStream = typeof body.pipe === \"function\";\n            const shouldSerialize = !isStream && !isBuffer(body) && (serializeTypes.indexOf(typeof body) !== -1 || Array.isArray(body) || isPlainObject.isPlainObject(body));\n            if (!shouldSerialize) {\n                return options;\n            }\n            return Object.assign({}, options, {\n                body: JSON.stringify(options.body),\n                headers: Object.assign({}, options.headers, {\n                    \"Content-Type\": \"application/json\"\n                })\n            });\n        }\n    };\n}\nfunction jsonResponse(opts) {\n    return {\n        onResponse: (response)=>{\n            const contentType = response.headers[\"content-type\"] || \"\";\n            const shouldDecode = opts && opts.force || contentType.indexOf(\"application/json\") !== -1;\n            if (!response.body || !contentType || !shouldDecode) {\n                return response;\n            }\n            return Object.assign({}, response, {\n                body: tryParse(response.body)\n            });\n        },\n        processOptions: (options)=>Object.assign({}, options, {\n                headers: Object.assign({\n                    Accept: \"application/json\"\n                }, options.headers)\n            })\n    };\n    function tryParse(body) {\n        try {\n            return JSON.parse(body);\n        } catch (err) {\n            err.message = \"Failed to parsed response body as JSON: \".concat(err.message);\n            throw err;\n        }\n    }\n}\nfunction isBrowserOptions(options) {\n    return typeof options === \"object\" && options !== null && !(\"protocol\" in options);\n}\nfunction mtls() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!config.ca) {\n        throw new Error('Required mtls option \"ca\" is missing');\n    }\n    if (!config.cert) {\n        throw new Error('Required mtls option \"cert\" is missing');\n    }\n    if (!config.key) {\n        throw new Error('Required mtls option \"key\" is missing');\n    }\n    return {\n        finalizeOptions: (options)=>{\n            if (isBrowserOptions(options)) {\n                return options;\n            }\n            const mtlsOpts = {\n                cert: config.cert,\n                key: config.key,\n                ca: config.ca\n            };\n            return Object.assign({}, options, mtlsOpts);\n        }\n    };\n}\nlet actualGlobal = {};\nif (typeof globalThis !== \"undefined\") {\n    actualGlobal = globalThis;\n} else if (false) {} else if (typeof global !== \"undefined\") {\n    actualGlobal = global;\n} else if (typeof self !== \"undefined\") {\n    actualGlobal = self;\n}\nvar global$1 = actualGlobal;\nfunction observable() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const Observable = // eslint-disable-next-line @typescript-eslint/no-explicit-any -- @TODO consider dropping checking for a global Observable since it's not on a standards track\n    opts.implementation || global$1.Observable;\n    if (!Observable) {\n        throw new Error(\"`Observable` is not available in global scope, and no implementation was passed\");\n    }\n    return {\n        onReturn: (channels, context)=>new Observable((observer)=>{\n                channels.error.subscribe((err)=>observer.error(err));\n                channels.progress.subscribe((event)=>observer.next(Object.assign({\n                        type: \"progress\"\n                    }, event)));\n                channels.response.subscribe((response)=>{\n                    observer.next(Object.assign({\n                        type: \"response\"\n                    }, response));\n                    observer.complete();\n                });\n                channels.request.publish(context);\n                return ()=>channels.abort.publish();\n            })\n    };\n}\nfunction normalizer(stage) {\n    return (prog)=>({\n            stage,\n            percent: prog.percentage,\n            total: prog.length,\n            loaded: prog.transferred,\n            lengthComputable: !(prog.length === 0 && prog.percentage === 0)\n        });\n}\nfunction progress() {\n    return {\n        onHeaders: (response, evt)=>{\n            const _progress = progressStream__default.default({\n                time: 16\n            });\n            const normalize = normalizer(\"download\");\n            const contentLength = response.headers[\"content-length\"];\n            const length = contentLength ? Number(contentLength) : 0;\n            if (!isNaN(length) && length > 0) {\n                _progress.setLength(length);\n            }\n            _progress.on(\"progress\", (prog)=>evt.context.channels.progress.publish(normalize(prog)));\n            return response.pipe(_progress);\n        },\n        onRequest: (evt)=>{\n            if (!evt.progress) {\n                return;\n            }\n            const normalize = normalizer(\"upload\");\n            evt.progress.on(\"progress\", (prog)=>evt.context.channels.progress.publish(normalize(prog)));\n        }\n    };\n}\nconst promise = function() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const PromiseImplementation = options.implementation || Promise;\n    if (!PromiseImplementation) {\n        throw new Error(\"`Promise` is not available in global scope, and no implementation was passed\");\n    }\n    return {\n        onReturn: (channels, context)=>new PromiseImplementation((resolve, reject)=>{\n                const cancel = context.options.cancelToken;\n                if (cancel) {\n                    cancel.promise.then((reason)=>{\n                        channels.abort.publish(reason);\n                        reject(reason);\n                    });\n                }\n                channels.error.subscribe(reject);\n                channels.response.subscribe((response)=>{\n                    resolve(options.onlyBody ? response.body : response);\n                });\n                setTimeout(()=>{\n                    try {\n                        channels.request.publish(context);\n                    } catch (err) {\n                        reject(err);\n                    }\n                }, 0);\n            })\n    };\n};\nclass Cancel {\n    constructor(message){\n        this.__CANCEL__ = true;\n        this.message = message;\n    }\n    toString() {\n        return \"Cancel\".concat(this.message ? \": \".concat(this.message) : \"\");\n    }\n}\nconst _CancelToken = class _CancelToken {\n    constructor(executor){\n        if (typeof executor !== \"function\") {\n            throw new TypeError(\"executor must be a function.\");\n        }\n        let resolvePromise = null;\n        this.promise = new Promise((resolve)=>{\n            resolvePromise = resolve;\n        });\n        executor((message)=>{\n            if (this.reason) {\n                return;\n            }\n            this.reason = new Cancel(message);\n            resolvePromise(this.reason);\n        });\n    }\n};\n_CancelToken.source = ()=>{\n    let cancel;\n    const token = new _CancelToken((can)=>{\n        cancel = can;\n    });\n    return {\n        token,\n        cancel\n    };\n};\nlet CancelToken = _CancelToken;\nconst isCancel = (value)=>!!(value && (value == null ? void 0 : value.__CANCEL__));\npromise.Cancel = Cancel;\npromise.CancelToken = CancelToken;\npromise.isCancel = isCancel;\nfunction proxy(_proxy) {\n    if (_proxy !== false && (!_proxy || !_proxy.host)) {\n        throw new Error(\"Proxy middleware takes an object of host, port and auth properties\");\n    }\n    return {\n        processOptions: (options)=>Object.assign({\n                proxy: _proxy\n            }, options)\n    };\n}\nvar defaultShouldRetry = (err, num, options)=>{\n    if (options.method !== \"GET\" && options.method !== \"HEAD\") {\n        return false;\n    }\n    if (err.response && err.response.statusCode) {\n        return false;\n    }\n    return allowed__default.default(err);\n};\nconst isStream = (stream)=>stream !== null && typeof stream === \"object\" && typeof stream.pipe === \"function\";\nvar sharedRetry = (opts)=>{\n    const maxRetries = opts.maxRetries || 5;\n    const retryDelay = opts.retryDelay || getRetryDelay;\n    const allowRetry = opts.shouldRetry;\n    return {\n        onError: (err, context)=>{\n            const options = context.options;\n            const max = options.maxRetries || maxRetries;\n            const shouldRetry = options.shouldRetry || allowRetry;\n            const attemptNumber = options.attemptNumber || 0;\n            if (isStream(options.body)) {\n                return err;\n            }\n            if (!shouldRetry(err, attemptNumber, options) || attemptNumber >= max) {\n                return err;\n            }\n            const newContext = Object.assign({}, context, {\n                options: Object.assign({}, options, {\n                    attemptNumber: attemptNumber + 1\n                })\n            });\n            setTimeout(()=>context.channels.request.publish(newContext), retryDelay(attemptNumber));\n            return null;\n        }\n    };\n};\nfunction getRetryDelay(attemptNum) {\n    return 100 * Math.pow(2, attemptNum) + Math.random() * 100;\n}\nconst retry = function() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return sharedRetry({\n        shouldRetry: defaultShouldRetry,\n        ...opts\n    });\n};\nretry.shouldRetry = defaultShouldRetry;\nfunction encode(data) {\n    const query = new URLSearchParams();\n    const nest = (name, _value)=>{\n        const value = _value instanceof Set ? Array.from(_value) : _value;\n        if (Array.isArray(value)) {\n            if (value.length) {\n                for(const index in value){\n                    nest(\"\".concat(name, \"[\").concat(index, \"]\"), value[index]);\n                }\n            } else {\n                query.append(\"\".concat(name, \"[]\"), \"\");\n            }\n        } else if (typeof value === \"object\" && value !== null) {\n            for (const [key, obj] of Object.entries(value)){\n                nest(\"\".concat(name, \"[\").concat(key, \"]\"), obj);\n            }\n        } else {\n            query.append(name, value);\n        }\n    };\n    for (const [key, value] of Object.entries(data)){\n        nest(key, value);\n    }\n    return query.toString();\n}\nfunction urlEncoded() {\n    return {\n        processOptions: (options)=>{\n            const body = options.body;\n            if (!body) {\n                return options;\n            }\n            const isStream = typeof body.pipe === \"function\";\n            const shouldSerialize = !isStream && !isBuffer(body) && isPlainObject.isPlainObject(body);\n            if (!shouldSerialize) {\n                return options;\n            }\n            return {\n                ...options,\n                body: encode(options.body),\n                headers: {\n                    ...options.headers,\n                    \"Content-Type\": \"application/x-www-form-urlencoded\"\n                }\n            };\n        }\n    };\n}\nfunction buildKeepAlive(agent) {\n    return function keepAlive() {\n        let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        const ms = config.ms || 1e3;\n        const maxFree = config.maxFree || 256;\n        const agentOptions = {\n            keepAlive: true,\n            keepAliveMsecs: ms,\n            maxFreeSockets: maxFree\n        };\n        return agent(agentOptions);\n    };\n}\nconst keepAlive = buildKeepAlive(agent);\nexports.processOptions = defaultOptionsValidator.processOptions;\nexports.validateOptions = defaultOptionsValidator.validateOptions;\nexports.Cancel = Cancel;\nexports.CancelToken = CancelToken;\nexports.agent = agent;\nexports.base = base;\nexports.debug = debug;\nexports.headers = headers;\nexports.httpErrors = httpErrors;\nexports.injectResponse = injectResponse;\nexports.jsonRequest = jsonRequest;\nexports.jsonResponse = jsonResponse;\nexports.keepAlive = keepAlive;\nexports.mtls = mtls;\nexports.observable = observable;\nexports.progress = progress;\nexports.promise = promise;\nexports.proxy = proxy;\nexports.retry = retry;\nexports.urlEncoded = urlEncoded; //# sourceMappingURL=middleware.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/get-it/dist/middleware.cjs\n");

/***/ })

};
;