/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@sanity";
exports.ids = ["vendor-chunks/@sanity"];
exports.modules = {

/***/ "(ssr)/./node_modules/@sanity/image-url/lib/node/builder.js":
/*!************************************************************!*\
  !*** ./node_modules/@sanity/image-url/lib/node/builder.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __assign = this && this.__assign || function() {\n    __assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, {\n        enumerable: true,\n        get: function() {\n            return m[k];\n        }\n    });\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ImageUrlBuilder = void 0;\nvar urlForImage_1 = __importStar(__webpack_require__(/*! ./urlForImage */ \"(ssr)/./node_modules/@sanity/image-url/lib/node/urlForImage.js\"));\nvar validFits = [\n    \"clip\",\n    \"crop\",\n    \"fill\",\n    \"fillmax\",\n    \"max\",\n    \"scale\",\n    \"min\"\n];\nvar validCrops = [\n    \"top\",\n    \"bottom\",\n    \"left\",\n    \"right\",\n    \"center\",\n    \"focalpoint\",\n    \"entropy\"\n];\nvar validAutoModes = [\n    \"format\"\n];\nfunction isSanityModernClientLike(client) {\n    return client && \"config\" in client ? typeof client.config === \"function\" : false;\n}\nfunction isSanityClientLike(client) {\n    return client && \"clientConfig\" in client ? typeof client.clientConfig === \"object\" : false;\n}\nfunction rewriteSpecName(key) {\n    var specs = urlForImage_1.SPEC_NAME_TO_URL_NAME_MAPPINGS;\n    for(var _i = 0, specs_1 = specs; _i < specs_1.length; _i++){\n        var entry = specs_1[_i];\n        var specName = entry[0], param = entry[1];\n        if (key === specName || key === param) {\n            return specName;\n        }\n    }\n    return key;\n}\nfunction urlBuilder(options) {\n    // Did we get a modernish client?\n    if (isSanityModernClientLike(options)) {\n        // Inherit config from client\n        var _a = options.config(), apiUrl = _a.apiHost, projectId = _a.projectId, dataset = _a.dataset;\n        var apiHost = apiUrl || \"https://api.sanity.io\";\n        return new ImageUrlBuilder(null, {\n            baseUrl: apiHost.replace(/^https:\\/\\/api\\./, \"https://cdn.\"),\n            projectId: projectId,\n            dataset: dataset\n        });\n    }\n    // Did we get a SanityClient?\n    var client = options;\n    if (isSanityClientLike(client)) {\n        // Inherit config from client\n        var _b = client.clientConfig, apiUrl = _b.apiHost, projectId = _b.projectId, dataset = _b.dataset;\n        var apiHost = apiUrl || \"https://api.sanity.io\";\n        return new ImageUrlBuilder(null, {\n            baseUrl: apiHost.replace(/^https:\\/\\/api\\./, \"https://cdn.\"),\n            projectId: projectId,\n            dataset: dataset\n        });\n    }\n    // Or just accept the options as given\n    return new ImageUrlBuilder(null, options);\n}\nexports[\"default\"] = urlBuilder;\nvar ImageUrlBuilder = /** @class */ function() {\n    function ImageUrlBuilder(parent, options) {\n        this.options = parent ? __assign(__assign({}, parent.options || {}), options || {}) : __assign({}, options || {}); // Copy options\n    }\n    ImageUrlBuilder.prototype.withOptions = function(options) {\n        var baseUrl = options.baseUrl || this.options.baseUrl;\n        var newOptions = {\n            baseUrl: baseUrl\n        };\n        for(var key in options){\n            if (options.hasOwnProperty(key)) {\n                var specKey = rewriteSpecName(key);\n                newOptions[specKey] = options[key];\n            }\n        }\n        return new ImageUrlBuilder(this, __assign({\n            baseUrl: baseUrl\n        }, newOptions));\n    };\n    // The image to be represented. Accepts a Sanity 'image'-document, 'asset'-document or\n    // _id of asset. To get the benefit of automatic hot-spot/crop integration with the content\n    // studio, the 'image'-document must be provided.\n    ImageUrlBuilder.prototype.image = function(source) {\n        return this.withOptions({\n            source: source\n        });\n    };\n    // Specify the dataset\n    ImageUrlBuilder.prototype.dataset = function(dataset) {\n        return this.withOptions({\n            dataset: dataset\n        });\n    };\n    // Specify the projectId\n    ImageUrlBuilder.prototype.projectId = function(projectId) {\n        return this.withOptions({\n            projectId: projectId\n        });\n    };\n    // Specify background color\n    ImageUrlBuilder.prototype.bg = function(bg) {\n        return this.withOptions({\n            bg: bg\n        });\n    };\n    // Set DPR scaling factor\n    ImageUrlBuilder.prototype.dpr = function(dpr) {\n        // A DPR of 1 is the default - so only include it if we have a different value\n        return this.withOptions(dpr && dpr !== 1 ? {\n            dpr: dpr\n        } : {});\n    };\n    // Specify the width of the image in pixels\n    ImageUrlBuilder.prototype.width = function(width) {\n        return this.withOptions({\n            width: width\n        });\n    };\n    // Specify the height of the image in pixels\n    ImageUrlBuilder.prototype.height = function(height) {\n        return this.withOptions({\n            height: height\n        });\n    };\n    // Specify focal point in fraction of image dimensions. Each component 0.0-1.0\n    ImageUrlBuilder.prototype.focalPoint = function(x, y) {\n        return this.withOptions({\n            focalPoint: {\n                x: x,\n                y: y\n            }\n        });\n    };\n    ImageUrlBuilder.prototype.maxWidth = function(maxWidth) {\n        return this.withOptions({\n            maxWidth: maxWidth\n        });\n    };\n    ImageUrlBuilder.prototype.minWidth = function(minWidth) {\n        return this.withOptions({\n            minWidth: minWidth\n        });\n    };\n    ImageUrlBuilder.prototype.maxHeight = function(maxHeight) {\n        return this.withOptions({\n            maxHeight: maxHeight\n        });\n    };\n    ImageUrlBuilder.prototype.minHeight = function(minHeight) {\n        return this.withOptions({\n            minHeight: minHeight\n        });\n    };\n    // Specify width and height in pixels\n    ImageUrlBuilder.prototype.size = function(width, height) {\n        return this.withOptions({\n            width: width,\n            height: height\n        });\n    };\n    // Specify blur between 0 and 100\n    ImageUrlBuilder.prototype.blur = function(blur) {\n        return this.withOptions({\n            blur: blur\n        });\n    };\n    ImageUrlBuilder.prototype.sharpen = function(sharpen) {\n        return this.withOptions({\n            sharpen: sharpen\n        });\n    };\n    // Specify the desired rectangle of the image\n    ImageUrlBuilder.prototype.rect = function(left, top, width, height) {\n        return this.withOptions({\n            rect: {\n                left: left,\n                top: top,\n                width: width,\n                height: height\n            }\n        });\n    };\n    // Specify the image format of the image. 'jpg', 'pjpg', 'png', 'webp'\n    ImageUrlBuilder.prototype.format = function(format) {\n        return this.withOptions({\n            format: format\n        });\n    };\n    ImageUrlBuilder.prototype.invert = function(invert) {\n        return this.withOptions({\n            invert: invert\n        });\n    };\n    // Rotation in degrees 0, 90, 180, 270\n    ImageUrlBuilder.prototype.orientation = function(orientation) {\n        return this.withOptions({\n            orientation: orientation\n        });\n    };\n    // Compression quality 0-100\n    ImageUrlBuilder.prototype.quality = function(quality) {\n        return this.withOptions({\n            quality: quality\n        });\n    };\n    // Make it a download link. Parameter is default filename.\n    ImageUrlBuilder.prototype.forceDownload = function(download) {\n        return this.withOptions({\n            download: download\n        });\n    };\n    // Flip image horizontally\n    ImageUrlBuilder.prototype.flipHorizontal = function() {\n        return this.withOptions({\n            flipHorizontal: true\n        });\n    };\n    // Flip image vertically\n    ImageUrlBuilder.prototype.flipVertical = function() {\n        return this.withOptions({\n            flipVertical: true\n        });\n    };\n    // Ignore crop/hotspot from image record, even when present\n    ImageUrlBuilder.prototype.ignoreImageParams = function() {\n        return this.withOptions({\n            ignoreImageParams: true\n        });\n    };\n    ImageUrlBuilder.prototype.fit = function(value) {\n        if (validFits.indexOf(value) === -1) {\n            throw new Error('Invalid fit mode \"'.concat(value, '\"'));\n        }\n        return this.withOptions({\n            fit: value\n        });\n    };\n    ImageUrlBuilder.prototype.crop = function(value) {\n        if (validCrops.indexOf(value) === -1) {\n            throw new Error('Invalid crop mode \"'.concat(value, '\"'));\n        }\n        return this.withOptions({\n            crop: value\n        });\n    };\n    // Saturation\n    ImageUrlBuilder.prototype.saturation = function(saturation) {\n        return this.withOptions({\n            saturation: saturation\n        });\n    };\n    ImageUrlBuilder.prototype.auto = function(value) {\n        if (validAutoModes.indexOf(value) === -1) {\n            throw new Error('Invalid auto mode \"'.concat(value, '\"'));\n        }\n        return this.withOptions({\n            auto: value\n        });\n    };\n    // Specify the number of pixels to pad the image\n    ImageUrlBuilder.prototype.pad = function(pad) {\n        return this.withOptions({\n            pad: pad\n        });\n    };\n    // Gets the url based on the submitted parameters\n    ImageUrlBuilder.prototype.url = function() {\n        return (0, urlForImage_1.default)(this.options);\n    };\n    // Alias for url()\n    ImageUrlBuilder.prototype.toString = function() {\n        return this.url();\n    };\n    return ImageUrlBuilder;\n}();\nexports.ImageUrlBuilder = ImageUrlBuilder; //# sourceMappingURL=builder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNhbml0eS9pbWFnZS11cmwvbGliL25vZGUvYnVpbGRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLFdBQVcsSUFBSyxJQUFJLElBQUksQ0FBQ0EsUUFBUSxJQUFLO0lBQ3RDQSxXQUFXQyxPQUFPQyxNQUFNLElBQUksU0FBU0MsQ0FBQztRQUNsQyxJQUFLLElBQUlDLEdBQUdDLElBQUksR0FBR0MsSUFBSUMsVUFBVUMsTUFBTSxFQUFFSCxJQUFJQyxHQUFHRCxJQUFLO1lBQ2pERCxJQUFJRyxTQUFTLENBQUNGLEVBQUU7WUFDaEIsSUFBSyxJQUFJSSxLQUFLTCxFQUFHLElBQUlILE9BQU9TLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNSLEdBQUdLLElBQ3pETixDQUFDLENBQUNNLEVBQUUsR0FBR0wsQ0FBQyxDQUFDSyxFQUFFO1FBQ25CO1FBQ0EsT0FBT047SUFDWDtJQUNBLE9BQU9ILFNBQVNhLEtBQUssQ0FBQyxJQUFJLEVBQUVOO0FBQ2hDO0FBQ0EsSUFBSU8sa0JBQWtCLElBQUssSUFBSSxJQUFJLENBQUNBLGVBQWUsSUFBTWIsQ0FBQUEsT0FBT2MsTUFBTSxHQUFJLFNBQVNDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLEVBQUU7SUFDMUYsSUFBSUEsT0FBT0MsV0FBV0QsS0FBS0Q7SUFDM0JqQixPQUFPb0IsY0FBYyxDQUFDTCxHQUFHRyxJQUFJO1FBQUVHLFlBQVk7UUFBTUMsS0FBSztZQUFhLE9BQU9OLENBQUMsQ0FBQ0MsRUFBRTtRQUFFO0lBQUU7QUFDdEYsSUFBTSxTQUFTRixDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0lBQ3RCLElBQUlBLE9BQU9DLFdBQVdELEtBQUtEO0lBQzNCRixDQUFDLENBQUNHLEdBQUcsR0FBR0YsQ0FBQyxDQUFDQyxFQUFFO0FBQ2hCLENBQUM7QUFDRCxJQUFJTSxxQkFBcUIsSUFBSyxJQUFJLElBQUksQ0FBQ0Es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QUMsR0FBR3RFLGNBQWM2QixPQUFPLEVBQUUsSUFBSSxDQUFDVCxPQUFPO0lBQ2xEO0lBQ0Esa0JBQWtCO0lBQ2xCckIsZ0JBQWdCdEIsU0FBUyxDQUFDOEYsUUFBUSxHQUFHO1FBQ2pDLE9BQU8sSUFBSSxDQUFDRCxHQUFHO0lBQ25CO0lBQ0EsT0FBT3ZFO0FBQ1g7QUFDQUQsdUJBQXVCLEdBQUdDLGlCQUMxQixtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uaWtlLy4vbm9kZV9tb2R1bGVzL0BzYW5pdHkvaW1hZ2UtdXJsL2xpYi9ub2RlL2J1aWxkZXIuanM/N2E5NiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSW1hZ2VVcmxCdWlsZGVyID0gdm9pZCAwO1xudmFyIHVybEZvckltYWdlXzEgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vdXJsRm9ySW1hZ2VcIikpO1xudmFyIHZhbGlkRml0cyA9IFsnY2xpcCcsICdjcm9wJywgJ2ZpbGwnLCAnZmlsbG1heCcsICdtYXgnLCAnc2NhbGUnLCAnbWluJ107XG52YXIgdmFsaWRDcm9wcyA9IFsndG9wJywgJ2JvdHRvbScsICdsZWZ0JywgJ3JpZ2h0JywgJ2NlbnRlcicsICdmb2NhbHBvaW50JywgJ2VudHJvcHknXTtcbnZhciB2YWxpZEF1dG9Nb2RlcyA9IFsnZm9ybWF0J107XG5mdW5jdGlvbiBpc1Nhbml0eU1vZGVybkNsaWVudExpa2UoY2xpZW50KSB7XG4gICAgcmV0dXJuIGNsaWVudCAmJiAnY29uZmlnJyBpbiBjbGllbnQgPyB0eXBlb2YgY2xpZW50LmNvbmZpZyA9PT0gJ2Z1bmN0aW9uJyA6IGZhbHNlO1xufVxuZnVuY3Rpb24gaXNTYW5pdHlDbGllbnRMaWtlKGNsaWVudCkge1xuICAgIHJldHVybiBjbGllbnQgJiYgJ2NsaWVudENvbmZpZycgaW4gY2xpZW50ID8gdHlwZW9mIGNsaWVudC5jbGllbnRDb25maWcgPT09ICdvYmplY3QnIDogZmFsc2U7XG59XG5mdW5jdGlvbiByZXdyaXRlU3BlY05hbWUoa2V5KSB7XG4gICAgdmFyIHNwZWNzID0gdXJsRm9ySW1hZ2VfMS5TUEVDX05BTUVfVE9fVVJMX05BTUVfTUFQUElOR1M7XG4gICAgZm9yICh2YXIgX2kgPSAwLCBzcGVjc18xID0gc3BlY3M7IF9pIDwgc3BlY3NfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gc3BlY3NfMVtfaV07XG4gICAgICAgIHZhciBzcGVjTmFtZSA9IGVudHJ5WzBdLCBwYXJhbSA9IGVudHJ5WzFdO1xuICAgICAgICBpZiAoa2V5ID09PSBzcGVjTmFtZSB8fCBrZXkgPT09IHBhcmFtKSB7XG4gICAgICAgICAgICByZXR1cm4gc3BlY05hbWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGtleTtcbn1cbmZ1bmN0aW9uIHVybEJ1aWxkZXIob3B0aW9ucykge1xuICAgIC8vIERpZCB3ZSBnZXQgYSBtb2Rlcm5pc2ggY2xpZW50P1xuICAgIGlmIChpc1Nhbml0eU1vZGVybkNsaWVudExpa2Uob3B0aW9ucykpIHtcbiAgICAgICAgLy8gSW5oZXJpdCBjb25maWcgZnJvbSBjbGllbnRcbiAgICAgICAgdmFyIF9hID0gb3B0aW9ucy5jb25maWcoKSwgYXBpVXJsID0gX2EuYXBpSG9zdCwgcHJvamVjdElkID0gX2EucHJvamVjdElkLCBkYXRhc2V0ID0gX2EuZGF0YXNldDtcbiAgICAgICAgdmFyIGFwaUhvc3QgPSBhcGlVcmwgfHwgJ2h0dHBzOi8vYXBpLnNhbml0eS5pbyc7XG4gICAgICAgIHJldHVybiBuZXcgSW1hZ2VVcmxCdWlsZGVyKG51bGwsIHtcbiAgICAgICAgICAgIGJhc2VVcmw6IGFwaUhvc3QucmVwbGFjZSgvXmh0dHBzOlxcL1xcL2FwaVxcLi8sICdodHRwczovL2Nkbi4nKSxcbiAgICAgICAgICAgIHByb2plY3RJZDogcHJvamVjdElkLFxuICAgICAgICAgICAgZGF0YXNldDogZGF0YXNldCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIERpZCB3ZSBnZXQgYSBTYW5pdHlDbGllbnQ/XG4gICAgdmFyIGNsaWVudCA9IG9wdGlvbnM7XG4gICAgaWYgKGlzU2FuaXR5Q2xpZW50TGlrZShjbGllbnQpKSB7XG4gICAgICAgIC8vIEluaGVyaXQgY29uZmlnIGZyb20gY2xpZW50XG4gICAgICAgIHZhciBfYiA9IGNsaWVudC5jbGllbnRDb25maWcsIGFwaVVybCA9IF9iLmFwaUhvc3QsIHByb2plY3RJZCA9IF9iLnByb2plY3RJZCwgZGF0YXNldCA9IF9iLmRhdGFzZXQ7XG4gICAgICAgIHZhciBhcGlIb3N0ID0gYXBpVXJsIHx8ICdodHRwczovL2FwaS5zYW5pdHkuaW8nO1xuICAgICAgICByZXR1cm4gbmV3IEltYWdlVXJsQnVpbGRlcihudWxsLCB7XG4gICAgICAgICAgICBiYXNlVXJsOiBhcGlIb3N0LnJlcGxhY2UoL15odHRwczpcXC9cXC9hcGlcXC4vLCAnaHR0cHM6Ly9jZG4uJyksXG4gICAgICAgICAgICBwcm9qZWN0SWQ6IHByb2plY3RJZCxcbiAgICAgICAgICAgIGRhdGFzZXQ6IGRhdGFzZXQsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBPciBqdXN0IGFjY2VwdCB0aGUgb3B0aW9ucyBhcyBnaXZlblxuICAgIHJldHVybiBuZXcgSW1hZ2VVcmxCdWlsZGVyKG51bGwsIG9wdGlvbnMpO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gdXJsQnVpbGRlcjtcbnZhciBJbWFnZVVybEJ1aWxkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSW1hZ2VVcmxCdWlsZGVyKHBhcmVudCwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBwYXJlbnRcbiAgICAgICAgICAgID8gX19hc3NpZ24oX19hc3NpZ24oe30sIChwYXJlbnQub3B0aW9ucyB8fCB7fSkpLCAob3B0aW9ucyB8fCB7fSkpIDogX19hc3NpZ24oe30sIChvcHRpb25zIHx8IHt9KSk7IC8vIENvcHkgb3B0aW9uc1xuICAgIH1cbiAgICBJbWFnZVVybEJ1aWxkZXIucHJvdG90eXBlLndpdGhPcHRpb25zID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGJhc2VVcmwgPSBvcHRpb25zLmJhc2VVcmwgfHwgdGhpcy5vcHRpb25zLmJhc2VVcmw7XG4gICAgICAgIHZhciBuZXdPcHRpb25zID0geyBiYXNlVXJsOiBiYXNlVXJsIH07XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNwZWNLZXkgPSByZXdyaXRlU3BlY05hbWUoa2V5KTtcbiAgICAgICAgICAgICAgICBuZXdPcHRpb25zW3NwZWNLZXldID0gb3B0aW9uc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgSW1hZ2VVcmxCdWlsZGVyKHRoaXMsIF9fYXNzaWduKHsgYmFzZVVybDogYmFzZVVybCB9LCBuZXdPcHRpb25zKSk7XG4gICAgfTtcbiAgICAvLyBUaGUgaW1hZ2UgdG8gYmUgcmVwcmVzZW50ZWQuIEFjY2VwdHMgYSBTYW5pdHkgJ2ltYWdlJy1kb2N1bWVudCwgJ2Fzc2V0Jy1kb2N1bWVudCBvclxuICAgIC8vIF9pZCBvZiBhc3NldC4gVG8gZ2V0IHRoZSBiZW5lZml0IG9mIGF1dG9tYXRpYyBob3Qtc3BvdC9jcm9wIGludGVncmF0aW9uIHdpdGggdGhlIGNvbnRlbnRcbiAgICAvLyBzdHVkaW8sIHRoZSAnaW1hZ2UnLWRvY3VtZW50IG11c3QgYmUgcHJvdmlkZWQuXG4gICAgSW1hZ2VVcmxCdWlsZGVyLnByb3RvdHlwZS5pbWFnZSA9IGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2l0aE9wdGlvbnMoeyBzb3VyY2U6IHNvdXJjZSB9KTtcbiAgICB9O1xuICAgIC8vIFNwZWNpZnkgdGhlIGRhdGFzZXRcbiAgICBJbWFnZVVybEJ1aWxkZXIucHJvdG90eXBlLmRhdGFzZXQgPSBmdW5jdGlvbiAoZGF0YXNldCkge1xuICAgICAgICByZXR1cm4gdGhpcy53aXRoT3B0aW9ucyh7IGRhdGFzZXQ6IGRhdGFzZXQgfSk7XG4gICAgfTtcbiAgICAvLyBTcGVjaWZ5IHRoZSBwcm9qZWN0SWRcbiAgICBJbWFnZVVybEJ1aWxkZXIucHJvdG90eXBlLnByb2plY3RJZCA9IGZ1bmN0aW9uIChwcm9qZWN0SWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2l0aE9wdGlvbnMoeyBwcm9qZWN0SWQ6IHByb2plY3RJZCB9KTtcbiAgICB9O1xuICAgIC8vIFNwZWNpZnkgYmFja2dyb3VuZCBjb2xvclxuICAgIEltYWdlVXJsQnVpbGRlci5wcm90b3R5cGUuYmcgPSBmdW5jdGlvbiAoYmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2l0aE9wdGlvbnMoeyBiZzogYmcgfSk7XG4gICAgfTtcbiAgICAvLyBTZXQgRFBSIHNjYWxpbmcgZmFjdG9yXG4gICAgSW1hZ2VVcmxCdWlsZGVyLnByb3RvdHlwZS5kcHIgPSBmdW5jdGlvbiAoZHByKSB7XG4gICAgICAgIC8vIEEgRFBSIG9mIDEgaXMgdGhlIGRlZmF1bHQgLSBzbyBvbmx5IGluY2x1ZGUgaXQgaWYgd2UgaGF2ZSBhIGRpZmZlcmVudCB2YWx1ZVxuICAgICAgICByZXR1cm4gdGhpcy53aXRoT3B0aW9ucyhkcHIgJiYgZHByICE9PSAxID8geyBkcHI6IGRwciB9IDoge30pO1xuICAgIH07XG4gICAgLy8gU3BlY2lmeSB0aGUgd2lkdGggb2YgdGhlIGltYWdlIGluIHBpeGVsc1xuICAgIEltYWdlVXJsQnVpbGRlci5wcm90b3R5cGUud2lkdGggPSBmdW5jdGlvbiAod2lkdGgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2l0aE9wdGlvbnMoeyB3aWR0aDogd2lkdGggfSk7XG4gICAgfTtcbiAgICAvLyBTcGVjaWZ5IHRoZSBoZWlnaHQgb2YgdGhlIGltYWdlIGluIHBpeGVsc1xuICAgIEltYWdlVXJsQnVpbGRlci5wcm90b3R5cGUuaGVpZ2h0ID0gZnVuY3Rpb24gKGhlaWdodCkge1xuICAgICAgICByZXR1cm4gdGhpcy53aXRoT3B0aW9ucyh7IGhlaWdodDogaGVpZ2h0IH0pO1xuICAgIH07XG4gICAgLy8gU3BlY2lmeSBmb2NhbCBwb2ludCBpbiBmcmFjdGlvbiBvZiBpbWFnZSBkaW1lbnNpb25zLiBFYWNoIGNvbXBvbmVudCAwLjAtMS4wXG4gICAgSW1hZ2VVcmxCdWlsZGVyLnByb3RvdHlwZS5mb2NhbFBvaW50ID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2l0aE9wdGlvbnMoeyBmb2NhbFBvaW50OiB7IHg6IHgsIHk6IHkgfSB9KTtcbiAgICB9O1xuICAgIEltYWdlVXJsQnVpbGRlci5wcm90b3R5cGUubWF4V2lkdGggPSBmdW5jdGlvbiAobWF4V2lkdGgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2l0aE9wdGlvbnMoeyBtYXhXaWR0aDogbWF4V2lkdGggfSk7XG4gICAgfTtcbiAgICBJbWFnZVVybEJ1aWxkZXIucHJvdG90eXBlLm1pbldpZHRoID0gZnVuY3Rpb24gKG1pbldpZHRoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLndpdGhPcHRpb25zKHsgbWluV2lkdGg6IG1pbldpZHRoIH0pO1xuICAgIH07XG4gICAgSW1hZ2VVcmxCdWlsZGVyLnByb3RvdHlwZS5tYXhIZWlnaHQgPSBmdW5jdGlvbiAobWF4SGVpZ2h0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLndpdGhPcHRpb25zKHsgbWF4SGVpZ2h0OiBtYXhIZWlnaHQgfSk7XG4gICAgfTtcbiAgICBJbWFnZVVybEJ1aWxkZXIucHJvdG90eXBlLm1pbkhlaWdodCA9IGZ1bmN0aW9uIChtaW5IZWlnaHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2l0aE9wdGlvbnMoeyBtaW5IZWlnaHQ6IG1pbkhlaWdodCB9KTtcbiAgICB9O1xuICAgIC8vIFNwZWNpZnkgd2lkdGggYW5kIGhlaWdodCBpbiBwaXhlbHNcbiAgICBJbWFnZVVybEJ1aWxkZXIucHJvdG90eXBlLnNpemUgPSBmdW5jdGlvbiAod2lkdGgsIGhlaWdodCkge1xuICAgICAgICByZXR1cm4gdGhpcy53aXRoT3B0aW9ucyh7IHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfSk7XG4gICAgfTtcbiAgICAvLyBTcGVjaWZ5IGJsdXIgYmV0d2VlbiAwIGFuZCAxMDBcbiAgICBJbWFnZVVybEJ1aWxkZXIucHJvdG90eXBlLmJsdXIgPSBmdW5jdGlvbiAoYmx1cikge1xuICAgICAgICByZXR1cm4gdGhpcy53aXRoT3B0aW9ucyh7IGJsdXI6IGJsdXIgfSk7XG4gICAgfTtcbiAgICBJbWFnZVVybEJ1aWxkZXIucHJvdG90eXBlLnNoYXJwZW4gPSBmdW5jdGlvbiAoc2hhcnBlbikge1xuICAgICAgICByZXR1cm4gdGhpcy53aXRoT3B0aW9ucyh7IHNoYXJwZW46IHNoYXJwZW4gfSk7XG4gICAgfTtcbiAgICAvLyBTcGVjaWZ5IHRoZSBkZXNpcmVkIHJlY3RhbmdsZSBvZiB0aGUgaW1hZ2VcbiAgICBJbWFnZVVybEJ1aWxkZXIucHJvdG90eXBlLnJlY3QgPSBmdW5jdGlvbiAobGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLndpdGhPcHRpb25zKHsgcmVjdDogeyBsZWZ0OiBsZWZ0LCB0b3A6IHRvcCwgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCB9IH0pO1xuICAgIH07XG4gICAgLy8gU3BlY2lmeSB0aGUgaW1hZ2UgZm9ybWF0IG9mIHRoZSBpbWFnZS4gJ2pwZycsICdwanBnJywgJ3BuZycsICd3ZWJwJ1xuICAgIEltYWdlVXJsQnVpbGRlci5wcm90b3R5cGUuZm9ybWF0ID0gZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy53aXRoT3B0aW9ucyh7IGZvcm1hdDogZm9ybWF0IH0pO1xuICAgIH07XG4gICAgSW1hZ2VVcmxCdWlsZGVyLnByb3RvdHlwZS5pbnZlcnQgPSBmdW5jdGlvbiAoaW52ZXJ0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLndpdGhPcHRpb25zKHsgaW52ZXJ0OiBpbnZlcnQgfSk7XG4gICAgfTtcbiAgICAvLyBSb3RhdGlvbiBpbiBkZWdyZWVzIDAsIDkwLCAxODAsIDI3MFxuICAgIEltYWdlVXJsQnVpbGRlci5wcm90b3R5cGUub3JpZW50YXRpb24gPSBmdW5jdGlvbiAob3JpZW50YXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2l0aE9wdGlvbnMoeyBvcmllbnRhdGlvbjogb3JpZW50YXRpb24gfSk7XG4gICAgfTtcbiAgICAvLyBDb21wcmVzc2lvbiBxdWFsaXR5IDAtMTAwXG4gICAgSW1hZ2VVcmxCdWlsZGVyLnByb3RvdHlwZS5xdWFsaXR5ID0gZnVuY3Rpb24gKHF1YWxpdHkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2l0aE9wdGlvbnMoeyBxdWFsaXR5OiBxdWFsaXR5IH0pO1xuICAgIH07XG4gICAgLy8gTWFrZSBpdCBhIGRvd25sb2FkIGxpbmsuIFBhcmFtZXRlciBpcyBkZWZhdWx0IGZpbGVuYW1lLlxuICAgIEltYWdlVXJsQnVpbGRlci5wcm90b3R5cGUuZm9yY2VEb3dubG9hZCA9IGZ1bmN0aW9uIChkb3dubG9hZCkge1xuICAgICAgICByZXR1cm4gdGhpcy53aXRoT3B0aW9ucyh7IGRvd25sb2FkOiBkb3dubG9hZCB9KTtcbiAgICB9O1xuICAgIC8vIEZsaXAgaW1hZ2UgaG9yaXpvbnRhbGx5XG4gICAgSW1hZ2VVcmxCdWlsZGVyLnByb3RvdHlwZS5mbGlwSG9yaXpvbnRhbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2l0aE9wdGlvbnMoeyBmbGlwSG9yaXpvbnRhbDogdHJ1ZSB9KTtcbiAgICB9O1xuICAgIC8vIEZsaXAgaW1hZ2UgdmVydGljYWxseVxuICAgIEltYWdlVXJsQnVpbGRlci5wcm90b3R5cGUuZmxpcFZlcnRpY2FsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy53aXRoT3B0aW9ucyh7IGZsaXBWZXJ0aWNhbDogdHJ1ZSB9KTtcbiAgICB9O1xuICAgIC8vIElnbm9yZSBjcm9wL2hvdHNwb3QgZnJvbSBpbWFnZSByZWNvcmQsIGV2ZW4gd2hlbiBwcmVzZW50XG4gICAgSW1hZ2VVcmxCdWlsZGVyLnByb3RvdHlwZS5pZ25vcmVJbWFnZVBhcmFtcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2l0aE9wdGlvbnMoeyBpZ25vcmVJbWFnZVBhcmFtczogdHJ1ZSB9KTtcbiAgICB9O1xuICAgIEltYWdlVXJsQnVpbGRlci5wcm90b3R5cGUuZml0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWxpZEZpdHMuaW5kZXhPZih2YWx1ZSkgPT09IC0xKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGZpdCBtb2RlIFxcXCJcIi5jb25jYXQodmFsdWUsIFwiXFxcIlwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMud2l0aE9wdGlvbnMoeyBmaXQ6IHZhbHVlIH0pO1xuICAgIH07XG4gICAgSW1hZ2VVcmxCdWlsZGVyLnByb3RvdHlwZS5jcm9wID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWxpZENyb3BzLmluZGV4T2YodmFsdWUpID09PSAtMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBjcm9wIG1vZGUgXFxcIlwiLmNvbmNhdCh2YWx1ZSwgXCJcXFwiXCIpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy53aXRoT3B0aW9ucyh7IGNyb3A6IHZhbHVlIH0pO1xuICAgIH07XG4gICAgLy8gU2F0dXJhdGlvblxuICAgIEltYWdlVXJsQnVpbGRlci5wcm90b3R5cGUuc2F0dXJhdGlvbiA9IGZ1bmN0aW9uIChzYXR1cmF0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLndpdGhPcHRpb25zKHsgc2F0dXJhdGlvbjogc2F0dXJhdGlvbiB9KTtcbiAgICB9O1xuICAgIEltYWdlVXJsQnVpbGRlci5wcm90b3R5cGUuYXV0byA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsaWRBdXRvTW9kZXMuaW5kZXhPZih2YWx1ZSkgPT09IC0xKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGF1dG8gbW9kZSBcXFwiXCIuY29uY2F0KHZhbHVlLCBcIlxcXCJcIikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLndpdGhPcHRpb25zKHsgYXV0bzogdmFsdWUgfSk7XG4gICAgfTtcbiAgICAvLyBTcGVjaWZ5IHRoZSBudW1iZXIgb2YgcGl4ZWxzIHRvIHBhZCB0aGUgaW1hZ2VcbiAgICBJbWFnZVVybEJ1aWxkZXIucHJvdG90eXBlLnBhZCA9IGZ1bmN0aW9uIChwYWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2l0aE9wdGlvbnMoeyBwYWQ6IHBhZCB9KTtcbiAgICB9O1xuICAgIC8vIEdldHMgdGhlIHVybCBiYXNlZCBvbiB0aGUgc3VibWl0dGVkIHBhcmFtZXRlcnNcbiAgICBJbWFnZVVybEJ1aWxkZXIucHJvdG90eXBlLnVybCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICgwLCB1cmxGb3JJbWFnZV8xLmRlZmF1bHQpKHRoaXMub3B0aW9ucyk7XG4gICAgfTtcbiAgICAvLyBBbGlhcyBmb3IgdXJsKClcbiAgICBJbWFnZVVybEJ1aWxkZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51cmwoKTtcbiAgICB9O1xuICAgIHJldHVybiBJbWFnZVVybEJ1aWxkZXI7XG59KCkpO1xuZXhwb3J0cy5JbWFnZVVybEJ1aWxkZXIgPSBJbWFnZVVybEJ1aWxkZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idWlsZGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJfX2Fzc2lnbiIsIk9iamVjdCIsImFzc2lnbiIsInQiLCJzIiwiaSIsIm4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJwIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXBwbHkiLCJfX2NyZWF0ZUJpbmRpbmciLCJjcmVhdGUiLCJvIiwibSIsImsiLCJrMiIsInVuZGVmaW5lZCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIl9fc2V0TW9kdWxlRGVmYXVsdCIsInYiLCJ2YWx1ZSIsIl9faW1wb3J0U3RhciIsIm1vZCIsIl9fZXNNb2R1bGUiLCJyZXN1bHQiLCJleHBvcnRzIiwiSW1hZ2VVcmxCdWlsZGVyIiwidXJsRm9ySW1hZ2VfMSIsInJlcXVpcmUiLCJ2YWxpZEZpdHMiLCJ2YWxpZENyb3BzIiwidmFsaWRBdXRvTW9kZXMiLCJpc1Nhbml0eU1vZGVybkNsaWVudExpa2UiLCJjbGllbnQiLCJjb25maWciLCJpc1Nhbml0eUNsaWVudExpa2UiLCJjbGllbnRDb25maWciLCJyZXdyaXRlU3BlY05hbWUiLCJrZXkiLCJzcGVjcyIsIlNQRUNfTkFNRV9UT19VUkxfTkFNRV9NQVBQSU5HUyIsIl9pIiwic3BlY3NfMSIsImVudHJ5Iiwic3BlY05hbWUiLCJwYXJhbSIsInVybEJ1aWxkZXIiLCJvcHRpb25zIiwiX2EiLCJhcGlVcmwiLCJhcGlIb3N0IiwicHJvamVjdElkIiwiZGF0YXNldCIsImJhc2VVcmwiLCJyZXBsYWNlIiwiX2IiLCJkZWZhdWx0IiwicGFyZW50Iiwid2l0aE9wdGlvbnMiLCJuZXdPcHRpb25zIiwic3BlY0tleSIsImltYWdlIiwic291cmNlIiwiYmciLCJkcHIiLCJ3aWR0aCIsImhlaWdodCIsImZvY2FsUG9pbnQiLCJ4IiwieSIsIm1heFdpZHRoIiwibWluV2lkdGgiLCJtYXhIZWlnaHQiLCJtaW5IZWlnaHQiLCJzaXplIiwiYmx1ciIsInNoYXJwZW4iLCJyZWN0IiwibGVmdCIsInRvcCIsImZvcm1hdCIsImludmVydCIsIm9yaWVudGF0aW9uIiwicXVhbGl0eSIsImZvcmNlRG93bmxvYWQiLCJkb3dubG9hZCIsImZsaXBIb3Jpem9udGFsIiwiZmxpcFZlcnRpY2FsIiwiaWdub3JlSW1hZ2VQYXJhbXMiLCJmaXQiLCJpbmRleE9mIiwiRXJyb3IiLCJjb25jYXQiLCJjcm9wIiwic2F0dXJhdGlvbiIsImF1dG8iLCJwYWQiLCJ1cmwiLCJ0b1N0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sanity/image-url/lib/node/builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sanity/image-url/lib/node/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@sanity/image-url/lib/node/index.js ***!
  \**********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nvar builder_1 = __importDefault(__webpack_require__(/*! ./builder */ \"(ssr)/./node_modules/@sanity/image-url/lib/node/builder.js\"));\nmodule.exports = builder_1.default; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNhbml0eS9pbWFnZS11cmwvbGliL25vZGUvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxrQkFBa0IsSUFBSyxJQUFJLElBQUksQ0FBQ0EsZUFBZSxJQUFLLFNBQVVDLEdBQUc7SUFDakUsT0FBTyxPQUFRQSxJQUFJQyxVQUFVLEdBQUlELE1BQU07UUFBRSxXQUFXQTtJQUFJO0FBQzVEO0FBQ0EsSUFBSUUsWUFBWUgsZ0JBQWdCSSxtQkFBT0EsQ0FBQyw2RUFBVztBQUNuREMsT0FBT0MsT0FBTyxHQUFHSCxVQUFVSSxPQUFPLEVBQ2xDLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL25pa2UvLi9ub2RlX21vZHVsZXMvQHNhbml0eS9pbWFnZS11cmwvbGliL25vZGUvaW5kZXguanM/YTIyOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbnZhciBidWlsZGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vYnVpbGRlclwiKSk7XG5tb2R1bGUuZXhwb3J0cyA9IGJ1aWxkZXJfMS5kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJidWlsZGVyXzEiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sanity/image-url/lib/node/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sanity/image-url/lib/node/parseAssetId.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sanity/image-url/lib/node/parseAssetId.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar example = \"image-Tb9Ew8CXIwaY6R1kjMvI0uRR-2000x3000-jpg\";\nfunction parseAssetId(ref) {\n    var _a = ref.split(\"-\"), id = _a[1], dimensionString = _a[2], format = _a[3];\n    if (!id || !dimensionString || !format) {\n        throw new Error(\"Malformed asset _ref '\".concat(ref, \"'. Expected an id like \\\"\").concat(example, '\".'));\n    }\n    var _b = dimensionString.split(\"x\"), imgWidthStr = _b[0], imgHeightStr = _b[1];\n    var width = +imgWidthStr;\n    var height = +imgHeightStr;\n    var isValidAssetId = isFinite(width) && isFinite(height);\n    if (!isValidAssetId) {\n        throw new Error(\"Malformed asset _ref '\".concat(ref, \"'. Expected an id like \\\"\").concat(example, '\".'));\n    }\n    return {\n        id: id,\n        width: width,\n        height: height,\n        format: format\n    };\n}\nexports[\"default\"] = parseAssetId; //# sourceMappingURL=parseAssetId.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNhbml0eS9pbWFnZS11cmwvbGliL25vZGUvcGFyc2VBc3NldElkLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELElBQUlDLFVBQVU7QUFDZCxTQUFTQyxhQUFhQyxHQUFHO0lBQ3JCLElBQUlDLEtBQUtELElBQUlFLEtBQUssQ0FBQyxNQUFNQyxLQUFLRixFQUFFLENBQUMsRUFBRSxFQUFFRyxrQkFBa0JILEVBQUUsQ0FBQyxFQUFFLEVBQUVJLFNBQVNKLEVBQUUsQ0FBQyxFQUFFO0lBQzVFLElBQUksQ0FBQ0UsTUFBTSxDQUFDQyxtQkFBbUIsQ0FBQ0MsUUFBUTtRQUNwQyxNQUFNLElBQUlDLE1BQU0seUJBQXlCQyxNQUFNLENBQUNQLEtBQUssNkJBQTZCTyxNQUFNLENBQUNULFNBQVM7SUFDdEc7SUFDQSxJQUFJVSxLQUFLSixnQkFBZ0JGLEtBQUssQ0FBQyxNQUFNTyxjQUFjRCxFQUFFLENBQUMsRUFBRSxFQUFFRSxlQUFlRixFQUFFLENBQUMsRUFBRTtJQUM5RSxJQUFJRyxRQUFRLENBQUNGO0lBQ2IsSUFBSUcsU0FBUyxDQUFDRjtJQUNkLElBQUlHLGlCQUFpQkMsU0FBU0gsVUFBVUcsU0FBU0Y7SUFDakQsSUFBSSxDQUFDQyxnQkFBZ0I7UUFDakIsTUFBTSxJQUFJUCxNQUFNLHlCQUF5QkMsTUFBTSxDQUFDUCxLQUFLLDZCQUE2Qk8sTUFBTSxDQUFDVCxTQUFTO0lBQ3RHO0lBQ0EsT0FBTztRQUFFSyxJQUFJQTtRQUFJUSxPQUFPQTtRQUFPQyxRQUFRQTtRQUFRUCxRQUFRQTtJQUFPO0FBQ2xFO0FBQ0FULGtCQUFlLEdBQUdHLGNBQ2xCLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL25pa2UvLi9ub2RlX21vZHVsZXMvQHNhbml0eS9pbWFnZS11cmwvbGliL25vZGUvcGFyc2VBc3NldElkLmpzPzQ4NWYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgZXhhbXBsZSA9ICdpbWFnZS1UYjlFdzhDWEl3YVk2UjFrak12STB1UlItMjAwMHgzMDAwLWpwZyc7XG5mdW5jdGlvbiBwYXJzZUFzc2V0SWQocmVmKSB7XG4gICAgdmFyIF9hID0gcmVmLnNwbGl0KCctJyksIGlkID0gX2FbMV0sIGRpbWVuc2lvblN0cmluZyA9IF9hWzJdLCBmb3JtYXQgPSBfYVszXTtcbiAgICBpZiAoIWlkIHx8ICFkaW1lbnNpb25TdHJpbmcgfHwgIWZvcm1hdCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNYWxmb3JtZWQgYXNzZXQgX3JlZiAnXCIuY29uY2F0KHJlZiwgXCInLiBFeHBlY3RlZCBhbiBpZCBsaWtlIFxcXCJcIikuY29uY2F0KGV4YW1wbGUsIFwiXFxcIi5cIikpO1xuICAgIH1cbiAgICB2YXIgX2IgPSBkaW1lbnNpb25TdHJpbmcuc3BsaXQoJ3gnKSwgaW1nV2lkdGhTdHIgPSBfYlswXSwgaW1nSGVpZ2h0U3RyID0gX2JbMV07XG4gICAgdmFyIHdpZHRoID0gK2ltZ1dpZHRoU3RyO1xuICAgIHZhciBoZWlnaHQgPSAraW1nSGVpZ2h0U3RyO1xuICAgIHZhciBpc1ZhbGlkQXNzZXRJZCA9IGlzRmluaXRlKHdpZHRoKSAmJiBpc0Zpbml0ZShoZWlnaHQpO1xuICAgIGlmICghaXNWYWxpZEFzc2V0SWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWFsZm9ybWVkIGFzc2V0IF9yZWYgJ1wiLmNvbmNhdChyZWYsIFwiJy4gRXhwZWN0ZWQgYW4gaWQgbGlrZSBcXFwiXCIpLmNvbmNhdChleGFtcGxlLCBcIlxcXCIuXCIpKTtcbiAgICB9XG4gICAgcmV0dXJuIHsgaWQ6IGlkLCB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0LCBmb3JtYXQ6IGZvcm1hdCB9O1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gcGFyc2VBc3NldElkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFyc2VBc3NldElkLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImV4YW1wbGUiLCJwYXJzZUFzc2V0SWQiLCJyZWYiLCJfYSIsInNwbGl0IiwiaWQiLCJkaW1lbnNpb25TdHJpbmciLCJmb3JtYXQiLCJFcnJvciIsImNvbmNhdCIsIl9iIiwiaW1nV2lkdGhTdHIiLCJpbWdIZWlnaHRTdHIiLCJ3aWR0aCIsImhlaWdodCIsImlzVmFsaWRBc3NldElkIiwiaXNGaW5pdGUiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sanity/image-url/lib/node/parseAssetId.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sanity/image-url/lib/node/parseSource.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sanity/image-url/lib/node/parseSource.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
eval("\nvar __assign = this && this.__assign || function() {\n    __assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar isRef = function(src) {\n    var source = src;\n    return source ? typeof source._ref === \"string\" : false;\n};\nvar isAsset = function(src) {\n    var source = src;\n    return source ? typeof source._id === \"string\" : false;\n};\nvar isAssetStub = function(src) {\n    var source = src;\n    return source && source.asset ? typeof source.asset.url === \"string\" : false;\n};\n// Convert an asset-id, asset or image to an image record suitable for processing\n// eslint-disable-next-line complexity\nfunction parseSource(source) {\n    if (!source) {\n        return null;\n    }\n    var image;\n    if (typeof source === \"string\" && isUrl(source)) {\n        // Someone passed an existing image url?\n        image = {\n            asset: {\n                _ref: urlToId(source)\n            }\n        };\n    } else if (typeof source === \"string\") {\n        // Just an asset id\n        image = {\n            asset: {\n                _ref: source\n            }\n        };\n    } else if (isRef(source)) {\n        // We just got passed an asset directly\n        image = {\n            asset: source\n        };\n    } else if (isAsset(source)) {\n        // If we were passed an image asset document\n        image = {\n            asset: {\n                _ref: source._id || \"\"\n            }\n        };\n    } else if (isAssetStub(source)) {\n        // If we were passed a partial asset (`url`, but no `_id`)\n        image = {\n            asset: {\n                _ref: urlToId(source.asset.url)\n            }\n        };\n    } else if (typeof source.asset === \"object\") {\n        // Probably an actual image with materialized asset\n        image = __assign({}, source);\n    } else {\n        // We got something that does not look like an image, or it is an image\n        // that currently isn't sporting an asset.\n        return null;\n    }\n    var img = source;\n    if (img.crop) {\n        image.crop = img.crop;\n    }\n    if (img.hotspot) {\n        image.hotspot = img.hotspot;\n    }\n    return applyDefaults(image);\n}\nexports[\"default\"] = parseSource;\nfunction isUrl(url) {\n    return /^https?:\\/\\//.test(\"\".concat(url));\n}\nfunction urlToId(url) {\n    var parts = url.split(\"/\").slice(-1);\n    return \"image-\".concat(parts[0]).replace(/\\.([a-z]+)$/, \"-$1\");\n}\n// Mock crop and hotspot if image lacks it\nfunction applyDefaults(image) {\n    if (image.crop && image.hotspot) {\n        return image;\n    }\n    // We need to pad in default values for crop or hotspot\n    var result = __assign({}, image);\n    if (!result.crop) {\n        result.crop = {\n            left: 0,\n            top: 0,\n            bottom: 0,\n            right: 0\n        };\n    }\n    if (!result.hotspot) {\n        result.hotspot = {\n            x: 0.5,\n            y: 0.5,\n            height: 1.0,\n            width: 1.0\n        };\n    }\n    return result;\n} //# sourceMappingURL=parseSource.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sanity/image-url/lib/node/parseSource.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sanity/image-url/lib/node/urlForImage.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sanity/image-url/lib/node/urlForImage.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __assign = this && this.__assign || function() {\n    __assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.parseSource = exports.SPEC_NAME_TO_URL_NAME_MAPPINGS = void 0;\nvar parseAssetId_1 = __importDefault(__webpack_require__(/*! ./parseAssetId */ \"(ssr)/./node_modules/@sanity/image-url/lib/node/parseAssetId.js\"));\nvar parseSource_1 = __importDefault(__webpack_require__(/*! ./parseSource */ \"(ssr)/./node_modules/@sanity/image-url/lib/node/parseSource.js\"));\nexports.parseSource = parseSource_1.default;\nexports.SPEC_NAME_TO_URL_NAME_MAPPINGS = [\n    [\n        \"width\",\n        \"w\"\n    ],\n    [\n        \"height\",\n        \"h\"\n    ],\n    [\n        \"format\",\n        \"fm\"\n    ],\n    [\n        \"download\",\n        \"dl\"\n    ],\n    [\n        \"blur\",\n        \"blur\"\n    ],\n    [\n        \"sharpen\",\n        \"sharp\"\n    ],\n    [\n        \"invert\",\n        \"invert\"\n    ],\n    [\n        \"orientation\",\n        \"or\"\n    ],\n    [\n        \"minHeight\",\n        \"min-h\"\n    ],\n    [\n        \"maxHeight\",\n        \"max-h\"\n    ],\n    [\n        \"minWidth\",\n        \"min-w\"\n    ],\n    [\n        \"maxWidth\",\n        \"max-w\"\n    ],\n    [\n        \"quality\",\n        \"q\"\n    ],\n    [\n        \"fit\",\n        \"fit\"\n    ],\n    [\n        \"crop\",\n        \"crop\"\n    ],\n    [\n        \"saturation\",\n        \"sat\"\n    ],\n    [\n        \"auto\",\n        \"auto\"\n    ],\n    [\n        \"dpr\",\n        \"dpr\"\n    ],\n    [\n        \"pad\",\n        \"pad\"\n    ]\n];\nfunction urlForImage(options) {\n    var spec = __assign({}, options || {});\n    var source = spec.source;\n    delete spec.source;\n    var image = (0, parseSource_1.default)(source);\n    if (!image) {\n        throw new Error(\"Unable to resolve image URL from source (\".concat(JSON.stringify(source), \")\"));\n    }\n    var id = image.asset._ref || image.asset._id || \"\";\n    var asset = (0, parseAssetId_1.default)(id);\n    // Compute crop rect in terms of pixel coordinates in the raw source image\n    var cropLeft = Math.round(image.crop.left * asset.width);\n    var cropTop = Math.round(image.crop.top * asset.height);\n    var crop = {\n        left: cropLeft,\n        top: cropTop,\n        width: Math.round(asset.width - image.crop.right * asset.width - cropLeft),\n        height: Math.round(asset.height - image.crop.bottom * asset.height - cropTop)\n    };\n    // Compute hot spot rect in terms of pixel coordinates\n    var hotSpotVerticalRadius = image.hotspot.height * asset.height / 2;\n    var hotSpotHorizontalRadius = image.hotspot.width * asset.width / 2;\n    var hotSpotCenterX = image.hotspot.x * asset.width;\n    var hotSpotCenterY = image.hotspot.y * asset.height;\n    var hotspot = {\n        left: hotSpotCenterX - hotSpotHorizontalRadius,\n        top: hotSpotCenterY - hotSpotVerticalRadius,\n        right: hotSpotCenterX + hotSpotHorizontalRadius,\n        bottom: hotSpotCenterY + hotSpotVerticalRadius\n    };\n    // If irrelevant, or if we are requested to: don't perform crop/fit based on\n    // the crop/hotspot.\n    if (!(spec.rect || spec.focalPoint || spec.ignoreImageParams || spec.crop)) {\n        spec = __assign(__assign({}, spec), fit({\n            crop: crop,\n            hotspot: hotspot\n        }, spec));\n    }\n    return specToImageUrl(__assign(__assign({}, spec), {\n        asset: asset\n    }));\n}\nexports[\"default\"] = urlForImage;\n// eslint-disable-next-line complexity\nfunction specToImageUrl(spec) {\n    var cdnUrl = (spec.baseUrl || \"https://cdn.sanity.io\").replace(/\\/+$/, \"\");\n    var filename = \"\".concat(spec.asset.id, \"-\").concat(spec.asset.width, \"x\").concat(spec.asset.height, \".\").concat(spec.asset.format);\n    var baseUrl = \"\".concat(cdnUrl, \"/images/\").concat(spec.projectId, \"/\").concat(spec.dataset, \"/\").concat(filename);\n    var params = [];\n    if (spec.rect) {\n        // Only bother url with a crop if it actually crops anything\n        var _a = spec.rect, left = _a.left, top_1 = _a.top, width = _a.width, height = _a.height;\n        var isEffectiveCrop = left !== 0 || top_1 !== 0 || height !== spec.asset.height || width !== spec.asset.width;\n        if (isEffectiveCrop) {\n            params.push(\"rect=\".concat(left, \",\").concat(top_1, \",\").concat(width, \",\").concat(height));\n        }\n    }\n    if (spec.bg) {\n        params.push(\"bg=\".concat(spec.bg));\n    }\n    if (spec.focalPoint) {\n        params.push(\"fp-x=\".concat(spec.focalPoint.x));\n        params.push(\"fp-y=\".concat(spec.focalPoint.y));\n    }\n    var flip = [\n        spec.flipHorizontal && \"h\",\n        spec.flipVertical && \"v\"\n    ].filter(Boolean).join(\"\");\n    if (flip) {\n        params.push(\"flip=\".concat(flip));\n    }\n    // Map from spec name to url param name, and allow using the actual param name as an alternative\n    exports.SPEC_NAME_TO_URL_NAME_MAPPINGS.forEach(function(mapping) {\n        var specName = mapping[0], param = mapping[1];\n        if (typeof spec[specName] !== \"undefined\") {\n            params.push(\"\".concat(param, \"=\").concat(encodeURIComponent(spec[specName])));\n        } else if (typeof spec[param] !== \"undefined\") {\n            params.push(\"\".concat(param, \"=\").concat(encodeURIComponent(spec[param])));\n        }\n    });\n    if (params.length === 0) {\n        return baseUrl;\n    }\n    return \"\".concat(baseUrl, \"?\").concat(params.join(\"&\"));\n}\nfunction fit(source, spec) {\n    var cropRect;\n    var imgWidth = spec.width;\n    var imgHeight = spec.height;\n    // If we are not constraining the aspect ratio, we'll just use the whole crop\n    if (!(imgWidth && imgHeight)) {\n        return {\n            width: imgWidth,\n            height: imgHeight,\n            rect: source.crop\n        };\n    }\n    var crop = source.crop;\n    var hotspot = source.hotspot;\n    // If we are here, that means aspect ratio is locked and fitting will be a bit harder\n    var desiredAspectRatio = imgWidth / imgHeight;\n    var cropAspectRatio = crop.width / crop.height;\n    if (cropAspectRatio > desiredAspectRatio) {\n        // The crop is wider than the desired aspect ratio. That means we are cutting from the sides\n        var height = Math.round(crop.height);\n        var width = Math.round(height * desiredAspectRatio);\n        var top_2 = Math.max(0, Math.round(crop.top));\n        // Center output horizontally over hotspot\n        var hotspotXCenter = Math.round((hotspot.right - hotspot.left) / 2 + hotspot.left);\n        var left = Math.max(0, Math.round(hotspotXCenter - width / 2));\n        // Keep output within crop\n        if (left < crop.left) {\n            left = crop.left;\n        } else if (left + width > crop.left + crop.width) {\n            left = crop.left + crop.width - width;\n        }\n        cropRect = {\n            left: left,\n            top: top_2,\n            width: width,\n            height: height\n        };\n    } else {\n        // The crop is taller than the desired ratio, we are cutting from top and bottom\n        var width = crop.width;\n        var height = Math.round(width / desiredAspectRatio);\n        var left = Math.max(0, Math.round(crop.left));\n        // Center output vertically over hotspot\n        var hotspotYCenter = Math.round((hotspot.bottom - hotspot.top) / 2 + hotspot.top);\n        var top_3 = Math.max(0, Math.round(hotspotYCenter - height / 2));\n        // Keep output rect within crop\n        if (top_3 < crop.top) {\n            top_3 = crop.top;\n        } else if (top_3 + height > crop.top + crop.height) {\n            top_3 = crop.top + crop.height - height;\n        }\n        cropRect = {\n            left: left,\n            top: top_3,\n            width: width,\n            height: height\n        };\n    }\n    return {\n        width: imgWidth,\n        height: imgHeight,\n        rect: cropRect\n    };\n} //# sourceMappingURL=urlForImage.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sanity/image-url/lib/node/urlForImage.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sanity/client/dist/_chunks/nodeMiddleware-1l7OW-D5.cjs":
/*!******************************************************************************!*\
  !*** ./node_modules/@sanity/client/dist/_chunks/nodeMiddleware-1l7OW-D5.cjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nvar getIt = __webpack_require__(/*! get-it */ \"(ssr)/./node_modules/get-it/dist/index.cjs\");\nvar middleware$1 = __webpack_require__(/*! get-it/middleware */ \"(ssr)/./node_modules/get-it/dist/middleware.cjs\");\nvar rxjs = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/index.js\");\nvar operators = __webpack_require__(/*! rxjs/operators */ \"(ssr)/./node_modules/rxjs/dist/cjs/operators/index.js\");\nconst MAX_ITEMS_IN_ERROR_MESSAGE = 5;\nclass ClientError extends Error {\n    constructor(res){\n        const props = extractErrorProps(res);\n        super(props.message);\n        this.statusCode = 400;\n        Object.assign(this, props);\n    }\n}\nclass ServerError extends Error {\n    constructor(res){\n        const props = extractErrorProps(res);\n        super(props.message);\n        this.statusCode = 500;\n        Object.assign(this, props);\n    }\n}\nfunction extractErrorProps(res) {\n    const body = res.body;\n    const props = {\n        response: res,\n        statusCode: res.statusCode,\n        responseBody: stringifyBody(body, res),\n        message: \"\",\n        details: void 0\n    };\n    if (body.error && body.message) {\n        props.message = \"\".concat(body.error, \" - \").concat(body.message);\n        return props;\n    }\n    if (isMutationError(body)) {\n        const allItems = body.error.items || [];\n        const items = allItems.slice(0, MAX_ITEMS_IN_ERROR_MESSAGE).map((item)=>{\n            var _a;\n            return (_a = item.error) == null ? void 0 : _a.description;\n        }).filter(Boolean);\n        let itemsStr = items.length ? \":\\n- \".concat(items.join(\"\\n- \")) : \"\";\n        if (allItems.length > MAX_ITEMS_IN_ERROR_MESSAGE) {\n            itemsStr += \"\\n...and \".concat(allItems.length - MAX_ITEMS_IN_ERROR_MESSAGE, \" more\");\n        }\n        props.message = \"\".concat(body.error.description).concat(itemsStr);\n        props.details = body.error;\n        return props;\n    }\n    if (body.error && body.error.description) {\n        props.message = body.error.description;\n        props.details = body.error;\n        return props;\n    }\n    props.message = body.error || body.message || httpErrorMessage(res);\n    return props;\n}\nfunction isMutationError(body) {\n    return isPlainObject(body) && isPlainObject(body.error) && body.error.type === \"mutationError\" && typeof body.error.description === \"string\";\n}\nfunction isPlainObject(obj) {\n    return typeof obj === \"object\" && obj !== null && !Array.isArray(obj);\n}\nfunction httpErrorMessage(res) {\n    const statusMessage = res.statusMessage ? \" \".concat(res.statusMessage) : \"\";\n    return \"\".concat(res.method, \"-request to \").concat(res.url, \" resulted in HTTP \").concat(res.statusCode).concat(statusMessage);\n}\nfunction stringifyBody(body, res) {\n    const contentType = (res.headers[\"content-type\"] || \"\").toLowerCase();\n    const isJson = contentType.indexOf(\"application/json\") !== -1;\n    return isJson ? JSON.stringify(body, null, 2) : body;\n}\nconst httpError = {\n    onResponse: (res)=>{\n        if (res.statusCode >= 500) {\n            throw new ServerError(res);\n        } else if (res.statusCode >= 400) {\n            throw new ClientError(res);\n        }\n        return res;\n    }\n};\nconst printWarnings = {\n    onResponse: (res)=>{\n        const warn = res.headers[\"x-sanity-warning\"];\n        const warnings = Array.isArray(warn) ? warn : [\n            warn\n        ];\n        warnings.filter(Boolean).forEach((msg)=>console.warn(msg));\n        return res;\n    }\n};\nfunction defineHttpRequest(envMiddleware, _ref) {\n    let { maxRetries = 5, retryDelay } = _ref;\n    const request = getIt.getIt([\n        maxRetries > 0 ? middleware$1.retry({\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            retryDelay,\n            // This option is typed incorrectly in get-it.\n            maxRetries,\n            shouldRetry\n        }) : {},\n        ...envMiddleware,\n        printWarnings,\n        middleware$1.jsonRequest(),\n        middleware$1.jsonResponse(),\n        middleware$1.progress(),\n        httpError,\n        middleware$1.observable({\n            implementation: rxjs.Observable\n        })\n    ]);\n    function httpRequest(options) {\n        let requester = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : request;\n        return requester({\n            maxRedirects: 0,\n            ...options\n        });\n    }\n    httpRequest.defaultRequester = request;\n    return httpRequest;\n}\nfunction shouldRetry(err, attempt, options) {\n    const isSafe = options.method === \"GET\" || options.method === \"HEAD\";\n    const uri = options.uri || options.url;\n    const isQuery = uri.startsWith(\"/data/query\");\n    const isRetriableResponse = err.response && (err.response.statusCode === 429 || err.response.statusCode === 502 || err.response.statusCode === 503);\n    if ((isSafe || isQuery) && isRetriableResponse) return true;\n    return middleware$1.retry.shouldRetry(err, attempt, options);\n}\nfunction getSelection(sel) {\n    if (typeof sel === \"string\" || Array.isArray(sel)) {\n        return {\n            id: sel\n        };\n    }\n    if (typeof sel === \"object\" && sel !== null && \"query\" in sel && typeof sel.query === \"string\") {\n        return \"params\" in sel && typeof sel.params === \"object\" && sel.params !== null ? {\n            query: sel.query,\n            params: sel.params\n        } : {\n            query: sel.query\n        };\n    }\n    const selectionOpts = [\n        \"* Document ID (<docId>)\",\n        \"* Array of document IDs\",\n        \"* Object containing `query`\"\n    ].join(\"\\n\");\n    throw new Error(\"Unknown selection - must be one of:\\n\\n\".concat(selectionOpts));\n}\nconst VALID_ASSET_TYPES = [\n    \"image\",\n    \"file\"\n];\nconst VALID_INSERT_LOCATIONS = [\n    \"before\",\n    \"after\",\n    \"replace\"\n];\nconst dataset = (name)=>{\n    if (!/^(~[a-z0-9]{1}[-\\w]{0,63}|[a-z0-9]{1}[-\\w]{0,63})$/.test(name)) {\n        throw new Error(\"Datasets can only contain lowercase characters, numbers, underscores and dashes, and start with tilde, and be maximum 64 characters\");\n    }\n};\nconst projectId = (id)=>{\n    if (!/^[-a-z0-9]+$/i.test(id)) {\n        throw new Error(\"`projectId` can only contain only a-z, 0-9 and dashes\");\n    }\n};\nconst validateAssetType = (type)=>{\n    if (VALID_ASSET_TYPES.indexOf(type) === -1) {\n        throw new Error(\"Invalid asset type: \".concat(type, \". Must be one of \").concat(VALID_ASSET_TYPES.join(\", \")));\n    }\n};\nconst validateObject = (op, val)=>{\n    if (val === null || typeof val !== \"object\" || Array.isArray(val)) {\n        throw new Error(\"\".concat(op, \"() takes an object of properties\"));\n    }\n};\nconst validateDocumentId = (op, id)=>{\n    if (typeof id !== \"string\" || !/^[a-z0-9_][a-z0-9_.-]{0,127}$/i.test(id) || id.includes(\"..\")) {\n        throw new Error(\"\".concat(op, '(): \"').concat(id, '\" is not a valid document ID'));\n    }\n};\nconst requireDocumentId = (op, doc)=>{\n    if (!doc._id) {\n        throw new Error(\"\".concat(op, '() requires that the document contains an ID (\"_id\" property)'));\n    }\n    validateDocumentId(op, doc._id);\n};\nconst validateInsert = (at, selector, items)=>{\n    const signature = \"insert(at, selector, items)\";\n    if (VALID_INSERT_LOCATIONS.indexOf(at) === -1) {\n        const valid = VALID_INSERT_LOCATIONS.map((loc)=>'\"'.concat(loc, '\"')).join(\", \");\n        throw new Error(\"\".concat(signature, ' takes an \"at\"-argument which is one of: ').concat(valid));\n    }\n    if (typeof selector !== \"string\") {\n        throw new Error(\"\".concat(signature, ' takes a \"selector\"-argument which must be a string'));\n    }\n    if (!Array.isArray(items)) {\n        throw new Error(\"\".concat(signature, ' takes an \"items\"-argument which must be an array'));\n    }\n};\nconst hasDataset = (config)=>{\n    if (!config.dataset) {\n        throw new Error(\"`dataset` must be provided to perform queries\");\n    }\n    return config.dataset || \"\";\n};\nconst requestTag = (tag)=>{\n    if (typeof tag !== \"string\" || !/^[a-z0-9._-]{1,75}$/i.test(tag)) {\n        throw new Error(\"Tag can only contain alphanumeric characters, underscores, dashes and dots, and be between one and 75 characters long.\");\n    }\n    return tag;\n};\nvar __accessCheck$6 = (obj, member, msg)=>{\n    if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet$6 = (obj, member, getter)=>{\n    __accessCheck$6(obj, member, \"read from private field\");\n    return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd$6 = (obj, member, value)=>{\n    if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet$6 = (obj, member, value, setter)=>{\n    __accessCheck$6(obj, member, \"write to private field\");\n    setter ? setter.call(obj, value) : member.set(obj, value);\n    return value;\n};\nvar _client$5, _client2$5;\nclass BasePatch {\n    constructor(selection){\n        let operations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        this.selection = selection;\n        this.operations = operations;\n    }\n    /**\n   * Sets the given attributes to the document. Does NOT merge objects.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attributes to set. To set a deep attribute, use JSONMatch, eg: \\{\"nested.prop\": \"value\"\\}\n   */ set(attrs) {\n        return this._assign(\"set\", attrs);\n    }\n    /**\n   * Sets the given attributes to the document if they are not currently set. Does NOT merge objects.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attributes to set. To set a deep attribute, use JSONMatch, eg: \\{\"nested.prop\": \"value\"\\}\n   */ setIfMissing(attrs) {\n        return this._assign(\"setIfMissing\", attrs);\n    }\n    /**\n   * Performs a \"diff-match-patch\" operation on the string attributes provided.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attributes to perform operation on. To set a deep attribute, use JSONMatch, eg: \\{\"nested.prop\": \"dmp\"\\}\n   */ diffMatchPatch(attrs) {\n        validateObject(\"diffMatchPatch\", attrs);\n        return this._assign(\"diffMatchPatch\", attrs);\n    }\n    /**\n   * Unsets the attribute paths provided.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attribute paths to unset.\n   */ unset(attrs) {\n        if (!Array.isArray(attrs)) {\n            throw new Error(\"unset(attrs) takes an array of attributes to unset, non-array given\");\n        }\n        this.operations = Object.assign({}, this.operations, {\n            unset: attrs\n        });\n        return this;\n    }\n    /**\n   * Increment a numeric value. Each entry in the argument is either an attribute or a JSON path. The value may be a positive or negative integer or floating-point value. The operation will fail if target value is not a numeric value, or doesn't exist.\n   *\n   * @param attrs - Object of attribute paths to increment, values representing the number to increment by.\n   */ inc(attrs) {\n        return this._assign(\"inc\", attrs);\n    }\n    /**\n   * Decrement a numeric value. Each entry in the argument is either an attribute or a JSON path. The value may be a positive or negative integer or floating-point value. The operation will fail if target value is not a numeric value, or doesn't exist.\n   *\n   * @param attrs - Object of attribute paths to decrement, values representing the number to decrement by.\n   */ dec(attrs) {\n        return this._assign(\"dec\", attrs);\n    }\n    /**\n   * Provides methods for modifying arrays, by inserting, appending and replacing elements via a JSONPath expression.\n   *\n   * @param at - Location to insert at, relative to the given selector, or 'replace' the matched path\n   * @param selector - JSONPath expression, eg `comments[-1]` or `blocks[_key==\"abc123\"]`\n   * @param items - Array of items to insert/replace\n   */ insert(at, selector, items) {\n        validateInsert(at, selector, items);\n        return this._assign(\"insert\", {\n            [at]: selector,\n            items\n        });\n    }\n    /**\n   * Append the given items to the array at the given JSONPath\n   *\n   * @param selector - Attribute/path to append to, eg `comments` or `person.hobbies`\n   * @param items - Array of items to append to the array\n   */ append(selector, items) {\n        return this.insert(\"after\", \"\".concat(selector, \"[-1]\"), items);\n    }\n    /**\n   * Prepend the given items to the array at the given JSONPath\n   *\n   * @param selector - Attribute/path to prepend to, eg `comments` or `person.hobbies`\n   * @param items - Array of items to prepend to the array\n   */ prepend(selector, items) {\n        return this.insert(\"before\", \"\".concat(selector, \"[0]\"), items);\n    }\n    /**\n   * Change the contents of an array by removing existing elements and/or adding new elements.\n   *\n   * @param selector - Attribute or JSONPath expression for array\n   * @param start - Index at which to start changing the array (with origin 0). If greater than the length of the array, actual starting index will be set to the length of the array. If negative, will begin that many elements from the end of the array (with origin -1) and will be set to 0 if absolute value is greater than the length of the array.x\n   * @param deleteCount - An integer indicating the number of old array elements to remove.\n   * @param items - The elements to add to the array, beginning at the start index. If you don't specify any elements, splice() will only remove elements from the array.\n   */ splice(selector, start, deleteCount, items) {\n        const delAll = typeof deleteCount === \"undefined\" || deleteCount === -1;\n        const startIndex = start < 0 ? start - 1 : start;\n        const delCount = delAll ? -1 : Math.max(0, start + deleteCount);\n        const delRange = startIndex < 0 && delCount >= 0 ? \"\" : delCount;\n        const rangeSelector = \"\".concat(selector, \"[\").concat(startIndex, \":\").concat(delRange, \"]\");\n        return this.insert(\"replace\", rangeSelector, items || []);\n    }\n    /**\n   * Adds a revision clause, preventing the document from being patched if the `_rev` property does not match the given value\n   *\n   * @param rev - Revision to lock the patch to\n   */ ifRevisionId(rev) {\n        this.operations.ifRevisionID = rev;\n        return this;\n    }\n    /**\n   * Return a plain JSON representation of the patch\n   */ serialize() {\n        return {\n            ...getSelection(this.selection),\n            ...this.operations\n        };\n    }\n    /**\n   * Return a plain JSON representation of the patch\n   */ toJSON() {\n        return this.serialize();\n    }\n    /**\n   * Clears the patch of all operations\n   */ reset() {\n        this.operations = {};\n        return this;\n    }\n    _assign(op, props) {\n        let merge = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n        validateObject(op, props);\n        this.operations = Object.assign({}, this.operations, {\n            [op]: Object.assign({}, merge && this.operations[op] || {}, props)\n        });\n        return this;\n    }\n    _set(op, props) {\n        return this._assign(op, props, false);\n    }\n}\nconst _ObservablePatch = class _ObservablePatch extends BasePatch {\n    constructor(selection, operations, client){\n        super(selection, operations);\n        __privateAdd$6(this, _client$5, void 0);\n        __privateSet$6(this, _client$5, client);\n    }\n    /**\n   * Clones the patch\n   */ clone() {\n        return new _ObservablePatch(this.selection, {\n            ...this.operations\n        }, __privateGet$6(this, _client$5));\n    }\n    commit(options) {\n        if (!__privateGet$6(this, _client$5)) {\n            throw new Error(\"No `client` passed to patch, either provide one or pass the patch to a clients `mutate()` method\");\n        }\n        const returnFirst = typeof this.selection === \"string\";\n        const opts = Object.assign({\n            returnFirst,\n            returnDocuments: true\n        }, options);\n        return __privateGet$6(this, _client$5).mutate({\n            patch: this.serialize()\n        }, opts);\n    }\n};\n_client$5 = new WeakMap();\nlet ObservablePatch = _ObservablePatch;\nconst _Patch = class _Patch extends BasePatch {\n    constructor(selection, operations, client){\n        super(selection, operations);\n        __privateAdd$6(this, _client2$5, void 0);\n        __privateSet$6(this, _client2$5, client);\n    }\n    /**\n   * Clones the patch\n   */ clone() {\n        return new _Patch(this.selection, {\n            ...this.operations\n        }, __privateGet$6(this, _client2$5));\n    }\n    commit(options) {\n        if (!__privateGet$6(this, _client2$5)) {\n            throw new Error(\"No `client` passed to patch, either provide one or pass the patch to a clients `mutate()` method\");\n        }\n        const returnFirst = typeof this.selection === \"string\";\n        const opts = Object.assign({\n            returnFirst,\n            returnDocuments: true\n        }, options);\n        return __privateGet$6(this, _client2$5).mutate({\n            patch: this.serialize()\n        }, opts);\n    }\n};\n_client2$5 = new WeakMap();\nlet Patch = _Patch;\nvar __accessCheck$5 = (obj, member, msg)=>{\n    if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet$5 = (obj, member, getter)=>{\n    __accessCheck$5(obj, member, \"read from private field\");\n    return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd$5 = (obj, member, value)=>{\n    if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet$5 = (obj, member, value, setter)=>{\n    __accessCheck$5(obj, member, \"write to private field\");\n    setter ? setter.call(obj, value) : member.set(obj, value);\n    return value;\n};\nvar _client$4, _client2$4;\nconst defaultMutateOptions = {\n    returnDocuments: false\n};\nclass BaseTransaction {\n    constructor(){\n        let operations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        let transactionId = arguments.length > 1 ? arguments[1] : undefined;\n        this.operations = operations;\n        this.trxId = transactionId;\n    }\n    /**\n   * Creates a new Sanity document. If `_id` is provided and already exists, the mutation will fail. If no `_id` is given, one will automatically be generated by the database.\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param doc - Document to create. Requires a `_type` property.\n   */ create(doc) {\n        validateObject(\"create\", doc);\n        return this._add({\n            create: doc\n        });\n    }\n    /**\n   * Creates a new Sanity document. If a document with the same `_id` already exists, the create operation will be ignored.\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param doc - Document to create if it does not already exist. Requires `_id` and `_type` properties.\n   */ createIfNotExists(doc) {\n        const op = \"createIfNotExists\";\n        validateObject(op, doc);\n        requireDocumentId(op, doc);\n        return this._add({\n            [op]: doc\n        });\n    }\n    /**\n   * Creates a new Sanity document, or replaces an existing one if the same `_id` is already used.\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param doc - Document to create or replace. Requires `_id` and `_type` properties.\n   */ createOrReplace(doc) {\n        const op = \"createOrReplace\";\n        validateObject(op, doc);\n        requireDocumentId(op, doc);\n        return this._add({\n            [op]: doc\n        });\n    }\n    /**\n   * Deletes the document with the given document ID\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param documentId - Document ID to delete\n   */ delete(documentId) {\n        validateDocumentId(\"delete\", documentId);\n        return this._add({\n            delete: {\n                id: documentId\n            }\n        });\n    }\n    transactionId(id) {\n        if (!id) {\n            return this.trxId;\n        }\n        this.trxId = id;\n        return this;\n    }\n    /**\n   * Return a plain JSON representation of the transaction\n   */ serialize() {\n        return [\n            ...this.operations\n        ];\n    }\n    /**\n   * Return a plain JSON representation of the transaction\n   */ toJSON() {\n        return this.serialize();\n    }\n    /**\n   * Clears the transaction of all operations\n   */ reset() {\n        this.operations = [];\n        return this;\n    }\n    _add(mut) {\n        this.operations.push(mut);\n        return this;\n    }\n}\nconst _Transaction = class _Transaction extends BaseTransaction {\n    constructor(operations, client, transactionId){\n        super(operations, transactionId);\n        __privateAdd$5(this, _client$4, void 0);\n        __privateSet$5(this, _client$4, client);\n    }\n    /**\n   * Clones the transaction\n   */ clone() {\n        return new _Transaction([\n            ...this.operations\n        ], __privateGet$5(this, _client$4), this.trxId);\n    }\n    commit(options) {\n        if (!__privateGet$5(this, _client$4)) {\n            throw new Error(\"No `client` passed to transaction, either provide one or pass the transaction to a clients `mutate()` method\");\n        }\n        return __privateGet$5(this, _client$4).mutate(this.serialize(), Object.assign({\n            transactionId: this.trxId\n        }, defaultMutateOptions, options || {}));\n    }\n    patch(patchOrDocumentId, patchOps) {\n        const isBuilder = typeof patchOps === \"function\";\n        const isPatch = typeof patchOrDocumentId !== \"string\" && patchOrDocumentId instanceof Patch;\n        if (isPatch) {\n            return this._add({\n                patch: patchOrDocumentId.serialize()\n            });\n        }\n        if (isBuilder) {\n            const patch = patchOps(new Patch(patchOrDocumentId, {}, __privateGet$5(this, _client$4)));\n            if (!(patch instanceof Patch)) {\n                throw new Error(\"function passed to `patch()` must return the patch\");\n            }\n            return this._add({\n                patch: patch.serialize()\n            });\n        }\n        return this._add({\n            patch: {\n                id: patchOrDocumentId,\n                ...patchOps\n            }\n        });\n    }\n};\n_client$4 = new WeakMap();\nlet Transaction = _Transaction;\nconst _ObservableTransaction = class _ObservableTransaction extends BaseTransaction {\n    constructor(operations, client, transactionId){\n        super(operations, transactionId);\n        __privateAdd$5(this, _client2$4, void 0);\n        __privateSet$5(this, _client2$4, client);\n    }\n    /**\n   * Clones the transaction\n   */ clone() {\n        return new _ObservableTransaction([\n            ...this.operations\n        ], __privateGet$5(this, _client2$4), this.trxId);\n    }\n    commit(options) {\n        if (!__privateGet$5(this, _client2$4)) {\n            throw new Error(\"No `client` passed to transaction, either provide one or pass the transaction to a clients `mutate()` method\");\n        }\n        return __privateGet$5(this, _client2$4).mutate(this.serialize(), Object.assign({\n            transactionId: this.trxId\n        }, defaultMutateOptions, options || {}));\n    }\n    patch(patchOrDocumentId, patchOps) {\n        const isBuilder = typeof patchOps === \"function\";\n        const isPatch = typeof patchOrDocumentId !== \"string\" && patchOrDocumentId instanceof ObservablePatch;\n        if (isPatch) {\n            return this._add({\n                patch: patchOrDocumentId.serialize()\n            });\n        }\n        if (isBuilder) {\n            const patch = patchOps(new ObservablePatch(patchOrDocumentId, {}, __privateGet$5(this, _client2$4)));\n            if (!(patch instanceof ObservablePatch)) {\n                throw new Error(\"function passed to `patch()` must return the patch\");\n            }\n            return this._add({\n                patch: patch.serialize()\n            });\n        }\n        return this._add({\n            patch: {\n                id: patchOrDocumentId,\n                ...patchOps\n            }\n        });\n    }\n};\n_client2$4 = new WeakMap();\nlet ObservableTransaction = _ObservableTransaction;\nconst BASE_URL = \"https://www.sanity.io/help/\";\nfunction generateHelpUrl(slug) {\n    return BASE_URL + slug;\n}\nfunction once(fn) {\n    let didCall = false;\n    let returnValue;\n    return function() {\n        if (didCall) {\n            return returnValue;\n        }\n        returnValue = fn(...arguments);\n        didCall = true;\n        return returnValue;\n    };\n}\nconst createWarningPrinter = (message)=>// eslint-disable-next-line no-console\n    once(function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        return console.warn(message.join(\" \"), ...args);\n    });\nconst printCdnWarning = createWarningPrinter([\n    \"Since you haven't set a value for `useCdn`, we will deliver content using our\",\n    \"global, edge-cached API-CDN. If you wish to have content delivered faster, set\",\n    \"`useCdn: false` to use the Live API. Note: You may incur higher costs using the live API.\"\n]);\nconst printCdnPreviewDraftsWarning = createWarningPrinter([\n    \"The Sanity client is configured with the `perspective` set to `previewDrafts`, which doesn't support the API-CDN.\",\n    \"The Live API will be used instead. Set `useCdn: false` in your configuration to hide this warning.\"\n]);\nconst printBrowserTokenWarning = createWarningPrinter([\n    \"You have configured Sanity client to use a token in the browser. This may cause unintentional security issues.\",\n    \"See \".concat(generateHelpUrl(\"js-client-browser-token\"), \" for more information and how to hide this warning.\")\n]);\nconst printNoApiVersionSpecifiedWarning = createWarningPrinter([\n    \"Using the Sanity client without specifying an API version is deprecated.\",\n    \"See \".concat(generateHelpUrl(\"js-client-api-version\"))\n]);\nconst printNoDefaultExport = createWarningPrinter([\n    \"The default export of @sanity/client has been deprecated. Use the named export `createClient` instead.\"\n]);\nconst defaultCdnHost = \"apicdn.sanity.io\";\nconst defaultConfig = {\n    apiHost: \"https://api.sanity.io\",\n    apiVersion: \"1\",\n    useProjectHostname: true\n};\nconst LOCALHOSTS = [\n    \"localhost\",\n    \"127.0.0.1\",\n    \"0.0.0.0\"\n];\nconst isLocal = (host)=>LOCALHOSTS.indexOf(host) !== -1;\nconst validateApiVersion = function validateApiVersion2(apiVersion) {\n    if (apiVersion === \"1\" || apiVersion === \"X\") {\n        return;\n    }\n    const apiDate = new Date(apiVersion);\n    const apiVersionValid = /^\\d{4}-\\d{2}-\\d{2}$/.test(apiVersion) && apiDate instanceof Date && apiDate.getTime() > 0;\n    if (!apiVersionValid) {\n        throw new Error(\"Invalid API version string, expected `1` or date in format `YYYY-MM-DD`\");\n    }\n};\nconst validateApiPerspective = function validateApiPerspective2(perspective) {\n    switch(perspective){\n        case \"previewDrafts\":\n        case \"published\":\n        case \"raw\":\n            return;\n        default:\n            throw new TypeError(\"Invalid API perspective string, expected `published`, `previewDrafts` or `raw`\");\n    }\n};\nconst initConfig = (config, prevConfig)=>{\n    const specifiedConfig = Object.assign({}, prevConfig, config);\n    if (!specifiedConfig.apiVersion) {\n        printNoApiVersionSpecifiedWarning();\n    }\n    const newConfig = Object.assign({}, defaultConfig, specifiedConfig);\n    const projectBased = newConfig.useProjectHostname;\n    if (typeof Promise === \"undefined\") {\n        const helpUrl = generateHelpUrl(\"js-client-promise-polyfill\");\n        throw new Error(\"No native Promise-implementation found, polyfill needed - see \".concat(helpUrl));\n    }\n    if (projectBased && !newConfig.projectId) {\n        throw new Error(\"Configuration must contain `projectId`\");\n    }\n    if (typeof newConfig.perspective === \"string\") {\n        validateApiPerspective(newConfig.perspective);\n    }\n    if (\"encodeSourceMapAtPath\" in newConfig || \"encodeSourceMap\" in newConfig || \"studioUrl\" in newConfig || \"logger\" in newConfig) {\n        throw new Error(\"It looks like you're using options meant for '@sanity/preview-kit/client', such as 'encodeSourceMapAtPath', 'encodeSourceMap', 'studioUrl' and 'logger'. Make sure you're using the right import.\");\n    }\n    if (\"stega\" in newConfig && newConfig[\"stega\"] !== void 0 && newConfig[\"stega\"] !== false) {\n        throw new Error(\"It looks like you're using options meant for '@sanity/client/stega'. Make sure you're using the right import. Or set 'stega' in 'createClient' to 'false'.\");\n    }\n    const isBrowser =  false && 0;\n    const isLocalhost = isBrowser && isLocal(window.location.hostname);\n    if (isBrowser && isLocalhost && newConfig.token && newConfig.ignoreBrowserTokenWarning !== true) {\n        printBrowserTokenWarning();\n    } else if (typeof newConfig.useCdn === \"undefined\") {\n        printCdnWarning();\n    }\n    if (projectBased) {\n        projectId(newConfig.projectId);\n    }\n    if (newConfig.dataset) {\n        dataset(newConfig.dataset);\n    }\n    if (\"requestTagPrefix\" in newConfig) {\n        newConfig.requestTagPrefix = newConfig.requestTagPrefix ? requestTag(newConfig.requestTagPrefix).replace(/\\.+$/, \"\") : void 0;\n    }\n    newConfig.apiVersion = \"\".concat(newConfig.apiVersion).replace(/^v/, \"\");\n    newConfig.isDefaultApi = newConfig.apiHost === defaultConfig.apiHost;\n    newConfig.useCdn = newConfig.useCdn !== false && !newConfig.withCredentials;\n    validateApiVersion(newConfig.apiVersion);\n    const hostParts = newConfig.apiHost.split(\"://\", 2);\n    const protocol = hostParts[0];\n    const host = hostParts[1];\n    const cdnHost = newConfig.isDefaultApi ? defaultCdnHost : host;\n    if (newConfig.useProjectHostname) {\n        newConfig.url = \"\".concat(protocol, \"://\").concat(newConfig.projectId, \".\").concat(host, \"/v\").concat(newConfig.apiVersion);\n        newConfig.cdnUrl = \"\".concat(protocol, \"://\").concat(newConfig.projectId, \".\").concat(cdnHost, \"/v\").concat(newConfig.apiVersion);\n    } else {\n        newConfig.url = \"\".concat(newConfig.apiHost, \"/v\").concat(newConfig.apiVersion);\n        newConfig.cdnUrl = newConfig.url;\n    }\n    return newConfig;\n};\nconst projectHeader = \"X-Sanity-Project-ID\";\nfunction requestOptions(config) {\n    let overrides = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const headers = {};\n    const token = overrides.token || config.token;\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    if (!overrides.useGlobalApi && !config.useProjectHostname && config.projectId) {\n        headers[projectHeader] = config.projectId;\n    }\n    const withCredentials = Boolean(typeof overrides.withCredentials === \"undefined\" ? config.token || config.withCredentials : overrides.withCredentials);\n    const timeout = typeof overrides.timeout === \"undefined\" ? config.timeout : overrides.timeout;\n    return Object.assign({}, overrides, {\n        headers: Object.assign({}, headers, overrides.headers || {}),\n        timeout: typeof timeout === \"undefined\" ? 5 * 60 * 1e3 : timeout,\n        proxy: overrides.proxy || config.proxy,\n        json: true,\n        withCredentials,\n        fetch: typeof overrides.fetch === \"object\" && typeof config.fetch === \"object\" ? {\n            ...config.fetch,\n            ...overrides.fetch\n        } : overrides.fetch || config.fetch\n    });\n}\nconst encodeQueryString = (_ref2)=>{\n    let { query, params = {}, options = {} } = _ref2;\n    const searchParams = new URLSearchParams();\n    const { tag, ...opts } = options;\n    if (tag) searchParams.append(\"tag\", tag);\n    searchParams.append(\"query\", query);\n    for (const [key, value] of Object.entries(params)){\n        searchParams.append(\"$\".concat(key), JSON.stringify(value));\n    }\n    for (const [key, value] of Object.entries(opts)){\n        if (value) searchParams.append(key, \"\".concat(value));\n    }\n    return \"?\".concat(searchParams);\n};\nconst excludeFalsey = (param, defValue)=>{\n    const value = typeof param === \"undefined\" ? defValue : param;\n    return param === false ? void 0 : value;\n};\nconst getMutationQuery = function() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return {\n        dryRun: options.dryRun,\n        returnIds: true,\n        returnDocuments: excludeFalsey(options.returnDocuments, true),\n        visibility: options.visibility || \"sync\",\n        autoGenerateArrayKeys: options.autoGenerateArrayKeys,\n        skipCrossDatasetReferenceValidation: options.skipCrossDatasetReferenceValidation\n    };\n};\nconst isResponse = (event)=>event.type === \"response\";\nconst getBody = (event)=>event.body;\nconst indexBy = (docs, attr)=>docs.reduce((indexed, doc)=>{\n        indexed[attr(doc)] = doc;\n        return indexed;\n    }, /* @__PURE__ */ Object.create(null));\nconst getQuerySizeLimit = 11264;\nfunction _fetch(client, httpRequest, query, params) {\n    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    if (\"stega\" in options && options[\"stega\"] !== void 0 && options[\"stega\"] !== false) {\n        throw new Error(\"It looks like you're using options meant for '@sanity/client/stega'. Make sure you're using the right import. Or set 'stega' in 'fetch' to 'false'.\");\n    }\n    const mapResponse = options.filterResponse === false ? (res)=>res : (res)=>res.result;\n    const { cache, next, ...opts } = {\n        // Opt out of setting a `signal` on an internal `fetch` if one isn't provided.\n        // This is necessary in React Server Components to avoid opting out of Request Memoization.\n        useAbortSignal: typeof options.signal !== \"undefined\",\n        ...options\n    };\n    const reqOpts = typeof cache !== \"undefined\" || typeof next !== \"undefined\" ? {\n        ...opts,\n        fetch: {\n            cache,\n            next\n        }\n    } : opts;\n    return _dataRequest(client, httpRequest, \"query\", {\n        query,\n        params\n    }, reqOpts).pipe(operators.map(mapResponse));\n}\nfunction _getDocument(client, httpRequest, id) {\n    let opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    const options = {\n        uri: _getDataUrl(client, \"doc\", id),\n        json: true,\n        tag: opts.tag\n    };\n    return _requestObservable(client, httpRequest, options).pipe(operators.filter(isResponse), operators.map((event)=>event.body.documents && event.body.documents[0]));\n}\nfunction _getDocuments(client, httpRequest, ids) {\n    let opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    const options = {\n        uri: _getDataUrl(client, \"doc\", ids.join(\",\")),\n        json: true,\n        tag: opts.tag\n    };\n    return _requestObservable(client, httpRequest, options).pipe(operators.filter(isResponse), operators.map((event)=>{\n        const indexed = indexBy(event.body.documents || [], (doc)=>doc._id);\n        return ids.map((id)=>indexed[id] || null);\n    }));\n}\nfunction _createIfNotExists(client, httpRequest, doc, options) {\n    requireDocumentId(\"createIfNotExists\", doc);\n    return _create(client, httpRequest, doc, \"createIfNotExists\", options);\n}\nfunction _createOrReplace(client, httpRequest, doc, options) {\n    requireDocumentId(\"createOrReplace\", doc);\n    return _create(client, httpRequest, doc, \"createOrReplace\", options);\n}\nfunction _delete(client, httpRequest, selection, options) {\n    return _dataRequest(client, httpRequest, \"mutate\", {\n        mutations: [\n            {\n                delete: getSelection(selection)\n            }\n        ]\n    }, options);\n}\nfunction _mutate(client, httpRequest, mutations, options) {\n    let mut;\n    if (mutations instanceof Patch || mutations instanceof ObservablePatch) {\n        mut = {\n            patch: mutations.serialize()\n        };\n    } else if (mutations instanceof Transaction || mutations instanceof ObservableTransaction) {\n        mut = mutations.serialize();\n    } else {\n        mut = mutations;\n    }\n    const muts = Array.isArray(mut) ? mut : [\n        mut\n    ];\n    const transactionId = options && options.transactionId || void 0;\n    return _dataRequest(client, httpRequest, \"mutate\", {\n        mutations: muts,\n        transactionId\n    }, options);\n}\nfunction _dataRequest(client, httpRequest, endpoint, body) {\n    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    const isMutation = endpoint === \"mutate\";\n    const isQuery = endpoint === \"query\";\n    const strQuery = isMutation ? \"\" : encodeQueryString(body);\n    const useGet = !isMutation && strQuery.length < getQuerySizeLimit;\n    const stringQuery = useGet ? strQuery : \"\";\n    const returnFirst = options.returnFirst;\n    const { timeout, token, tag, headers } = options;\n    const uri = _getDataUrl(client, endpoint, stringQuery);\n    const reqOptions = {\n        method: useGet ? \"GET\" : \"POST\",\n        uri,\n        json: true,\n        body: useGet ? void 0 : body,\n        query: isMutation && getMutationQuery(options),\n        timeout,\n        headers,\n        token,\n        tag,\n        perspective: options.perspective,\n        resultSourceMap: options.resultSourceMap,\n        canUseCdn: isQuery,\n        signal: options.signal,\n        fetch: options.fetch,\n        useAbortSignal: options.useAbortSignal,\n        useCdn: options.useCdn\n    };\n    return _requestObservable(client, httpRequest, reqOptions).pipe(operators.filter(isResponse), operators.map(getBody), operators.map((res)=>{\n        if (!isMutation) {\n            return res;\n        }\n        const results = res.results || [];\n        if (options.returnDocuments) {\n            return returnFirst ? results[0] && results[0].document : results.map((mut)=>mut.document);\n        }\n        const key = returnFirst ? \"documentId\" : \"documentIds\";\n        const ids = returnFirst ? results[0] && results[0].id : results.map((mut)=>mut.id);\n        return {\n            transactionId: res.transactionId,\n            results,\n            [key]: ids\n        };\n    }));\n}\nfunction _create(client, httpRequest, doc, op) {\n    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    const mutation = {\n        [op]: doc\n    };\n    const opts = Object.assign({\n        returnFirst: true,\n        returnDocuments: true\n    }, options);\n    return _dataRequest(client, httpRequest, \"mutate\", {\n        mutations: [\n            mutation\n        ]\n    }, opts);\n}\nfunction _requestObservable(client, httpRequest, options) {\n    var _a, _b;\n    const uri = options.url || options.uri;\n    const config = client.config();\n    const canUseCdn = typeof options.canUseCdn === \"undefined\" ? [\n        \"GET\",\n        \"HEAD\"\n    ].indexOf(options.method || \"GET\") >= 0 && uri.indexOf(\"/data/\") === 0 : options.canUseCdn;\n    let useCdn = ((_a = options.useCdn) != null ? _a : config.useCdn) && canUseCdn;\n    const tag = options.tag && config.requestTagPrefix ? [\n        config.requestTagPrefix,\n        options.tag\n    ].join(\".\") : options.tag || config.requestTagPrefix;\n    if (tag && options.tag !== null) {\n        options.query = {\n            tag: requestTag(tag),\n            ...options.query\n        };\n    }\n    if ([\n        \"GET\",\n        \"HEAD\",\n        \"POST\"\n    ].indexOf(options.method || \"GET\") >= 0 && uri.indexOf(\"/data/query/\") === 0) {\n        const resultSourceMap = (_b = options.resultSourceMap) != null ? _b : config.resultSourceMap;\n        if (resultSourceMap !== void 0 && resultSourceMap !== false) {\n            options.query = {\n                resultSourceMap,\n                ...options.query\n            };\n        }\n        const perspective = options.perspective || config.perspective;\n        if (typeof perspective === \"string\" && perspective !== \"raw\") {\n            validateApiPerspective(perspective);\n            options.query = {\n                perspective,\n                ...options.query\n            };\n            if (perspective === \"previewDrafts\" && useCdn) {\n                useCdn = false;\n                printCdnPreviewDraftsWarning();\n            }\n        }\n    }\n    const reqOptions = requestOptions(config, Object.assign({}, options, {\n        url: _getUrl(client, uri, useCdn)\n    }));\n    const request = new rxjs.Observable((subscriber)=>httpRequest(reqOptions, config.requester).subscribe(subscriber));\n    return options.signal ? request.pipe(_withAbortSignal(options.signal)) : request;\n}\nfunction _request(client, httpRequest, options) {\n    const observable = _requestObservable(client, httpRequest, options).pipe(operators.filter((event)=>event.type === \"response\"), operators.map((event)=>event.body));\n    return observable;\n}\nfunction _getDataUrl(client, operation, path) {\n    const config = client.config();\n    const catalog = hasDataset(config);\n    const baseUri = \"/\".concat(operation, \"/\").concat(catalog);\n    const uri = path ? \"\".concat(baseUri, \"/\").concat(path) : baseUri;\n    return \"/data\".concat(uri).replace(/\\/($|\\?)/, \"$1\");\n}\nfunction _getUrl(client, uri) {\n    let canUseCdn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const { url, cdnUrl } = client.config();\n    const base = canUseCdn ? cdnUrl : url;\n    return \"\".concat(base, \"/\").concat(uri.replace(/^\\//, \"\"));\n}\nfunction _withAbortSignal(signal) {\n    return (input)=>{\n        return new rxjs.Observable((observer)=>{\n            const abort = ()=>observer.error(_createAbortError(signal));\n            if (signal && signal.aborted) {\n                abort();\n                return;\n            }\n            const subscription = input.subscribe(observer);\n            signal.addEventListener(\"abort\", abort);\n            return ()=>{\n                signal.removeEventListener(\"abort\", abort);\n                subscription.unsubscribe();\n            };\n        });\n    };\n}\nconst isDomExceptionSupported = Boolean(globalThis.DOMException);\nfunction _createAbortError(signal) {\n    var _a, _b;\n    if (isDomExceptionSupported) {\n        return new DOMException((_a = signal == null ? void 0 : signal.reason) != null ? _a : \"The operation was aborted.\", \"AbortError\");\n    }\n    const error = new Error((_b = signal == null ? void 0 : signal.reason) != null ? _b : \"The operation was aborted.\");\n    error.name = \"AbortError\";\n    return error;\n}\nvar __accessCheck$4 = (obj, member, msg)=>{\n    if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet$4 = (obj, member, getter)=>{\n    __accessCheck$4(obj, member, \"read from private field\");\n    return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd$4 = (obj, member, value)=>{\n    if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet$4 = (obj, member, value, setter)=>{\n    __accessCheck$4(obj, member, \"write to private field\");\n    setter ? setter.call(obj, value) : member.set(obj, value);\n    return value;\n};\nvar _client$3, _httpRequest$4, _client2$3, _httpRequest2$4;\nclass ObservableAssetsClient {\n    constructor(client, httpRequest){\n        __privateAdd$4(this, _client$3, void 0);\n        __privateAdd$4(this, _httpRequest$4, void 0);\n        __privateSet$4(this, _client$3, client);\n        __privateSet$4(this, _httpRequest$4, httpRequest);\n    }\n    upload(assetType, body, options) {\n        return _upload(__privateGet$4(this, _client$3), __privateGet$4(this, _httpRequest$4), assetType, body, options);\n    }\n}\n_client$3 = new WeakMap();\n_httpRequest$4 = new WeakMap();\nclass AssetsClient {\n    constructor(client, httpRequest){\n        __privateAdd$4(this, _client2$3, void 0);\n        __privateAdd$4(this, _httpRequest2$4, void 0);\n        __privateSet$4(this, _client2$3, client);\n        __privateSet$4(this, _httpRequest2$4, httpRequest);\n    }\n    upload(assetType, body, options) {\n        const observable = _upload(__privateGet$4(this, _client2$3), __privateGet$4(this, _httpRequest2$4), assetType, body, options);\n        return rxjs.lastValueFrom(observable.pipe(operators.filter((event)=>event.type === \"response\"), operators.map((event)=>event.body.document)));\n    }\n}\n_client2$3 = new WeakMap();\n_httpRequest2$4 = new WeakMap();\nfunction _upload(client, httpRequest, assetType, body) {\n    let opts = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    validateAssetType(assetType);\n    let meta = opts.extract || void 0;\n    if (meta && !meta.length) {\n        meta = [\n            \"none\"\n        ];\n    }\n    const dataset = hasDataset(client.config());\n    const assetEndpoint = assetType === \"image\" ? \"images\" : \"files\";\n    const options = optionsFromFile(opts, body);\n    const { tag, label, title, description, creditLine, filename, source } = options;\n    const query = {\n        label,\n        title,\n        description,\n        filename,\n        meta,\n        creditLine\n    };\n    if (source) {\n        query.sourceId = source.id;\n        query.sourceName = source.name;\n        query.sourceUrl = source.url;\n    }\n    return _requestObservable(client, httpRequest, {\n        tag,\n        method: \"POST\",\n        timeout: options.timeout || 0,\n        uri: \"/assets/\".concat(assetEndpoint, \"/\").concat(dataset),\n        headers: options.contentType ? {\n            \"Content-Type\": options.contentType\n        } : {},\n        query,\n        body\n    });\n}\nfunction optionsFromFile(opts, file) {\n    if (typeof File === \"undefined\" || !(file instanceof File)) {\n        return opts;\n    }\n    return Object.assign({\n        filename: opts.preserveFilename === false ? void 0 : file.name,\n        contentType: file.type\n    }, opts);\n}\nvar defaults = (obj, defaults)=>Object.keys(defaults).concat(Object.keys(obj)).reduce((target, prop)=>{\n        target[prop] = typeof obj[prop] === \"undefined\" ? defaults[prop] : obj[prop];\n        return target;\n    }, {});\nconst pick = (obj, props)=>props.reduce((selection, prop)=>{\n        if (typeof obj[prop] === \"undefined\") {\n            return selection;\n        }\n        selection[prop] = obj[prop];\n        return selection;\n    }, {});\nconst MAX_URL_LENGTH = 16e3 - 1200;\nconst possibleOptions = [\n    \"includePreviousRevision\",\n    \"includeResult\",\n    \"visibility\",\n    \"effectFormat\",\n    \"tag\"\n];\nconst defaultOptions = {\n    includeResult: true\n};\nfunction _listen(query, params) {\n    let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const { url, token, withCredentials, requestTagPrefix } = this.config();\n    const tag = opts.tag && requestTagPrefix ? [\n        requestTagPrefix,\n        opts.tag\n    ].join(\".\") : opts.tag;\n    const options = {\n        ...defaults(opts, defaultOptions),\n        tag\n    };\n    const listenOpts = pick(options, possibleOptions);\n    const qs = encodeQueryString({\n        query,\n        params,\n        options: {\n            tag,\n            ...listenOpts\n        }\n    });\n    const uri = \"\".concat(url).concat(_getDataUrl(this, \"listen\", qs));\n    if (uri.length > MAX_URL_LENGTH) {\n        return new rxjs.Observable((observer)=>observer.error(new Error(\"Query too large for listener\")));\n    }\n    const listenFor = options.events ? options.events : [\n        \"mutation\"\n    ];\n    const shouldEmitReconnect = listenFor.indexOf(\"reconnect\") !== -1;\n    const esOptions = {};\n    if (token || withCredentials) {\n        esOptions.withCredentials = true;\n    }\n    if (token) {\n        esOptions.headers = {\n            Authorization: \"Bearer \".concat(token)\n        };\n    }\n    return new rxjs.Observable((observer)=>{\n        let es;\n        getEventSource().then((eventSource)=>{\n            es = eventSource;\n        }).catch((reason)=>{\n            observer.error(reason);\n            stop();\n        });\n        let reconnectTimer;\n        let stopped = false;\n        function onError() {\n            if (stopped) {\n                return;\n            }\n            emitReconnect();\n            if (stopped) {\n                return;\n            }\n            if (es.readyState === es.CLOSED) {\n                unsubscribe();\n                clearTimeout(reconnectTimer);\n                reconnectTimer = setTimeout(open, 100);\n            }\n        }\n        function onChannelError(err) {\n            observer.error(cooerceError(err));\n        }\n        function onMessage(evt) {\n            const event = parseEvent(evt);\n            return event instanceof Error ? observer.error(event) : observer.next(event);\n        }\n        function onDisconnect() {\n            stopped = true;\n            unsubscribe();\n            observer.complete();\n        }\n        function unsubscribe() {\n            if (!es) return;\n            es.removeEventListener(\"error\", onError);\n            es.removeEventListener(\"channelError\", onChannelError);\n            es.removeEventListener(\"disconnect\", onDisconnect);\n            listenFor.forEach((type)=>es.removeEventListener(type, onMessage));\n            es.close();\n        }\n        function emitReconnect() {\n            if (shouldEmitReconnect) {\n                observer.next({\n                    type: \"reconnect\"\n                });\n            }\n        }\n        async function getEventSource() {\n            const { default: EventSource } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@sanity\"), __webpack_require__.e(\"vendor-chunks/eventsource\")]).then(__webpack_require__.t.bind(__webpack_require__, /*! @sanity/eventsource */ \"(ssr)/./node_modules/@sanity/eventsource/node.js\", 23));\n            const evs = new EventSource(uri, esOptions);\n            evs.addEventListener(\"error\", onError);\n            evs.addEventListener(\"channelError\", onChannelError);\n            evs.addEventListener(\"disconnect\", onDisconnect);\n            listenFor.forEach((type)=>evs.addEventListener(type, onMessage));\n            return evs;\n        }\n        function open() {\n            getEventSource().then((eventSource)=>{\n                es = eventSource;\n            }).catch((reason)=>{\n                observer.error(reason);\n                stop();\n            });\n        }\n        function stop() {\n            stopped = true;\n            unsubscribe();\n        }\n        return stop;\n    });\n}\nfunction parseEvent(event) {\n    try {\n        const data = event.data && JSON.parse(event.data) || {};\n        return Object.assign({\n            type: event.type\n        }, data);\n    } catch (err) {\n        return err;\n    }\n}\nfunction cooerceError(err) {\n    if (err instanceof Error) {\n        return err;\n    }\n    const evt = parseEvent(err);\n    return evt instanceof Error ? evt : new Error(extractErrorMessage(evt));\n}\nfunction extractErrorMessage(err) {\n    if (!err.error) {\n        return err.message || \"Unknown listener error\";\n    }\n    if (err.error.description) {\n        return err.error.description;\n    }\n    return typeof err.error === \"string\" ? err.error : JSON.stringify(err.error, null, 2);\n}\nvar __accessCheck$3 = (obj, member, msg)=>{\n    if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet$3 = (obj, member, getter)=>{\n    __accessCheck$3(obj, member, \"read from private field\");\n    return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd$3 = (obj, member, value)=>{\n    if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet$3 = (obj, member, value, setter)=>{\n    __accessCheck$3(obj, member, \"write to private field\");\n    setter ? setter.call(obj, value) : member.set(obj, value);\n    return value;\n};\nvar _client$2, _httpRequest$3, _client2$2, _httpRequest2$3;\nclass ObservableDatasetsClient {\n    constructor(client, httpRequest){\n        __privateAdd$3(this, _client$2, void 0);\n        __privateAdd$3(this, _httpRequest$3, void 0);\n        __privateSet$3(this, _client$2, client);\n        __privateSet$3(this, _httpRequest$3, httpRequest);\n    }\n    /**\n   * Create a new dataset with the given name\n   *\n   * @param name - Name of the dataset to create\n   * @param options - Options for the dataset\n   */ create(name, options) {\n        return _modify(__privateGet$3(this, _client$2), __privateGet$3(this, _httpRequest$3), \"PUT\", name, options);\n    }\n    /**\n   * Edit a dataset with the given name\n   *\n   * @param name - Name of the dataset to edit\n   * @param options - New options for the dataset\n   */ edit(name, options) {\n        return _modify(__privateGet$3(this, _client$2), __privateGet$3(this, _httpRequest$3), \"PATCH\", name, options);\n    }\n    /**\n   * Delete a dataset with the given name\n   *\n   * @param name - Name of the dataset to delete\n   */ delete(name) {\n        return _modify(__privateGet$3(this, _client$2), __privateGet$3(this, _httpRequest$3), \"DELETE\", name);\n    }\n    /**\n   * Fetch a list of datasets for the configured project\n   */ list() {\n        return _request(__privateGet$3(this, _client$2), __privateGet$3(this, _httpRequest$3), {\n            uri: \"/datasets\",\n            tag: null\n        });\n    }\n}\n_client$2 = new WeakMap();\n_httpRequest$3 = new WeakMap();\nclass DatasetsClient {\n    constructor(client, httpRequest){\n        __privateAdd$3(this, _client2$2, void 0);\n        __privateAdd$3(this, _httpRequest2$3, void 0);\n        __privateSet$3(this, _client2$2, client);\n        __privateSet$3(this, _httpRequest2$3, httpRequest);\n    }\n    /**\n   * Create a new dataset with the given name\n   *\n   * @param name - Name of the dataset to create\n   * @param options - Options for the dataset\n   */ create(name, options) {\n        return rxjs.lastValueFrom(_modify(__privateGet$3(this, _client2$2), __privateGet$3(this, _httpRequest2$3), \"PUT\", name, options));\n    }\n    /**\n   * Edit a dataset with the given name\n   *\n   * @param name - Name of the dataset to edit\n   * @param options - New options for the dataset\n   */ edit(name, options) {\n        return rxjs.lastValueFrom(_modify(__privateGet$3(this, _client2$2), __privateGet$3(this, _httpRequest2$3), \"PATCH\", name, options));\n    }\n    /**\n   * Delete a dataset with the given name\n   *\n   * @param name - Name of the dataset to delete\n   */ delete(name) {\n        return rxjs.lastValueFrom(_modify(__privateGet$3(this, _client2$2), __privateGet$3(this, _httpRequest2$3), \"DELETE\", name));\n    }\n    /**\n   * Fetch a list of datasets for the configured project\n   */ list() {\n        return rxjs.lastValueFrom(_request(__privateGet$3(this, _client2$2), __privateGet$3(this, _httpRequest2$3), {\n            uri: \"/datasets\",\n            tag: null\n        }));\n    }\n}\n_client2$2 = new WeakMap();\n_httpRequest2$3 = new WeakMap();\nfunction _modify(client, httpRequest, method, name, options) {\n    dataset(name);\n    return _request(client, httpRequest, {\n        method,\n        uri: \"/datasets/\".concat(name),\n        body: options,\n        tag: null\n    });\n}\nvar __accessCheck$2 = (obj, member, msg)=>{\n    if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet$2 = (obj, member, getter)=>{\n    __accessCheck$2(obj, member, \"read from private field\");\n    return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd$2 = (obj, member, value)=>{\n    if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet$2 = (obj, member, value, setter)=>{\n    __accessCheck$2(obj, member, \"write to private field\");\n    setter ? setter.call(obj, value) : member.set(obj, value);\n    return value;\n};\nvar _client$1, _httpRequest$2, _client2$1, _httpRequest2$2;\nclass ObservableProjectsClient {\n    constructor(client, httpRequest){\n        __privateAdd$2(this, _client$1, void 0);\n        __privateAdd$2(this, _httpRequest$2, void 0);\n        __privateSet$2(this, _client$1, client);\n        __privateSet$2(this, _httpRequest$2, httpRequest);\n    }\n    list(options) {\n        const uri = (options == null ? void 0 : options.includeMembers) === false ? \"/projects?includeMembers=false\" : \"/projects\";\n        return _request(__privateGet$2(this, _client$1), __privateGet$2(this, _httpRequest$2), {\n            uri\n        });\n    }\n    /**\n   * Fetch a project by project ID\n   *\n   * @param projectId - ID of the project to fetch\n   */ getById(projectId) {\n        return _request(__privateGet$2(this, _client$1), __privateGet$2(this, _httpRequest$2), {\n            uri: \"/projects/\".concat(projectId)\n        });\n    }\n}\n_client$1 = new WeakMap();\n_httpRequest$2 = new WeakMap();\nclass ProjectsClient {\n    constructor(client, httpRequest){\n        __privateAdd$2(this, _client2$1, void 0);\n        __privateAdd$2(this, _httpRequest2$2, void 0);\n        __privateSet$2(this, _client2$1, client);\n        __privateSet$2(this, _httpRequest2$2, httpRequest);\n    }\n    list(options) {\n        const uri = (options == null ? void 0 : options.includeMembers) === false ? \"/projects?includeMembers=false\" : \"/projects\";\n        return rxjs.lastValueFrom(_request(__privateGet$2(this, _client2$1), __privateGet$2(this, _httpRequest2$2), {\n            uri\n        }));\n    }\n    /**\n   * Fetch a project by project ID\n   *\n   * @param projectId - ID of the project to fetch\n   */ getById(projectId) {\n        return rxjs.lastValueFrom(_request(__privateGet$2(this, _client2$1), __privateGet$2(this, _httpRequest2$2), {\n            uri: \"/projects/\".concat(projectId)\n        }));\n    }\n}\n_client2$1 = new WeakMap();\n_httpRequest2$2 = new WeakMap();\nvar __accessCheck$1 = (obj, member, msg)=>{\n    if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet$1 = (obj, member, getter)=>{\n    __accessCheck$1(obj, member, \"read from private field\");\n    return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd$1 = (obj, member, value)=>{\n    if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet$1 = (obj, member, value, setter)=>{\n    __accessCheck$1(obj, member, \"write to private field\");\n    setter ? setter.call(obj, value) : member.set(obj, value);\n    return value;\n};\nvar _client, _httpRequest$1, _client2, _httpRequest2$1;\nclass ObservableUsersClient {\n    constructor(client, httpRequest){\n        __privateAdd$1(this, _client, void 0);\n        __privateAdd$1(this, _httpRequest$1, void 0);\n        __privateSet$1(this, _client, client);\n        __privateSet$1(this, _httpRequest$1, httpRequest);\n    }\n    /**\n   * Fetch a user by user ID\n   *\n   * @param id - User ID of the user to fetch. If `me` is provided, a minimal response including the users role is returned.\n   */ getById(id) {\n        return _request(__privateGet$1(this, _client), __privateGet$1(this, _httpRequest$1), {\n            uri: \"/users/\".concat(id)\n        });\n    }\n}\n_client = new WeakMap();\n_httpRequest$1 = new WeakMap();\nclass UsersClient {\n    constructor(client, httpRequest){\n        __privateAdd$1(this, _client2, void 0);\n        __privateAdd$1(this, _httpRequest2$1, void 0);\n        __privateSet$1(this, _client2, client);\n        __privateSet$1(this, _httpRequest2$1, httpRequest);\n    }\n    /**\n   * Fetch a user by user ID\n   *\n   * @param id - User ID of the user to fetch. If `me` is provided, a minimal response including the users role is returned.\n   */ getById(id) {\n        return rxjs.lastValueFrom(_request(__privateGet$1(this, _client2), __privateGet$1(this, _httpRequest2$1), {\n            uri: \"/users/\".concat(id)\n        }));\n    }\n}\n_client2 = new WeakMap();\n_httpRequest2$1 = new WeakMap();\nvar __accessCheck = (obj, member, msg)=>{\n    if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter)=>{\n    __accessCheck(obj, member, \"read from private field\");\n    return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value)=>{\n    if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter)=>{\n    __accessCheck(obj, member, \"write to private field\");\n    setter ? setter.call(obj, value) : member.set(obj, value);\n    return value;\n};\nvar _clientConfig, _httpRequest, _clientConfig2, _httpRequest2;\nconst _ObservableSanityClient = class _ObservableSanityClient {\n    constructor(httpRequest){\n        let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultConfig;\n        /**\n     * Private properties\n     */ __privateAdd(this, _clientConfig, void 0);\n        __privateAdd(this, _httpRequest, void 0);\n        /**\n     * Instance properties\n     */ this.listen = _listen;\n        this.config(config);\n        __privateSet(this, _httpRequest, httpRequest);\n        this.assets = new ObservableAssetsClient(this, __privateGet(this, _httpRequest));\n        this.datasets = new ObservableDatasetsClient(this, __privateGet(this, _httpRequest));\n        this.projects = new ObservableProjectsClient(this, __privateGet(this, _httpRequest));\n        this.users = new ObservableUsersClient(this, __privateGet(this, _httpRequest));\n    }\n    /**\n   * Clone the client - returns a new instance\n   */ clone() {\n        return new _ObservableSanityClient(__privateGet(this, _httpRequest), this.config());\n    }\n    config(newConfig) {\n        if (newConfig === void 0) {\n            return {\n                ...__privateGet(this, _clientConfig)\n            };\n        }\n        if (__privateGet(this, _clientConfig) && __privateGet(this, _clientConfig).allowReconfigure === false) {\n            throw new Error(\"Existing client instance cannot be reconfigured - use `withConfig(newConfig)` to return a new client\");\n        }\n        __privateSet(this, _clientConfig, initConfig(newConfig, __privateGet(this, _clientConfig) || {}));\n        return this;\n    }\n    /**\n   * Clone the client with a new (partial) configuration.\n   *\n   * @param newConfig - New client configuration properties, shallowly merged with existing configuration\n   */ withConfig(newConfig) {\n        return new _ObservableSanityClient(__privateGet(this, _httpRequest), {\n            ...this.config(),\n            ...newConfig\n        });\n    }\n    fetch(query, params) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        return _fetch(this, __privateGet(this, _httpRequest), query, params, options);\n    }\n    /**\n   * Fetch a single document with the given ID.\n   *\n   * @param id - Document ID to fetch\n   * @param options - Request options\n   */ getDocument(id, options) {\n        return _getDocument(this, __privateGet(this, _httpRequest), id, options);\n    }\n    /**\n   * Fetch multiple documents in one request.\n   * Should be used sparingly - performing a query is usually a better option.\n   * The order/position of documents is preserved based on the original array of IDs.\n   * If any of the documents are missing, they will be replaced by a `null` entry in the returned array\n   *\n   * @param ids - Document IDs to fetch\n   * @param options - Request options\n   */ getDocuments(ids, options) {\n        return _getDocuments(this, __privateGet(this, _httpRequest), ids, options);\n    }\n    create(document, options) {\n        return _create(this, __privateGet(this, _httpRequest), document, \"create\", options);\n    }\n    createIfNotExists(document, options) {\n        return _createIfNotExists(this, __privateGet(this, _httpRequest), document, options);\n    }\n    createOrReplace(document, options) {\n        return _createOrReplace(this, __privateGet(this, _httpRequest), document, options);\n    }\n    delete(selection, options) {\n        return _delete(this, __privateGet(this, _httpRequest), selection, options);\n    }\n    mutate(operations, options) {\n        return _mutate(this, __privateGet(this, _httpRequest), operations, options);\n    }\n    /**\n   * Create a new buildable patch of operations to perform\n   *\n   * @param selection - Document ID, an array of document IDs, or an object with `query` and optional `params`, defining which document(s) to patch\n   * @param operations - Optional object of patch operations to initialize the patch instance with\n   * @returns Patch instance - call `.commit()` to perform the operations defined\n   */ patch(selection, operations) {\n        return new ObservablePatch(selection, operations, this);\n    }\n    /**\n   * Create a new transaction of mutations\n   *\n   * @param operations - Optional array of mutation operations to initialize the transaction instance with\n   */ transaction(operations) {\n        return new ObservableTransaction(operations, this);\n    }\n    /**\n   * Perform an HTTP request against the Sanity API\n   *\n   * @param options - Request options\n   */ request(options) {\n        return _request(this, __privateGet(this, _httpRequest), options);\n    }\n    /**\n   * Get a Sanity API URL for the URI provided\n   *\n   * @param uri - URI/path to build URL for\n   * @param canUseCdn - Whether or not to allow using the API CDN for this route\n   */ getUrl(uri, canUseCdn) {\n        return _getUrl(this, uri, canUseCdn);\n    }\n    /**\n   * Get a Sanity API URL for the data operation and path provided\n   *\n   * @param operation - Data operation (eg `query`, `mutate`, `listen` or similar)\n   * @param path - Path to append after the operation\n   */ getDataUrl(operation, path) {\n        return _getDataUrl(this, operation, path);\n    }\n};\n_clientConfig = new WeakMap();\n_httpRequest = new WeakMap();\nlet ObservableSanityClient = _ObservableSanityClient;\nconst _SanityClient = class _SanityClient {\n    constructor(httpRequest){\n        let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultConfig;\n        /**\n     * Private properties\n     */ __privateAdd(this, _clientConfig2, void 0);\n        __privateAdd(this, _httpRequest2, void 0);\n        /**\n     * Instance properties\n     */ this.listen = _listen;\n        this.config(config);\n        __privateSet(this, _httpRequest2, httpRequest);\n        this.assets = new AssetsClient(this, __privateGet(this, _httpRequest2));\n        this.datasets = new DatasetsClient(this, __privateGet(this, _httpRequest2));\n        this.projects = new ProjectsClient(this, __privateGet(this, _httpRequest2));\n        this.users = new UsersClient(this, __privateGet(this, _httpRequest2));\n        this.observable = new ObservableSanityClient(httpRequest, config);\n    }\n    /**\n   * Clone the client - returns a new instance\n   */ clone() {\n        return new _SanityClient(__privateGet(this, _httpRequest2), this.config());\n    }\n    config(newConfig) {\n        if (newConfig === void 0) {\n            return {\n                ...__privateGet(this, _clientConfig2)\n            };\n        }\n        if (__privateGet(this, _clientConfig2) && __privateGet(this, _clientConfig2).allowReconfigure === false) {\n            throw new Error(\"Existing client instance cannot be reconfigured - use `withConfig(newConfig)` to return a new client\");\n        }\n        if (this.observable) {\n            this.observable.config(newConfig);\n        }\n        __privateSet(this, _clientConfig2, initConfig(newConfig, __privateGet(this, _clientConfig2) || {}));\n        return this;\n    }\n    /**\n   * Clone the client with a new (partial) configuration.\n   *\n   * @param newConfig - New client configuration properties, shallowly merged with existing configuration\n   */ withConfig(newConfig) {\n        return new _SanityClient(__privateGet(this, _httpRequest2), {\n            ...this.config(),\n            ...newConfig\n        });\n    }\n    fetch(query, params) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        return rxjs.lastValueFrom(_fetch(this, __privateGet(this, _httpRequest2), query, params, options));\n    }\n    /**\n   * Fetch a single document with the given ID.\n   *\n   * @param id - Document ID to fetch\n   * @param options - Request options\n   */ getDocument(id, options) {\n        return rxjs.lastValueFrom(_getDocument(this, __privateGet(this, _httpRequest2), id, options));\n    }\n    /**\n   * Fetch multiple documents in one request.\n   * Should be used sparingly - performing a query is usually a better option.\n   * The order/position of documents is preserved based on the original array of IDs.\n   * If any of the documents are missing, they will be replaced by a `null` entry in the returned array\n   *\n   * @param ids - Document IDs to fetch\n   * @param options - Request options\n   */ getDocuments(ids, options) {\n        return rxjs.lastValueFrom(_getDocuments(this, __privateGet(this, _httpRequest2), ids, options));\n    }\n    create(document, options) {\n        return rxjs.lastValueFrom(_create(this, __privateGet(this, _httpRequest2), document, \"create\", options));\n    }\n    createIfNotExists(document, options) {\n        return rxjs.lastValueFrom(_createIfNotExists(this, __privateGet(this, _httpRequest2), document, options));\n    }\n    createOrReplace(document, options) {\n        return rxjs.lastValueFrom(_createOrReplace(this, __privateGet(this, _httpRequest2), document, options));\n    }\n    delete(selection, options) {\n        return rxjs.lastValueFrom(_delete(this, __privateGet(this, _httpRequest2), selection, options));\n    }\n    mutate(operations, options) {\n        return rxjs.lastValueFrom(_mutate(this, __privateGet(this, _httpRequest2), operations, options));\n    }\n    /**\n   * Create a new buildable patch of operations to perform\n   *\n   * @param selection - Document ID, an array of document IDs, or an object with `query` and optional `params`, defining which document(s) to patch\n   * @param operations - Optional object of patch operations to initialize the patch instance with\n   * @returns Patch instance - call `.commit()` to perform the operations defined\n   */ patch(documentId, operations) {\n        return new Patch(documentId, operations, this);\n    }\n    /**\n   * Create a new transaction of mutations\n   *\n   * @param operations - Optional array of mutation operations to initialize the transaction instance with\n   */ transaction(operations) {\n        return new Transaction(operations, this);\n    }\n    /**\n   * Perform a request against the Sanity API\n   * NOTE: Only use this for Sanity API endpoints, not for your own APIs!\n   *\n   * @param options - Request options\n   * @returns Promise resolving to the response body\n   */ request(options) {\n        return rxjs.lastValueFrom(_request(this, __privateGet(this, _httpRequest2), options));\n    }\n    /**\n   * Perform an HTTP request a `/data` sub-endpoint\n   * NOTE: Considered internal, thus marked as deprecated. Use `request` instead.\n   *\n   * @deprecated - Use `request()` or your own HTTP library instead\n   * @param endpoint - Endpoint to hit (mutate, query etc)\n   * @param body - Request body\n   * @param options - Request options\n   * @internal\n   */ dataRequest(endpoint, body, options) {\n        return rxjs.lastValueFrom(_dataRequest(this, __privateGet(this, _httpRequest2), endpoint, body, options));\n    }\n    /**\n   * Get a Sanity API URL for the URI provided\n   *\n   * @param uri - URI/path to build URL for\n   * @param canUseCdn - Whether or not to allow using the API CDN for this route\n   */ getUrl(uri, canUseCdn) {\n        return _getUrl(this, uri, canUseCdn);\n    }\n    /**\n   * Get a Sanity API URL for the data operation and path provided\n   *\n   * @param operation - Data operation (eg `query`, `mutate`, `listen` or similar)\n   * @param path - Path to append after the operation\n   */ getDataUrl(operation, path) {\n        return _getDataUrl(this, operation, path);\n    }\n};\n_clientConfig2 = new WeakMap();\n_httpRequest2 = new WeakMap();\nlet SanityClient = _SanityClient;\nfunction defineCreateClientExports(envMiddleware, ClassConstructor) {\n    const httpRequest = defineHttpRequest(envMiddleware, {});\n    const requester = httpRequest.defaultRequester;\n    const createClient = (config)=>new ClassConstructor(defineHttpRequest(envMiddleware, {\n            maxRetries: config.maxRetries,\n            retryDelay: config.retryDelay\n        }), config);\n    return {\n        requester,\n        createClient\n    };\n}\nvar name = \"@sanity/client\";\nvar version = \"6.10.0\";\nconst middleware = [\n    middleware$1.debug({\n        verbose: true,\n        namespace: \"sanity:client\"\n    }),\n    middleware$1.headers({\n        \"User-Agent\": \"\".concat(name, \" \").concat(version)\n    }),\n    // Enable keep-alive, and in addition limit the number of sockets that can be opened.\n    // This avoids opening too many connections to the server if someone tries to execute\n    // a bunch of requests in parallel. It's recommended to have a concurrency limit\n    // at a \"higher limit\" (i.e. you shouldn't actually execute hundreds of requests in parallel),\n    // and this is mainly to minimize the impact for the network and server.\n    //\n    // We're currently matching the same defaults as browsers:\n    // https://stackoverflow.com/questions/26003756/is-there-a-limit-practical-or-otherwise-to-the-number-of-web-sockets-a-page-op\n    middleware$1.agent({\n        keepAlive: true,\n        maxSockets: 30,\n        maxTotalSockets: 256\n    })\n];\nexports.BasePatch = BasePatch;\nexports.BaseTransaction = BaseTransaction;\nexports.ClientError = ClientError;\nexports.ObservablePatch = ObservablePatch;\nexports.ObservableSanityClient = ObservableSanityClient;\nexports.ObservableTransaction = ObservableTransaction;\nexports.Patch = Patch;\nexports.SanityClient = SanityClient;\nexports.ServerError = ServerError;\nexports.Transaction = Transaction;\nexports.defaultConfig = defaultConfig;\nexports.defineCreateClientExports = defineCreateClientExports;\nexports.middleware = middleware;\nexports.printNoDefaultExport = printNoDefaultExport; //# sourceMappingURL=nodeMiddleware-1l7OW-D5.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sanity/client/dist/_chunks/nodeMiddleware-1l7OW-D5.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sanity/client/dist/_chunks/resolveEditInfo-v_7g85GR.cjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/@sanity/client/dist/_chunks/resolveEditInfo-v_7g85GR.cjs ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nconst rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\nconst reKeySegment = /_key\\s*==\\s*['\"](.*)['\"]/;\nconst reIndexTuple = /^\\d*:\\d*$/;\nfunction isIndexSegment(segment) {\n    return typeof segment === \"number\" || typeof segment === \"string\" && /^\\[\\d+\\]$/.test(segment);\n}\nfunction isKeySegment(segment) {\n    if (typeof segment === \"string\") {\n        return reKeySegment.test(segment.trim());\n    }\n    return typeof segment === \"object\" && \"_key\" in segment;\n}\nfunction isIndexTuple(segment) {\n    if (typeof segment === \"string\" && reIndexTuple.test(segment)) {\n        return true;\n    }\n    if (!Array.isArray(segment) || segment.length !== 2) {\n        return false;\n    }\n    const [from, to] = segment;\n    return (typeof from === \"number\" || from === \"\") && (typeof to === \"number\" || to === \"\");\n}\nfunction get(obj, path, defaultVal) {\n    const select = typeof path === \"string\" ? fromString(path) : path;\n    if (!Array.isArray(select)) {\n        throw new Error(\"Path must be an array or a string\");\n    }\n    let acc = obj;\n    for(let i = 0; i < select.length; i++){\n        const segment = select[i];\n        if (isIndexSegment(segment)) {\n            if (!Array.isArray(acc)) {\n                return defaultVal;\n            }\n            acc = acc[segment];\n        }\n        if (isKeySegment(segment)) {\n            if (!Array.isArray(acc)) {\n                return defaultVal;\n            }\n            acc = acc.find((item)=>item._key === segment._key);\n        }\n        if (typeof segment === \"string\") {\n            acc = typeof acc === \"object\" && acc !== null ? acc[segment] : void 0;\n        }\n        if (typeof acc === \"undefined\") {\n            return defaultVal;\n        }\n    }\n    return acc;\n}\nfunction toString(path) {\n    if (!Array.isArray(path)) {\n        throw new Error(\"Path is not an array\");\n    }\n    return path.reduce((target, segment, i)=>{\n        const segmentType = typeof segment;\n        if (segmentType === \"number\") {\n            return \"\".concat(target, \"[\").concat(segment, \"]\");\n        }\n        if (segmentType === \"string\") {\n            const separator = i === 0 ? \"\" : \".\";\n            return \"\".concat(target).concat(separator).concat(segment);\n        }\n        if (isKeySegment(segment) && segment._key) {\n            return \"\".concat(target, '[_key==\"').concat(segment._key, '\"]');\n        }\n        if (Array.isArray(segment)) {\n            const [from, to] = segment;\n            return \"\".concat(target, \"[\").concat(from, \":\").concat(to, \"]\");\n        }\n        throw new Error(\"Unsupported path segment `\".concat(JSON.stringify(segment), \"`\"));\n    }, \"\");\n}\nfunction fromString(path) {\n    if (typeof path !== \"string\") {\n        throw new Error(\"Path is not a string\");\n    }\n    const segments = path.match(rePropName);\n    if (!segments) {\n        throw new Error(\"Invalid path string\");\n    }\n    return segments.map(parsePathSegment);\n}\nfunction parsePathSegment(segment) {\n    if (isIndexSegment(segment)) {\n        return parseIndexSegment(segment);\n    }\n    if (isKeySegment(segment)) {\n        return parseKeySegment(segment);\n    }\n    if (isIndexTuple(segment)) {\n        return parseIndexTupleSegment(segment);\n    }\n    return segment;\n}\nfunction parseIndexSegment(segment) {\n    return Number(segment.replace(/[^\\d]/g, \"\"));\n}\nfunction parseKeySegment(segment) {\n    const segments = segment.match(reKeySegment);\n    return {\n        _key: segments[1]\n    };\n}\nfunction parseIndexTupleSegment(segment) {\n    const [from, to] = segment.split(\":\").map((seg)=>seg === \"\" ? seg : Number(seg));\n    return [\n        from,\n        to\n    ];\n}\nvar studioPath = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    fromString: fromString,\n    get: get,\n    isIndexSegment: isIndexSegment,\n    isIndexTuple: isIndexTuple,\n    isKeySegment: isKeySegment,\n    reKeySegment: reKeySegment,\n    toString: toString\n});\nconst ESCAPE = {\n    \"\\f\": \"\\\\f\",\n    \"\\n\": \"\\\\n\",\n    \"\\r\": \"\\\\r\",\n    \"\t\": \"\\\\t\",\n    \"'\": \"\\\\'\",\n    \"\\\\\": \"\\\\\\\\\"\n};\nconst UNESCAPE = {\n    \"\\\\f\": \"\\f\",\n    \"\\\\n\": \"\\n\",\n    \"\\\\r\": \"\\r\",\n    \"\\\\t\": \"\t\",\n    \"\\\\'\": \"'\",\n    \"\\\\\\\\\": \"\\\\\"\n};\nfunction jsonPath(path) {\n    return \"$\".concat(path.map((segment)=>{\n        if (typeof segment === \"string\") {\n            const escapedKey = segment.replace(/[\\f\\n\\r\\t'\\\\]/g, (match)=>{\n                return ESCAPE[match];\n            });\n            return \"['\".concat(escapedKey, \"']\");\n        }\n        if (typeof segment === \"number\") {\n            return \"[\".concat(segment, \"]\");\n        }\n        if (segment._key !== \"\") {\n            const escapedKey = segment._key.replace(/['\\\\]/g, (match)=>{\n                return ESCAPE[match];\n            });\n            return \"[?(@._key=='\".concat(escapedKey, \"')]\");\n        }\n        return \"[\".concat(segment._index, \"]\");\n    }).join(\"\"));\n}\nfunction parseJsonPath(path) {\n    const parsed = [];\n    const parseRe = /\\['(.*?)'\\]|\\[(\\d+)\\]|\\[\\?\\(@\\._key=='(.*?)'\\)\\]/g;\n    let match;\n    while((match = parseRe.exec(path)) !== null){\n        if (match[1] !== void 0) {\n            const key = match[1].replace(/\\\\(\\\\|f|n|r|t|')/g, (m)=>{\n                return UNESCAPE[m];\n            });\n            parsed.push(key);\n            continue;\n        }\n        if (match[2] !== void 0) {\n            parsed.push(parseInt(match[2], 10));\n            continue;\n        }\n        if (match[3] !== void 0) {\n            const _key = match[3].replace(/\\\\(\\\\')/g, (m)=>{\n                return UNESCAPE[m];\n            });\n            parsed.push({\n                _key,\n                _index: -1\n            });\n            continue;\n        }\n    }\n    return parsed;\n}\nfunction jsonPathToStudioPath(path) {\n    return path.map((segment)=>{\n        if (typeof segment === \"string\") {\n            return segment;\n        }\n        if (typeof segment === \"number\") {\n            return segment;\n        }\n        if (segment._key !== \"\") {\n            return {\n                _key: segment._key\n            };\n        }\n        if (segment._index !== -1) {\n            return segment._index;\n        }\n        throw new Error(\"invalid segment:\".concat(JSON.stringify(segment)));\n    });\n}\nfunction studioPathToJsonPath(path) {\n    const parsedPath = typeof path === \"string\" ? fromString(path) : path;\n    return parsedPath.map((segment)=>{\n        if (typeof segment === \"string\") {\n            return segment;\n        }\n        if (typeof segment === \"number\") {\n            return segment;\n        }\n        if (Array.isArray(segment)) {\n            throw new Error(\"IndexTuple segments aren't supported:\".concat(JSON.stringify(segment)));\n        }\n        if (isContentSourceMapParsedPathKeyedSegment(segment)) {\n            return segment;\n        }\n        if (segment._key) {\n            return {\n                _key: segment._key,\n                _index: -1\n            };\n        }\n        throw new Error(\"invalid segment:\".concat(JSON.stringify(segment)));\n    });\n}\nfunction isContentSourceMapParsedPathKeyedSegment(segment) {\n    return typeof segment === \"object\" && \"_key\" in segment && \"_index\" in segment;\n}\nfunction jsonPathToMappingPath(path) {\n    return path.map((segment)=>{\n        if (typeof segment === \"string\") {\n            return segment;\n        }\n        if (typeof segment === \"number\") {\n            return segment;\n        }\n        if (segment._index !== -1) {\n            return segment._index;\n        }\n        throw new Error(\"invalid segment:\".concat(JSON.stringify(segment)));\n    });\n}\nfunction resolveMapping(resultPath, csm) {\n    if (!(csm == null ? void 0 : csm.mappings)) {\n        return void 0;\n    }\n    const resultMappingPath = jsonPath(jsonPathToMappingPath(resultPath));\n    if (csm.mappings[resultMappingPath] !== void 0) {\n        return {\n            mapping: csm.mappings[resultMappingPath],\n            matchedPath: resultMappingPath,\n            pathSuffix: \"\"\n        };\n    }\n    const mappings = Object.entries(csm.mappings).filter((_ref)=>{\n        let [key] = _ref;\n        return resultMappingPath.startsWith(key);\n    }).sort((_ref2, _ref3)=>{\n        let [key1] = _ref2;\n        let [key2] = _ref3;\n        return key2.length - key1.length;\n    });\n    if (mappings.length == 0) {\n        return void 0;\n    }\n    const [matchedPath, mapping] = mappings[0];\n    const pathSuffix = resultMappingPath.substring(matchedPath.length);\n    return {\n        mapping,\n        matchedPath,\n        pathSuffix\n    };\n}\nfunction isArray(value) {\n    return value !== null && Array.isArray(value);\n}\nfunction isRecord(value) {\n    return typeof value === \"object\" && value !== null;\n}\nfunction walkMap(value, mappingFn) {\n    let path = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    if (isArray(value)) {\n        return value.map((v, idx)=>{\n            if (isRecord(v)) {\n                const _key = v[\"_key\"];\n                if (typeof _key === \"string\") {\n                    return walkMap(v, mappingFn, path.concat({\n                        _key,\n                        _index: idx\n                    }));\n                }\n            }\n            return walkMap(v, mappingFn, path.concat(idx));\n        });\n    }\n    if (isRecord(value)) {\n        return Object.fromEntries(Object.entries(value).map((_ref4)=>{\n            let [k, v] = _ref4;\n            return [\n                k,\n                walkMap(v, mappingFn, path.concat(k))\n            ];\n        }));\n    }\n    return mappingFn(value, path);\n}\nconst DRAFTS_PREFIX = \"drafts.\";\nfunction getPublishedId(id) {\n    if (id.startsWith(DRAFTS_PREFIX)) {\n        return id.slice(DRAFTS_PREFIX.length);\n    }\n    return id;\n}\nfunction createEditUrl(options) {\n    const { baseUrl, workspace: _workspace = \"default\", tool: _tool = \"default\", id: _id, type, path } = options;\n    if (!baseUrl) {\n        throw new Error(\"baseUrl is required\");\n    }\n    if (!path) {\n        throw new Error(\"path is required\");\n    }\n    if (!_id) {\n        throw new Error(\"id is required\");\n    }\n    if (baseUrl !== \"/\" && baseUrl.endsWith(\"/\")) {\n        throw new Error(\"baseUrl must not end with a slash\");\n    }\n    const workspace = _workspace === \"default\" ? void 0 : _workspace;\n    const tool = _tool === \"default\" ? void 0 : _tool;\n    const id = getPublishedId(_id);\n    const stringifiedPath = Array.isArray(path) ? toString(jsonPathToStudioPath(path)) : path;\n    const searchParams = new URLSearchParams({\n        baseUrl,\n        id,\n        type,\n        path: stringifiedPath\n    });\n    if (workspace) {\n        searchParams.set(\"workspace\", workspace);\n    }\n    if (tool) {\n        searchParams.set(\"tool\", tool);\n    }\n    const segments = [\n        baseUrl === \"/\" ? \"\" : baseUrl\n    ];\n    if (workspace) {\n        segments.push(workspace);\n    }\n    const routerParams = [\n        \"mode=presentation\",\n        \"id=\".concat(id),\n        \"type=\".concat(type),\n        \"path=\".concat(encodeURIComponent(stringifiedPath))\n    ];\n    if (tool) {\n        routerParams.push(\"tool=\".concat(tool));\n    }\n    segments.push(\"intent\", \"edit\", \"\".concat(routerParams.join(\";\"), \"?\").concat(searchParams));\n    return segments.join(\"/\");\n}\nfunction resolveEditInfo(options) {\n    const { resultSourceMap: csm, resultPath } = options;\n    const { mapping, pathSuffix } = resolveMapping(resultPath, csm) || {};\n    if (!mapping) {\n        return void 0;\n    }\n    if (mapping.source.type === \"literal\") {\n        return void 0;\n    }\n    if (mapping.source.type === \"unknown\") {\n        return void 0;\n    }\n    const sourceDoc = csm.documents[mapping.source.document];\n    const sourcePath = csm.paths[mapping.source.path];\n    if (sourceDoc && sourcePath) {\n        const { baseUrl, workspace, tool } = resolveStudioBaseRoute(typeof options.studioUrl === \"function\" ? options.studioUrl(sourceDoc) : options.studioUrl);\n        if (!baseUrl) return void 0;\n        const { _id, _type } = sourceDoc;\n        return {\n            baseUrl,\n            workspace,\n            tool,\n            id: _id,\n            type: _type,\n            path: parseJsonPath(sourcePath + pathSuffix)\n        };\n    }\n    return void 0;\n}\nfunction resolveStudioBaseRoute(studioUrl) {\n    let baseUrl = typeof studioUrl === \"string\" ? studioUrl : studioUrl.baseUrl;\n    if (baseUrl !== \"/\") {\n        baseUrl = baseUrl.replace(/\\/$/, \"\");\n    }\n    if (typeof studioUrl === \"string\") {\n        return {\n            baseUrl\n        };\n    }\n    return {\n        ...studioUrl,\n        baseUrl\n    };\n}\nexports.createEditUrl = createEditUrl;\nexports.get = get;\nexports.getPublishedId = getPublishedId;\nexports.jsonPath = jsonPath;\nexports.jsonPathToStudioPath = jsonPathToStudioPath;\nexports.parseJsonPath = parseJsonPath;\nexports.reKeySegment = reKeySegment;\nexports.resolveEditInfo = resolveEditInfo;\nexports.resolveMapping = resolveMapping;\nexports.resolveStudioBaseRoute = resolveStudioBaseRoute;\nexports.studioPath = studioPath;\nexports.studioPathToJsonPath = studioPathToJsonPath;\nexports.toString = toString;\nexports.walkMap = walkMap; //# sourceMappingURL=resolveEditInfo-v_7g85GR.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sanity/client/dist/_chunks/resolveEditInfo-v_7g85GR.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sanity/client/dist/index.cjs":
/*!****************************************************!*\
  !*** ./node_modules/@sanity/client/dist/index.cjs ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar nodeMiddleware = __webpack_require__(/*! ./_chunks/nodeMiddleware-1l7OW-D5.cjs */ \"(ssr)/./node_modules/@sanity/client/dist/_chunks/nodeMiddleware-1l7OW-D5.cjs\");\nvar getIt = __webpack_require__(/*! get-it */ \"(ssr)/./node_modules/get-it/dist/index.cjs\");\nfunction defineDeprecatedCreateClient(createClient) {\n    return function deprecatedCreateClient(config) {\n        nodeMiddleware.printNoDefaultExport();\n        return createClient(config);\n    };\n}\nconst exp = nodeMiddleware.defineCreateClientExports(nodeMiddleware.middleware, nodeMiddleware.SanityClient);\nconst requester = exp.requester;\nconst createClient = exp.createClient;\nconst deprecatedCreateClient = defineDeprecatedCreateClient(createClient);\nexports.BasePatch = nodeMiddleware.BasePatch;\nexports.BaseTransaction = nodeMiddleware.BaseTransaction;\nexports.ClientError = nodeMiddleware.ClientError;\nexports.ObservablePatch = nodeMiddleware.ObservablePatch;\nexports.ObservableSanityClient = nodeMiddleware.ObservableSanityClient;\nexports.ObservableTransaction = nodeMiddleware.ObservableTransaction;\nexports.Patch = nodeMiddleware.Patch;\nexports.SanityClient = nodeMiddleware.SanityClient;\nexports.ServerError = nodeMiddleware.ServerError;\nexports.Transaction = nodeMiddleware.Transaction;\nObject.defineProperty(exports, \"unstable__adapter\", ({\n    enumerable: true,\n    get: function() {\n        return getIt.adapter;\n    }\n}));\nObject.defineProperty(exports, \"unstable__environment\", ({\n    enumerable: true,\n    get: function() {\n        return getIt.environment;\n    }\n}));\nexports.createClient = createClient;\nexports[\"default\"] = deprecatedCreateClient;\nexports.requester = requester; //# sourceMappingURL=index.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNhbml0eS9jbGllbnQvZGlzdC9pbmRleC5janMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQUEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0YsSUFBSUMsaUJBQWlCQyxtQkFBT0EsQ0FBQztBQUM3QixJQUFJQyxRQUFRRCxtQkFBT0EsQ0FBQztBQUNwQixTQUFTRSw2QkFBNkJDLFlBQVk7SUFDaEQsT0FBTyxTQUFTQyx1QkFBdUJDLE1BQU07UUFDM0NOLGVBQWVPLG9CQUFvQjtRQUNuQyxPQUFPSCxhQUFhRTtJQUN0QjtBQUNGO0FBQ0EsTUFBTUUsTUFBTVIsZUFBZVMseUJBQXlCLENBQUNULGVBQWVVLFVBQVUsRUFBRVYsZUFBZVcsWUFBWTtBQUMzRyxNQUFNQyxZQUFZSixJQUFJSSxTQUFTO0FBQy9CLE1BQU1SLGVBQWVJLElBQUlKLFlBQVk7QUFDckMsTUFBTUMseUJBQXlCRiw2QkFBNkJDO0FBQzVETixpQkFBaUIsR0FBR0UsZUFBZWEsU0FBUztBQUM1Q2YsdUJBQXVCLEdBQUdFLGVBQWVjLGVBQWU7QUFDeERoQixtQkFBbUIsR0FBR0UsZUFBZWUsV0FBVztBQUNoRGpCLHVCQUF1QixHQUFHRSxlQUFlZ0IsZUFBZTtBQUN4RGxCLDhCQUE4QixHQUFHRSxlQUFlaUIsc0JBQXNCO0FBQ3RFbkIsNkJBQTZCLEdBQUdFLGVBQWVrQixxQkFBcUI7QUFDcEVwQixhQUFhLEdBQUdFLGVBQWVtQixLQUFLO0FBQ3BDckIsb0JBQW9CLEdBQUdFLGVBQWVXLFlBQVk7QUFDbERiLG1CQUFtQixHQUFHRSxlQUFlb0IsV0FBVztBQUNoRHRCLG1CQUFtQixHQUFHRSxlQUFlcUIsV0FBVztBQUNoRHpCLHFEQUFvRDtJQUNsRDBCLFlBQVk7SUFDWkMsS0FBSztRQUNILE9BQU9yQixNQUFNc0IsT0FBTztJQUN0QjtBQUNGLENBQUMsRUFBQztBQUNGNUIseURBQXdEO0lBQ3REMEIsWUFBWTtJQUNaQyxLQUFLO1FBQ0gsT0FBT3JCLE1BQU11QixXQUFXO0lBQzFCO0FBQ0YsQ0FBQyxFQUFDO0FBQ0YzQixvQkFBb0IsR0FBR007QUFDdkJOLGtCQUFlLEdBQUdPO0FBQ2xCUCxpQkFBaUIsR0FBR2MsV0FDcEIsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmlrZS8uL25vZGVfbW9kdWxlcy9Ac2FuaXR5L2NsaWVudC9kaXN0L2luZGV4LmNqcz8xYjQ0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG52YXIgbm9kZU1pZGRsZXdhcmUgPSByZXF1aXJlKCcuL19jaHVua3Mvbm9kZU1pZGRsZXdhcmUtMWw3T1ctRDUuY2pzJyk7XG52YXIgZ2V0SXQgPSByZXF1aXJlKCdnZXQtaXQnKTtcbmZ1bmN0aW9uIGRlZmluZURlcHJlY2F0ZWRDcmVhdGVDbGllbnQoY3JlYXRlQ2xpZW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiBkZXByZWNhdGVkQ3JlYXRlQ2xpZW50KGNvbmZpZykge1xuICAgIG5vZGVNaWRkbGV3YXJlLnByaW50Tm9EZWZhdWx0RXhwb3J0KCk7XG4gICAgcmV0dXJuIGNyZWF0ZUNsaWVudChjb25maWcpO1xuICB9O1xufVxuY29uc3QgZXhwID0gbm9kZU1pZGRsZXdhcmUuZGVmaW5lQ3JlYXRlQ2xpZW50RXhwb3J0cyhub2RlTWlkZGxld2FyZS5taWRkbGV3YXJlLCBub2RlTWlkZGxld2FyZS5TYW5pdHlDbGllbnQpO1xuY29uc3QgcmVxdWVzdGVyID0gZXhwLnJlcXVlc3RlcjtcbmNvbnN0IGNyZWF0ZUNsaWVudCA9IGV4cC5jcmVhdGVDbGllbnQ7XG5jb25zdCBkZXByZWNhdGVkQ3JlYXRlQ2xpZW50ID0gZGVmaW5lRGVwcmVjYXRlZENyZWF0ZUNsaWVudChjcmVhdGVDbGllbnQpO1xuZXhwb3J0cy5CYXNlUGF0Y2ggPSBub2RlTWlkZGxld2FyZS5CYXNlUGF0Y2g7XG5leHBvcnRzLkJhc2VUcmFuc2FjdGlvbiA9IG5vZGVNaWRkbGV3YXJlLkJhc2VUcmFuc2FjdGlvbjtcbmV4cG9ydHMuQ2xpZW50RXJyb3IgPSBub2RlTWlkZGxld2FyZS5DbGllbnRFcnJvcjtcbmV4cG9ydHMuT2JzZXJ2YWJsZVBhdGNoID0gbm9kZU1pZGRsZXdhcmUuT2JzZXJ2YWJsZVBhdGNoO1xuZXhwb3J0cy5PYnNlcnZhYmxlU2FuaXR5Q2xpZW50ID0gbm9kZU1pZGRsZXdhcmUuT2JzZXJ2YWJsZVNhbml0eUNsaWVudDtcbmV4cG9ydHMuT2JzZXJ2YWJsZVRyYW5zYWN0aW9uID0gbm9kZU1pZGRsZXdhcmUuT2JzZXJ2YWJsZVRyYW5zYWN0aW9uO1xuZXhwb3J0cy5QYXRjaCA9IG5vZGVNaWRkbGV3YXJlLlBhdGNoO1xuZXhwb3J0cy5TYW5pdHlDbGllbnQgPSBub2RlTWlkZGxld2FyZS5TYW5pdHlDbGllbnQ7XG5leHBvcnRzLlNlcnZlckVycm9yID0gbm9kZU1pZGRsZXdhcmUuU2VydmVyRXJyb3I7XG5leHBvcnRzLlRyYW5zYWN0aW9uID0gbm9kZU1pZGRsZXdhcmUuVHJhbnNhY3Rpb247XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ3Vuc3RhYmxlX19hZGFwdGVyJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ2V0SXQuYWRhcHRlcjtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ3Vuc3RhYmxlX19lbnZpcm9ubWVudCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGdldEl0LmVudmlyb25tZW50O1xuICB9XG59KTtcbmV4cG9ydHMuY3JlYXRlQ2xpZW50ID0gY3JlYXRlQ2xpZW50O1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVwcmVjYXRlZENyZWF0ZUNsaWVudDtcbmV4cG9ydHMucmVxdWVzdGVyID0gcmVxdWVzdGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguY2pzLm1hcFxuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibm9kZU1pZGRsZXdhcmUiLCJyZXF1aXJlIiwiZ2V0SXQiLCJkZWZpbmVEZXByZWNhdGVkQ3JlYXRlQ2xpZW50IiwiY3JlYXRlQ2xpZW50IiwiZGVwcmVjYXRlZENyZWF0ZUNsaWVudCIsImNvbmZpZyIsInByaW50Tm9EZWZhdWx0RXhwb3J0IiwiZXhwIiwiZGVmaW5lQ3JlYXRlQ2xpZW50RXhwb3J0cyIsIm1pZGRsZXdhcmUiLCJTYW5pdHlDbGllbnQiLCJyZXF1ZXN0ZXIiLCJCYXNlUGF0Y2giLCJCYXNlVHJhbnNhY3Rpb24iLCJDbGllbnRFcnJvciIsIk9ic2VydmFibGVQYXRjaCIsIk9ic2VydmFibGVTYW5pdHlDbGllbnQiLCJPYnNlcnZhYmxlVHJhbnNhY3Rpb24iLCJQYXRjaCIsIlNlcnZlckVycm9yIiwiVHJhbnNhY3Rpb24iLCJlbnVtZXJhYmxlIiwiZ2V0IiwiYWRhcHRlciIsImVudmlyb25tZW50IiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sanity/client/dist/index.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sanity/client/dist/stega.cjs":
/*!****************************************************!*\
  !*** ./node_modules/@sanity/client/dist/stega.cjs ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar nodeMiddleware = __webpack_require__(/*! ./_chunks/nodeMiddleware-1l7OW-D5.cjs */ \"(ssr)/./node_modules/@sanity/client/dist/_chunks/nodeMiddleware-1l7OW-D5.cjs\");\nvar operators = __webpack_require__(/*! rxjs/operators */ \"(ssr)/./node_modules/rxjs/dist/cjs/operators/index.js\");\nvar stega = __webpack_require__(/*! @vercel/stega */ \"(ssr)/./node_modules/@vercel/stega/dist/index.mjs\");\nvar resolveEditInfo = __webpack_require__(/*! ./_chunks/resolveEditInfo-v_7g85GR.cjs */ \"(ssr)/./node_modules/@sanity/client/dist/_chunks/resolveEditInfo-v_7g85GR.cjs\");\nvar getIt = __webpack_require__(/*! get-it */ \"(ssr)/./node_modules/get-it/dist/index.cjs\");\nconst defaultStegaConfig = {\n    enabled: false,\n    filter: (props)=>props.filterDefault(props)\n};\nfunction splitConfig(config) {\n    const { stega = {}, ...clientConfig } = config;\n    return {\n        clientConfig,\n        stegaConfig: typeof stega === \"boolean\" ? {\n            enabled: stega\n        } : stega\n    };\n}\nconst initStegaConfig = (config, prevConfig)=>{\n    const specifiedConfig = Object.assign({}, prevConfig, config);\n    const newConfig = Object.assign({}, defaultStegaConfig, specifiedConfig);\n    if (\"encodeSourceMap\" in newConfig) {\n        throw new Error(\"It looks like you're using options meant for '@sanity/preview-kit/client'. 'encodeSourceMap' is not supported in '@sanity/client/stega'. Did you mean 'enabled'?\");\n    }\n    if (\"encodeSourceMapAtPath\" in newConfig) {\n        throw new Error(\"It looks like you're using options meant for '@sanity/preview-kit/client'. 'encodeSourceMapAtPath' is not supported in '@sanity/client/stega'. Did you mean 'filter'?\");\n    }\n    if (typeof newConfig.enabled !== \"boolean\") {\n        throw new Error(\"config.enabled must be a boolean, received \".concat(newConfig.enabled));\n    }\n    if (newConfig.enabled && newConfig.studioUrl === void 0) {\n        throw new Error(\"config.studioUrl must be defined when config.enabled is true\");\n    }\n    if (newConfig.enabled && typeof newConfig.studioUrl !== \"string\" && typeof newConfig.studioUrl !== \"function\") {\n        throw new Error(\"config.studioUrl must be a string or a function, received \".concat(newConfig.studioUrl));\n    }\n    return newConfig;\n};\nfunction splitStegaConfigFromFetchOptions(options, initializedStegaConfig) {\n    const { stega = {}, ...fetchOptions } = options;\n    const stegaConfig = initStegaConfig(typeof stega === \"boolean\" ? {\n        enabled: stega\n    } : stega, initializedStegaConfig);\n    return {\n        fetchOptions,\n        stegaConfig\n    };\n}\nfunction encodeIntoResult(result, csm, encoder) {\n    return resolveEditInfo.walkMap(result, (value, path)=>{\n        if (typeof value !== \"string\") {\n            return value;\n        }\n        const resolveMappingResult = resolveEditInfo.resolveMapping(path, csm);\n        if (!resolveMappingResult) {\n            return value;\n        }\n        const { mapping, matchedPath } = resolveMappingResult;\n        if (mapping.type !== \"value\") {\n            return value;\n        }\n        if (mapping.source.type !== \"documentValue\") {\n            return value;\n        }\n        const sourceDocument = csm.documents[mapping.source.document];\n        const sourcePath = csm.paths[mapping.source.path];\n        const matchPathSegments = resolveEditInfo.parseJsonPath(matchedPath);\n        const sourcePathSegments = resolveEditInfo.parseJsonPath(sourcePath);\n        const fullSourceSegments = sourcePathSegments.concat(path.slice(matchPathSegments.length));\n        return encoder({\n            sourcePath: fullSourceSegments,\n            sourceDocument,\n            resultPath: path,\n            value\n        });\n    });\n}\nconst filterDefault = (_ref)=>{\n    let { sourcePath, value } = _ref;\n    if (isValidDate(value) || isValidURL(value)) {\n        return false;\n    }\n    const endPath = sourcePath.at(-1);\n    if (sourcePath.at(-2) === \"slug\" && endPath === \"current\") {\n        return false;\n    }\n    if (typeof endPath === \"string\" && endPath.startsWith(\"_\")) {\n        return false;\n    }\n    if (typeof endPath === \"number\" && sourcePath.at(-2) === \"marks\") {\n        return false;\n    }\n    if (endPath === \"href\" && typeof sourcePath.at(-2) === \"number\" && sourcePath.at(-3) === \"markDefs\") {\n        return false;\n    }\n    if (endPath === \"style\" || endPath === \"listItem\") {\n        return false;\n    }\n    if (sourcePath.some((path)=>path === \"meta\" || path === \"metadata\" || path === \"openGraph\" || path === \"seo\")) {\n        return false;\n    }\n    if (typeof endPath === \"string\" && denylist.has(endPath)) {\n        return false;\n    }\n    return true;\n};\nconst denylist = /* @__PURE__ */ new Set([\n    \"color\",\n    \"colour\",\n    \"currency\",\n    \"email\",\n    \"format\",\n    \"gid\",\n    \"hex\",\n    \"href\",\n    \"hsl\",\n    \"hsla\",\n    \"icon\",\n    \"id\",\n    \"index\",\n    \"key\",\n    \"language\",\n    \"layout\",\n    \"link\",\n    \"linkAction\",\n    \"locale\",\n    \"lqip\",\n    \"page\",\n    \"path\",\n    \"ref\",\n    \"rgb\",\n    \"rgba\",\n    \"route\",\n    \"secret\",\n    \"slug\",\n    \"status\",\n    \"tag\",\n    \"template\",\n    \"theme\",\n    \"type\",\n    \"unit\",\n    \"url\",\n    \"username\",\n    \"variant\",\n    \"website\"\n]);\nfunction isValidDate(dateString) {\n    return Number.isNaN(Number(dateString)) ? Boolean(Date.parse(dateString)) : false;\n}\nfunction isValidURL(url) {\n    try {\n        new URL(url, url.startsWith(\"/\") ? \"https://acme.com\" : void 0);\n    } catch  {\n        return false;\n    }\n    return true;\n}\nconst TRUNCATE_LENGTH = 20;\nfunction stegaEncodeSourceMap(result, resultSourceMap, config) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _i;\n    const { filter, logger, enabled } = config;\n    if (!enabled) {\n        const msg = \"config.enabled must be true, don't call this function otherwise\";\n        (_a = logger == null ? void 0 : logger.error) == null ? void 0 : _a.call(logger, \"[@sanity/client/stega]: \".concat(msg), {\n            result,\n            resultSourceMap,\n            config\n        });\n        throw new TypeError(msg);\n    }\n    if (!resultSourceMap) {\n        (_b = logger == null ? void 0 : logger.error) == null ? void 0 : _b.call(logger, \"[@sanity/client/stega]: Missing Content Source Map from response body\", {\n            result,\n            resultSourceMap,\n            config\n        });\n        return result;\n    }\n    if (!config.studioUrl) {\n        const msg = \"config.studioUrl must be defined\";\n        (_c = logger == null ? void 0 : logger.error) == null ? void 0 : _c.call(logger, \"[@sanity/client/stega]: \".concat(msg), {\n            result,\n            resultSourceMap,\n            config\n        });\n        throw new TypeError(msg);\n    }\n    const report = {\n        encoded: [],\n        skipped: []\n    };\n    const resultWithStega = encodeIntoResult(result, resultSourceMap, (_ref2)=>{\n        let { sourcePath, sourceDocument, resultPath, value } = _ref2;\n        if ((typeof filter === \"function\" ? filter({\n            sourcePath,\n            resultPath,\n            filterDefault,\n            sourceDocument,\n            value\n        }) : filterDefault({\n            sourcePath,\n            resultPath,\n            filterDefault,\n            sourceDocument,\n            value\n        })) === false) {\n            if (logger) {\n                report.skipped.push({\n                    path: prettyPathForLogging(sourcePath),\n                    value: \"\".concat(value.slice(0, TRUNCATE_LENGTH)).concat(value.length > TRUNCATE_LENGTH ? \"...\" : \"\"),\n                    length: value.length\n                });\n            }\n            return value;\n        }\n        if (logger) {\n            report.encoded.push({\n                path: prettyPathForLogging(sourcePath),\n                value: \"\".concat(value.slice(0, TRUNCATE_LENGTH)).concat(value.length > TRUNCATE_LENGTH ? \"...\" : \"\"),\n                length: value.length\n            });\n        }\n        const { baseUrl, workspace, tool } = resolveEditInfo.resolveStudioBaseRoute(typeof config.studioUrl === \"function\" ? config.studioUrl(sourceDocument) : config.studioUrl);\n        if (!baseUrl) return value;\n        const { _id: id, _type: type } = sourceDocument;\n        return stega.vercelStegaCombine(value, {\n            origin: \"sanity.io\",\n            href: resolveEditInfo.createEditUrl({\n                baseUrl,\n                workspace,\n                tool,\n                id,\n                type,\n                path: sourcePath\n            })\n        }, // We use custom logic to determine if we should skip encoding\n        false);\n    });\n    if (logger) {\n        const isSkipping = report.skipped.length;\n        const isEncoding = report.encoded.length;\n        if (isSkipping || isEncoding) {\n            (_d = (logger == null ? void 0 : logger.groupCollapsed) || logger.log) == null ? void 0 : _d(\"[@sanity/client/stega]: Encoding source map into result\");\n            (_e = logger.log) == null ? void 0 : _e.call(logger, \"[@sanity/client/stega]: Paths encoded: \".concat(report.encoded.length, \", skipped: \").concat(report.skipped.length));\n        }\n        if (report.encoded.length > 0) {\n            (_f = logger == null ? void 0 : logger.log) == null ? void 0 : _f.call(logger, \"[@sanity/client/stega]: Table of encoded paths\");\n            (_g = (logger == null ? void 0 : logger.table) || logger.log) == null ? void 0 : _g(report.encoded);\n        }\n        if (report.skipped.length > 0) {\n            const skipped = /* @__PURE__ */ new Set();\n            for (const { path } of report.skipped){\n                skipped.add(path.replace(resolveEditInfo.reKeySegment, \"0\").replace(/\\[\\d+\\]/g, \"[]\"));\n            }\n            (_h = logger == null ? void 0 : logger.log) == null ? void 0 : _h.call(logger, \"[@sanity/client/stega]: List of skipped paths\", [\n                ...skipped.values()\n            ]);\n        }\n        if (isSkipping || isEncoding) {\n            (_i = logger == null ? void 0 : logger.groupEnd) == null ? void 0 : _i.call(logger);\n        }\n    }\n    return resultWithStega;\n}\nfunction prettyPathForLogging(path) {\n    return resolveEditInfo.toString(resolveEditInfo.jsonPathToStudioPath(path));\n}\nfunction vercelStegaCleanAll(result) {\n    return JSON.parse(JSON.stringify(result, (key, value)=>{\n        if (typeof value !== \"string\") return value;\n        return stega.vercelStegaSplit(value).cleaned;\n    }));\n}\nvar __accessCheck = (obj, member, msg)=>{\n    if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter)=>{\n    __accessCheck(obj, member, \"read from private field\");\n    return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value)=>{\n    if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter)=>{\n    __accessCheck(obj, member, \"write to private field\");\n    setter ? setter.call(obj, value) : member.set(obj, value);\n    return value;\n};\nvar _httpRequest, _httpRequest2;\nconst _ObservableSanityStegaClient = class _ObservableSanityStegaClient extends nodeMiddleware.ObservableSanityClient {\n    constructor(httpRequest){\n        let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : nodeMiddleware.defaultConfig;\n        const { clientConfig, stegaConfig } = splitConfig(config);\n        super(httpRequest, clientConfig);\n        /**\n     * Private properties\n     */ __privateAdd(this, _httpRequest, void 0);\n        __privateSet(this, _httpRequest, httpRequest);\n        this.stegaConfig = initStegaConfig(stegaConfig, defaultStegaConfig);\n    }\n    /**\n   * Clone the client - returns a new instance\n   */ clone() {\n        return new _ObservableSanityStegaClient(__privateGet(this, _httpRequest), this.config());\n    }\n    config(newConfig) {\n        if (newConfig === void 0) {\n            return {\n                ...super.config(),\n                stega: {\n                    ...this.stegaConfig\n                }\n            };\n        }\n        const { clientConfig, stegaConfig } = splitConfig(newConfig);\n        super.config(clientConfig);\n        this.stegaConfig = initStegaConfig(stegaConfig, this.stegaConfig || {});\n        return this;\n    }\n    /**\n   * Clone the client with a new (partial) configuration.\n   *\n   * @param newConfig - New client configuration properties, shallowly merged with existing configuration\n   */ withConfig(newConfig) {\n        const thisConfig = this.config();\n        const { stegaConfig } = splitConfig(newConfig || {});\n        return new _ObservableSanityStegaClient(__privateGet(this, _httpRequest), {\n            ...thisConfig,\n            ...newConfig,\n            stega: {\n                ...thisConfig.stega || {},\n                ...stegaConfig || {}\n            }\n        });\n    }\n    fetch(query, _params) {\n        let _options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        const { stegaConfig, fetchOptions: options } = splitStegaConfigFromFetchOptions(_options, this.stegaConfig);\n        const params = _params ? vercelStegaCleanAll(_params) : _params;\n        if (!stegaConfig.enabled) {\n            return super.fetch(query, params, options);\n        }\n        const { filterResponse: originalFilterResponse = true } = options;\n        return super.fetch(query, params, Object.assign({}, options, {\n            filterResponse: false,\n            resultSourceMap: \"withKeyArraySelector\"\n        })).pipe(operators.map((res)=>{\n            const { result: _result, resultSourceMap } = res;\n            const result = stegaEncodeSourceMap(_result, resultSourceMap, stegaConfig);\n            return originalFilterResponse ? result : {\n                ...res,\n                result\n            };\n        }));\n    }\n};\n_httpRequest = new WeakMap();\nlet ObservableSanityStegaClient = _ObservableSanityStegaClient;\nconst _SanityStegaClient = class _SanityStegaClient extends nodeMiddleware.SanityClient {\n    constructor(httpRequest){\n        let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : nodeMiddleware.defaultConfig;\n        const { clientConfig, stegaConfig } = splitConfig(config);\n        super(httpRequest, clientConfig);\n        /**\n     * Private properties\n     */ __privateAdd(this, _httpRequest2, void 0);\n        __privateSet(this, _httpRequest2, httpRequest);\n        this.stegaConfig = initStegaConfig(stegaConfig, defaultStegaConfig);\n        this.observable = new ObservableSanityStegaClient(httpRequest, config);\n    }\n    /**\n   * Clone the client - returns a new instance\n   */ clone() {\n        return new _SanityStegaClient(__privateGet(this, _httpRequest2), this.config());\n    }\n    config(newConfig) {\n        if (newConfig === void 0) {\n            return {\n                ...super.config(),\n                stega: {\n                    ...this.stegaConfig\n                }\n            };\n        }\n        const { clientConfig, stegaConfig } = splitConfig(newConfig);\n        super.config(clientConfig);\n        this.stegaConfig = initStegaConfig(stegaConfig, {\n            ...this.stegaConfig || {}\n        });\n        return this;\n    }\n    /**\n   * Clone the client with a new (partial) configuration.\n   *\n   * @param newConfig - New client configuration properties, shallowly merged with existing configuration\n   */ withConfig(newConfig) {\n        const thisConfig = this.config();\n        const { stegaConfig } = splitConfig(newConfig || {});\n        return new _SanityStegaClient(__privateGet(this, _httpRequest2), {\n            ...thisConfig,\n            ...newConfig,\n            stega: {\n                ...thisConfig.stega || {},\n                ...stegaConfig || {}\n            }\n        });\n    }\n    fetch(query, _params) {\n        let _options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        const { stegaConfig, fetchOptions: options } = splitStegaConfigFromFetchOptions(_options, this.stegaConfig);\n        const params = _params ? vercelStegaCleanAll(_params) : _params;\n        if (!stegaConfig.enabled) {\n            return super.fetch(query, params, options);\n        }\n        const { filterResponse: originalFilterResponse = true } = options;\n        return super.fetch(query, params, Object.assign({}, options, {\n            filterResponse: false,\n            resultSourceMap: \"withKeyArraySelector\"\n        })).then((res)=>{\n            const { result: _result, resultSourceMap } = res;\n            const result = stegaEncodeSourceMap(_result, resultSourceMap, stegaConfig);\n            return originalFilterResponse ? result : {\n                ...res,\n                result\n            };\n        });\n    }\n};\n_httpRequest2 = new WeakMap();\nlet SanityStegaClient = _SanityStegaClient;\nconst exp = nodeMiddleware.defineCreateClientExports(nodeMiddleware.middleware, SanityStegaClient);\nconst requester = exp.requester;\nconst createClient = exp.createClient;\nexports.BasePatch = nodeMiddleware.BasePatch;\nexports.BaseTransaction = nodeMiddleware.BaseTransaction;\nexports.ClientError = nodeMiddleware.ClientError;\nexports.ObservablePatch = nodeMiddleware.ObservablePatch;\nexports.ObservableSanityClient = nodeMiddleware.ObservableSanityClient;\nexports.ObservableTransaction = nodeMiddleware.ObservableTransaction;\nexports.Patch = nodeMiddleware.Patch;\nexports.SanityClient = nodeMiddleware.SanityClient;\nexports.ServerError = nodeMiddleware.ServerError;\nexports.Transaction = nodeMiddleware.Transaction;\nObject.defineProperty(exports, \"unstable__adapter\", ({\n    enumerable: true,\n    get: function() {\n        return getIt.adapter;\n    }\n}));\nObject.defineProperty(exports, \"unstable__environment\", ({\n    enumerable: true,\n    get: function() {\n        return getIt.environment;\n    }\n}));\nexports.ObservableSanityStegaClient = ObservableSanityStegaClient;\nexports.SanityStegaClient = SanityStegaClient;\nexports.createClient = createClient;\nexports.encodeIntoResult = encodeIntoResult;\nexports.requester = requester;\nexports.stegaEncodeSourceMap = stegaEncodeSourceMap;\nexports.vercelStegaCleanAll = vercelStegaCleanAll; //# sourceMappingURL=stega.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sanity/client/dist/stega.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sanity/eventsource/node.js":
/*!**************************************************!*\
  !*** ./node_modules/@sanity/eventsource/node.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! eventsource */ \"(ssr)/./node_modules/eventsource/lib/eventsource.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNhbml0eS9ldmVudHNvdXJjZS9ub2RlLmpzIiwibWFwcGluZ3MiOiJBQUFBQSw4R0FBeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uaWtlLy4vbm9kZV9tb2R1bGVzL0BzYW5pdHkvZXZlbnRzb3VyY2Uvbm9kZS5qcz9kODg5Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnZXZlbnRzb3VyY2UnKVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sanity/eventsource/node.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sanity/client/dist/index.cjs.js":
/*!*******************************************************!*\
  !*** ./node_modules/@sanity/client/dist/index.cjs.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BasePatch: () => (/* binding */ BasePatch),\n/* harmony export */   BaseTransaction: () => (/* binding */ BaseTransaction),\n/* harmony export */   ClientError: () => (/* binding */ ClientError),\n/* harmony export */   ObservablePatch: () => (/* binding */ ObservablePatch),\n/* harmony export */   ObservableSanityClient: () => (/* binding */ ObservableSanityClient),\n/* harmony export */   ObservableTransaction: () => (/* binding */ ObservableTransaction),\n/* harmony export */   Patch: () => (/* binding */ Patch),\n/* harmony export */   SanityClient: () => (/* binding */ SanityClient),\n/* harmony export */   ServerError: () => (/* binding */ ServerError),\n/* harmony export */   Transaction: () => (/* binding */ Transaction),\n/* harmony export */   createClient: () => (/* binding */ createClient),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   requester: () => (/* binding */ requester),\n/* harmony export */   unstable__adapter: () => (/* binding */ unstable__adapter),\n/* harmony export */   unstable__environment: () => (/* binding */ unstable__environment)\n/* harmony export */ });\n/* harmony import */ var _index_cjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.cjs */ \"(ssr)/./node_modules/@sanity/client/dist/index.cjs\");\n\nconst BasePatch = _index_cjs__WEBPACK_IMPORTED_MODULE_0__.BasePatch;\nconst BaseTransaction = _index_cjs__WEBPACK_IMPORTED_MODULE_0__.BaseTransaction;\nconst ClientError = _index_cjs__WEBPACK_IMPORTED_MODULE_0__.ClientError;\nconst ObservablePatch = _index_cjs__WEBPACK_IMPORTED_MODULE_0__.ObservablePatch;\nconst ObservableSanityClient = _index_cjs__WEBPACK_IMPORTED_MODULE_0__.ObservableSanityClient;\nconst ObservableTransaction = _index_cjs__WEBPACK_IMPORTED_MODULE_0__.ObservableTransaction;\nconst Patch = _index_cjs__WEBPACK_IMPORTED_MODULE_0__.Patch;\nconst SanityClient = _index_cjs__WEBPACK_IMPORTED_MODULE_0__.SanityClient;\nconst ServerError = _index_cjs__WEBPACK_IMPORTED_MODULE_0__.ServerError;\nconst Transaction = _index_cjs__WEBPACK_IMPORTED_MODULE_0__.Transaction;\nconst unstable__adapter = _index_cjs__WEBPACK_IMPORTED_MODULE_0__.unstable__adapter;\nconst unstable__environment = _index_cjs__WEBPACK_IMPORTED_MODULE_0__.unstable__environment;\nconst createClient = _index_cjs__WEBPACK_IMPORTED_MODULE_0__.createClient;\nconst requester = _index_cjs__WEBPACK_IMPORTED_MODULE_0__.requester;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_index_cjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNhbml0eS9jbGllbnQvZGlzdC9pbmRleC5janMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUE4QjtBQUV2QixNQUFNQyxZQUFZRCxpREFBYSxDQUFDO0FBQ2hDLE1BQU1FLGtCQUFrQkYsdURBQW1CLENBQUM7QUFDNUMsTUFBTUcsY0FBY0gsbURBQWUsQ0FBQztBQUNwQyxNQUFNSSxrQkFBa0JKLHVEQUFtQixDQUFDO0FBQzVDLE1BQU1LLHlCQUF5QkwsOERBQTBCLENBQUM7QUFDMUQsTUFBTU0sd0JBQXdCTiw2REFBeUIsQ0FBQztBQUN4RCxNQUFNTyxRQUFRUCw2Q0FBUyxDQUFDO0FBQ3hCLE1BQU1RLGVBQWVSLG9EQUFnQixDQUFDO0FBQ3RDLE1BQU1TLGNBQWNULG1EQUFlLENBQUM7QUFDcEMsTUFBTVUsY0FBY1YsbURBQWUsQ0FBQztBQUNwQyxNQUFNVyxvQkFBb0JYLHlEQUFxQixDQUFDO0FBQ2hELE1BQU1ZLHdCQUF3QlosNkRBQXlCLENBQUM7QUFDeEQsTUFBTWEsZUFBZWIsb0RBQWdCLENBQUM7QUFDdEMsTUFBTWMsWUFBWWQsaURBQWEsQ0FBQztBQUV2QyxpRUFBZUEsa0RBQVcsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL25pa2UvLi9ub2RlX21vZHVsZXMvQHNhbml0eS9jbGllbnQvZGlzdC9pbmRleC5janMuanM/ODAxOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2pzIGZyb20gJy4vaW5kZXguY2pzJztcblxuZXhwb3J0IGNvbnN0IEJhc2VQYXRjaCA9IGNqcy5CYXNlUGF0Y2g7XG5leHBvcnQgY29uc3QgQmFzZVRyYW5zYWN0aW9uID0gY2pzLkJhc2VUcmFuc2FjdGlvbjtcbmV4cG9ydCBjb25zdCBDbGllbnRFcnJvciA9IGNqcy5DbGllbnRFcnJvcjtcbmV4cG9ydCBjb25zdCBPYnNlcnZhYmxlUGF0Y2ggPSBjanMuT2JzZXJ2YWJsZVBhdGNoO1xuZXhwb3J0IGNvbnN0IE9ic2VydmFibGVTYW5pdHlDbGllbnQgPSBjanMuT2JzZXJ2YWJsZVNhbml0eUNsaWVudDtcbmV4cG9ydCBjb25zdCBPYnNlcnZhYmxlVHJhbnNhY3Rpb24gPSBjanMuT2JzZXJ2YWJsZVRyYW5zYWN0aW9uO1xuZXhwb3J0IGNvbnN0IFBhdGNoID0gY2pzLlBhdGNoO1xuZXhwb3J0IGNvbnN0IFNhbml0eUNsaWVudCA9IGNqcy5TYW5pdHlDbGllbnQ7XG5leHBvcnQgY29uc3QgU2VydmVyRXJyb3IgPSBjanMuU2VydmVyRXJyb3I7XG5leHBvcnQgY29uc3QgVHJhbnNhY3Rpb24gPSBjanMuVHJhbnNhY3Rpb247XG5leHBvcnQgY29uc3QgdW5zdGFibGVfX2FkYXB0ZXIgPSBjanMudW5zdGFibGVfX2FkYXB0ZXI7XG5leHBvcnQgY29uc3QgdW5zdGFibGVfX2Vudmlyb25tZW50ID0gY2pzLnVuc3RhYmxlX19lbnZpcm9ubWVudDtcbmV4cG9ydCBjb25zdCBjcmVhdGVDbGllbnQgPSBjanMuY3JlYXRlQ2xpZW50O1xuZXhwb3J0IGNvbnN0IHJlcXVlc3RlciA9IGNqcy5yZXF1ZXN0ZXI7XG5cbmV4cG9ydCBkZWZhdWx0IGNqcy5kZWZhdWx0O1xuIl0sIm5hbWVzIjpbImNqcyIsIkJhc2VQYXRjaCIsIkJhc2VUcmFuc2FjdGlvbiIsIkNsaWVudEVycm9yIiwiT2JzZXJ2YWJsZVBhdGNoIiwiT2JzZXJ2YWJsZVNhbml0eUNsaWVudCIsIk9ic2VydmFibGVUcmFuc2FjdGlvbiIsIlBhdGNoIiwiU2FuaXR5Q2xpZW50IiwiU2VydmVyRXJyb3IiLCJUcmFuc2FjdGlvbiIsInVuc3RhYmxlX19hZGFwdGVyIiwidW5zdGFibGVfX2Vudmlyb25tZW50IiwiY3JlYXRlQ2xpZW50IiwicmVxdWVzdGVyIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sanity/client/dist/index.cjs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sanity/client/dist/stega.cjs.js":
/*!*******************************************************!*\
  !*** ./node_modules/@sanity/client/dist/stega.cjs.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BasePatch: () => (/* binding */ BasePatch),\n/* harmony export */   BaseTransaction: () => (/* binding */ BaseTransaction),\n/* harmony export */   ClientError: () => (/* binding */ ClientError),\n/* harmony export */   ObservablePatch: () => (/* binding */ ObservablePatch),\n/* harmony export */   ObservableSanityClient: () => (/* binding */ ObservableSanityClient),\n/* harmony export */   ObservableSanityStegaClient: () => (/* binding */ ObservableSanityStegaClient),\n/* harmony export */   ObservableTransaction: () => (/* binding */ ObservableTransaction),\n/* harmony export */   Patch: () => (/* binding */ Patch),\n/* harmony export */   SanityClient: () => (/* binding */ SanityClient),\n/* harmony export */   SanityStegaClient: () => (/* binding */ SanityStegaClient),\n/* harmony export */   ServerError: () => (/* binding */ ServerError),\n/* harmony export */   Transaction: () => (/* binding */ Transaction),\n/* harmony export */   createClient: () => (/* binding */ createClient),\n/* harmony export */   encodeIntoResult: () => (/* binding */ encodeIntoResult),\n/* harmony export */   requester: () => (/* binding */ requester),\n/* harmony export */   stegaEncodeSourceMap: () => (/* binding */ stegaEncodeSourceMap),\n/* harmony export */   unstable__adapter: () => (/* binding */ unstable__adapter),\n/* harmony export */   unstable__environment: () => (/* binding */ unstable__environment),\n/* harmony export */   vercelStegaCleanAll: () => (/* binding */ vercelStegaCleanAll)\n/* harmony export */ });\n/* harmony import */ var _stega_cjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stega.cjs */ \"(ssr)/./node_modules/@sanity/client/dist/stega.cjs\");\n\nconst BasePatch = _stega_cjs__WEBPACK_IMPORTED_MODULE_0__.BasePatch;\nconst BaseTransaction = _stega_cjs__WEBPACK_IMPORTED_MODULE_0__.BaseTransaction;\nconst ClientError = _stega_cjs__WEBPACK_IMPORTED_MODULE_0__.ClientError;\nconst ObservablePatch = _stega_cjs__WEBPACK_IMPORTED_MODULE_0__.ObservablePatch;\nconst ObservableSanityClient = _stega_cjs__WEBPACK_IMPORTED_MODULE_0__.ObservableSanityClient;\nconst ObservableTransaction = _stega_cjs__WEBPACK_IMPORTED_MODULE_0__.ObservableTransaction;\nconst Patch = _stega_cjs__WEBPACK_IMPORTED_MODULE_0__.Patch;\nconst SanityClient = _stega_cjs__WEBPACK_IMPORTED_MODULE_0__.SanityClient;\nconst ServerError = _stega_cjs__WEBPACK_IMPORTED_MODULE_0__.ServerError;\nconst Transaction = _stega_cjs__WEBPACK_IMPORTED_MODULE_0__.Transaction;\nconst unstable__adapter = _stega_cjs__WEBPACK_IMPORTED_MODULE_0__.unstable__adapter;\nconst unstable__environment = _stega_cjs__WEBPACK_IMPORTED_MODULE_0__.unstable__environment;\nconst ObservableSanityStegaClient = _stega_cjs__WEBPACK_IMPORTED_MODULE_0__.ObservableSanityStegaClient;\nconst SanityStegaClient = _stega_cjs__WEBPACK_IMPORTED_MODULE_0__.SanityStegaClient;\nconst createClient = _stega_cjs__WEBPACK_IMPORTED_MODULE_0__.createClient;\nconst encodeIntoResult = _stega_cjs__WEBPACK_IMPORTED_MODULE_0__.encodeIntoResult;\nconst requester = _stega_cjs__WEBPACK_IMPORTED_MODULE_0__.requester;\nconst stegaEncodeSourceMap = _stega_cjs__WEBPACK_IMPORTED_MODULE_0__.stegaEncodeSourceMap;\nconst vercelStegaCleanAll = _stega_cjs__WEBPACK_IMPORTED_MODULE_0__.vercelStegaCleanAll;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNhbml0eS9jbGllbnQvZGlzdC9zdGVnYS5janMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBOEI7QUFFdkIsTUFBTUMsWUFBWUQsaURBQWEsQ0FBQztBQUNoQyxNQUFNRSxrQkFBa0JGLHVEQUFtQixDQUFDO0FBQzVDLE1BQU1HLGNBQWNILG1EQUFlLENBQUM7QUFDcEMsTUFBTUksa0JBQWtCSix1REFBbUIsQ0FBQztBQUM1QyxNQUFNSyx5QkFBeUJMLDhEQUEwQixDQUFDO0FBQzFELE1BQU1NLHdCQUF3Qk4sNkRBQXlCLENBQUM7QUFDeEQsTUFBTU8sUUFBUVAsNkNBQVMsQ0FBQztBQUN4QixNQUFNUSxlQUFlUixvREFBZ0IsQ0FBQztBQUN0QyxNQUFNUyxjQUFjVCxtREFBZSxDQUFDO0FBQ3BDLE1BQU1VLGNBQWNWLG1EQUFlLENBQUM7QUFDcEMsTUFBTVcsb0JBQW9CWCx5REFBcUIsQ0FBQztBQUNoRCxNQUFNWSx3QkFBd0JaLDZEQUF5QixDQUFDO0FBQ3hELE1BQU1hLDhCQUE4QmIsbUVBQStCLENBQUM7QUFDcEUsTUFBTWMsb0JBQW9CZCx5REFBcUIsQ0FBQztBQUNoRCxNQUFNZSxlQUFlZixvREFBZ0IsQ0FBQztBQUN0QyxNQUFNZ0IsbUJBQW1CaEIsd0RBQW9CLENBQUM7QUFDOUMsTUFBTWlCLFlBQVlqQixpREFBYSxDQUFDO0FBQ2hDLE1BQU1rQix1QkFBdUJsQiw0REFBd0IsQ0FBQztBQUN0RCxNQUFNbUIsc0JBQXNCbkIsMkRBQXVCLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uaWtlLy4vbm9kZV9tb2R1bGVzL0BzYW5pdHkvY2xpZW50L2Rpc3Qvc3RlZ2EuY2pzLmpzPzIwMTYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNqcyBmcm9tICcuL3N0ZWdhLmNqcyc7XG5cbmV4cG9ydCBjb25zdCBCYXNlUGF0Y2ggPSBjanMuQmFzZVBhdGNoO1xuZXhwb3J0IGNvbnN0IEJhc2VUcmFuc2FjdGlvbiA9IGNqcy5CYXNlVHJhbnNhY3Rpb247XG5leHBvcnQgY29uc3QgQ2xpZW50RXJyb3IgPSBjanMuQ2xpZW50RXJyb3I7XG5leHBvcnQgY29uc3QgT2JzZXJ2YWJsZVBhdGNoID0gY2pzLk9ic2VydmFibGVQYXRjaDtcbmV4cG9ydCBjb25zdCBPYnNlcnZhYmxlU2FuaXR5Q2xpZW50ID0gY2pzLk9ic2VydmFibGVTYW5pdHlDbGllbnQ7XG5leHBvcnQgY29uc3QgT2JzZXJ2YWJsZVRyYW5zYWN0aW9uID0gY2pzLk9ic2VydmFibGVUcmFuc2FjdGlvbjtcbmV4cG9ydCBjb25zdCBQYXRjaCA9IGNqcy5QYXRjaDtcbmV4cG9ydCBjb25zdCBTYW5pdHlDbGllbnQgPSBjanMuU2FuaXR5Q2xpZW50O1xuZXhwb3J0IGNvbnN0IFNlcnZlckVycm9yID0gY2pzLlNlcnZlckVycm9yO1xuZXhwb3J0IGNvbnN0IFRyYW5zYWN0aW9uID0gY2pzLlRyYW5zYWN0aW9uO1xuZXhwb3J0IGNvbnN0IHVuc3RhYmxlX19hZGFwdGVyID0gY2pzLnVuc3RhYmxlX19hZGFwdGVyO1xuZXhwb3J0IGNvbnN0IHVuc3RhYmxlX19lbnZpcm9ubWVudCA9IGNqcy51bnN0YWJsZV9fZW52aXJvbm1lbnQ7XG5leHBvcnQgY29uc3QgT2JzZXJ2YWJsZVNhbml0eVN0ZWdhQ2xpZW50ID0gY2pzLk9ic2VydmFibGVTYW5pdHlTdGVnYUNsaWVudDtcbmV4cG9ydCBjb25zdCBTYW5pdHlTdGVnYUNsaWVudCA9IGNqcy5TYW5pdHlTdGVnYUNsaWVudDtcbmV4cG9ydCBjb25zdCBjcmVhdGVDbGllbnQgPSBjanMuY3JlYXRlQ2xpZW50O1xuZXhwb3J0IGNvbnN0IGVuY29kZUludG9SZXN1bHQgPSBjanMuZW5jb2RlSW50b1Jlc3VsdDtcbmV4cG9ydCBjb25zdCByZXF1ZXN0ZXIgPSBjanMucmVxdWVzdGVyO1xuZXhwb3J0IGNvbnN0IHN0ZWdhRW5jb2RlU291cmNlTWFwID0gY2pzLnN0ZWdhRW5jb2RlU291cmNlTWFwO1xuZXhwb3J0IGNvbnN0IHZlcmNlbFN0ZWdhQ2xlYW5BbGwgPSBjanMudmVyY2VsU3RlZ2FDbGVhbkFsbDtcblxuIl0sIm5hbWVzIjpbImNqcyIsIkJhc2VQYXRjaCIsIkJhc2VUcmFuc2FjdGlvbiIsIkNsaWVudEVycm9yIiwiT2JzZXJ2YWJsZVBhdGNoIiwiT2JzZXJ2YWJsZVNhbml0eUNsaWVudCIsIk9ic2VydmFibGVUcmFuc2FjdGlvbiIsIlBhdGNoIiwiU2FuaXR5Q2xpZW50IiwiU2VydmVyRXJyb3IiLCJUcmFuc2FjdGlvbiIsInVuc3RhYmxlX19hZGFwdGVyIiwidW5zdGFibGVfX2Vudmlyb25tZW50IiwiT2JzZXJ2YWJsZVNhbml0eVN0ZWdhQ2xpZW50IiwiU2FuaXR5U3RlZ2FDbGllbnQiLCJjcmVhdGVDbGllbnQiLCJlbmNvZGVJbnRvUmVzdWx0IiwicmVxdWVzdGVyIiwic3RlZ2FFbmNvZGVTb3VyY2VNYXAiLCJ2ZXJjZWxTdGVnYUNsZWFuQWxsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sanity/client/dist/stega.cjs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sanity/preview-kit/dist/client/createClient.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@sanity/preview-kit/dist/client/createClient.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createClient: () => (/* binding */ r)\n/* harmony export */ });\n/* harmony import */ var _sanity_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sanity/client */ \"(ssr)/./node_modules/@sanity/client/dist/index.cjs.js\");\n/* harmony import */ var _sanity_client_stega__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sanity/client/stega */ \"(ssr)/./node_modules/@sanity/client/dist/stega.cjs.js\");\n\n\nconst r = (r)=>{\n    var a, c;\n    const { encodeSourceMap: i = n(), encodeSourceMapAtPath: l, studioUrl: u = o(), logger: s, ...p } = r;\n    let d = !0 === i;\n    if (\"auto\" === i && (d = function() {\n        try {\n            return \"preview\" === /* unsupported import.meta.env.VERCEL_ENV */ undefined.VERCEL_ENV;\n        } catch  {}\n        try {\n            return \"preview\" === process.env.VERCEL_ENV;\n        } catch  {}\n        return !1;\n    }()), \"string\" == typeof i && \"auto\" !== i) throw new Error(\"Invalid value for encodeSourceMap: \".concat(i, \". Did you mean 'auto'?\"));\n    try {\n        if (d && !1 !== r.resultSourceMap) return u ? (null == (c = null == s ? void 0 : s.debug) || c.call(s, \"[@sanity/preview-kit]: Creating source map enabled client\"), (0,_sanity_client_stega__WEBPACK_IMPORTED_MODULE_0__.createClient)({\n            ...p,\n            resultSourceMap: r.resultSourceMap ? r.resultSourceMap : \"withKeyArraySelector\",\n            stega: {\n                enabled: !0,\n                studioUrl: u,\n                logger: s,\n                filter: l ? (e)=>l({\n                        path: e.sourcePath,\n                        filterDefault: ()=>e.filterDefault(e)\n                    }) : void 0\n            }\n        })) : (null == (a = null == s ? void 0 : s.error) || a.call(s, \"[@sanity/preview-kit]: Content source map enabled client is enabled, but no studioUrl is provided. Falling back to @sanity/client\"), (0,_sanity_client__WEBPACK_IMPORTED_MODULE_1__.createClient)(p));\n    } catch (e) {\n        console.error(\"[@sanity/preview-kit]: Error creating client\", e, \"falling back to non-embedded sourcemap mode\");\n    }\n    return (0,_sanity_client__WEBPACK_IMPORTED_MODULE_1__.createClient)(p);\n};\nfunction n() {\n    try {\n        return \"true\" === /* unsupported import.meta.env.SANITY_SOURCE_MAP */ undefined.SANITY_SOURCE_MAP;\n    } catch  {}\n    try {\n        return \"true\" === process.env.SANITY_SOURCE_MAP;\n    } catch  {}\n    return !1;\n}\nfunction o() {\n    try {\n        return /* unsupported import.meta.env.SANITY_STUDIO_URL */ undefined.SANITY_STUDIO_URL;\n    } catch  {}\n    try {\n        return process.env.SANITY_STUDIO_URL;\n    } catch  {}\n}\n //# sourceMappingURL=createClient.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNhbml0eS9wcmV2aWV3LWtpdC9kaXN0L2NsaWVudC9jcmVhdGVDbGllbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQThDO0FBQW9EO0FBQUEsTUFBTUcsSUFBRUEsQ0FBQUE7SUFBSSxJQUFJQyxHQUFFQztJQUFFLE1BQUssRUFBQ0MsaUJBQWdCQyxJQUFFQyxHQUFHLEVBQUNDLHVCQUFzQkMsQ0FBQyxFQUFDQyxXQUFVQyxJQUFFQyxHQUFHLEVBQUNDLFFBQU9DLENBQUMsRUFBQyxHQUFHQyxHQUFFLEdBQUNiO0lBQUUsSUFBSWMsSUFBRSxDQUFDLE1BQUlWO0lBQUUsSUFBRyxXQUFTQSxLQUFJVSxDQUFBQSxJQUFFO1FBQVcsSUFBRztZQUFDLE9BQU0sY0FBWSxpRUFBMEI7UUFBQSxFQUFDLE9BQUssQ0FBQztRQUFDLElBQUc7WUFBQyxPQUFNLGNBQVlHLFFBQVFGLEdBQUcsQ0FBQ0MsVUFBVTtRQUFBLEVBQUMsT0FBSyxDQUFDO1FBQUMsT0FBTSxDQUFDO0lBQUMsR0FBRSxHQUFHLFlBQVUsT0FBT1osS0FBRyxXQUFTQSxHQUFFLE1BQU0sSUFBSWMsTUFBTSxzQ0FBc0NDLE1BQU0sQ0FBQ2YsR0FBRTtJQUEyQixJQUFHO1FBQUMsSUFBR1UsS0FBRyxDQUFDLE1BQUlkLEVBQUVvQixlQUFlLEVBQUMsT0FBT1gsSUFBRyxTQUFPUCxDQUFBQSxJQUFFLFFBQU1VLElBQUUsS0FBSyxJQUFFQSxFQUFFUyxLQUFLLEtBQUduQixFQUFFb0IsSUFBSSxDQUFDVixHQUFFLDhEQUE2RGIsa0VBQUNBLENBQUM7WUFBQyxHQUFHYyxDQUFDO1lBQUNPLGlCQUFnQnBCLEVBQUVvQixlQUFlLEdBQUNwQixFQUFFb0IsZUFBZSxHQUFDO1lBQXVCRyxPQUFNO2dCQUFDQyxTQUFRLENBQUM7Z0JBQUVoQixXQUFVQztnQkFBRUUsUUFBT0M7Z0JBQUVhLFFBQU9sQixJQUFFVCxDQUFBQSxJQUFHUyxFQUFFO3dCQUFDbUIsTUFBSzVCLEVBQUU2QixVQUFVO3dCQUFDQyxlQUFjLElBQUk5QixFQUFFOEIsYUFBYSxDQUFDOUI7b0JBQUUsS0FBRyxLQUFLO1lBQUM7UUFBQyxFQUFDLElBQUksU0FBT0csQ0FBQUEsSUFBRSxRQUFNVyxJQUFFLEtBQUssSUFBRUEsRUFBRWlCLEtBQUssS0FBRzVCLEVBQUVxQixJQUFJLENBQUNWLEdBQUUsc0lBQXFJZCw0REFBQ0EsQ0FBQ2UsRUFBQztJQUFFLEVBQUMsT0FBTWYsR0FBRTtRQUFDZ0MsUUFBUUQsS0FBSyxDQUFDLGdEQUErQy9CLEdBQUU7SUFBOEM7SUFBQyxPQUFPQSw0REFBQ0EsQ0FBQ2U7QUFBRTtBQUFFLFNBQVNSO0lBQUksSUFBRztRQUFDLE9BQU0sV0FBUywrRUFBaUM7SUFBQSxFQUFDLE9BQUssQ0FBQztJQUFDLElBQUc7UUFBQyxPQUFNLFdBQVNZLFFBQVFGLEdBQUcsQ0FBQ2dCLGlCQUFpQjtJQUFBLEVBQUMsT0FBSyxDQUFDO0lBQUMsT0FBTSxDQUFDO0FBQUM7QUFBQyxTQUFTckI7SUFBSSxJQUFHO1FBQUMsT0FBTywrRUFBaUM7SUFBQSxFQUFDLE9BQUssQ0FBQztJQUFDLElBQUc7UUFBQyxPQUFPTyxRQUFRRixHQUFHLENBQUNpQixpQkFBaUI7SUFBQSxFQUFDLE9BQUssQ0FBQztBQUFDO0FBQTJCLENBQ3g1Qyx3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uaWtlLy4vbm9kZV9tb2R1bGVzL0BzYW5pdHkvcHJldmlldy1raXQvZGlzdC9jbGllbnQvY3JlYXRlQ2xpZW50LmpzPzNiYjkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0e2NyZWF0ZUNsaWVudCBhcyBlfWZyb21cIkBzYW5pdHkvY2xpZW50XCI7aW1wb3J0e2NyZWF0ZUNsaWVudCBhcyB0fWZyb21cIkBzYW5pdHkvY2xpZW50L3N0ZWdhXCI7Y29uc3Qgcj1yPT57dmFyIGEsYztjb25zdHtlbmNvZGVTb3VyY2VNYXA6aT1uKCksZW5jb2RlU291cmNlTWFwQXRQYXRoOmwsc3R1ZGlvVXJsOnU9bygpLGxvZ2dlcjpzLC4uLnB9PXI7bGV0IGQ9ITA9PT1pO2lmKFwiYXV0b1wiPT09aSYmKGQ9ZnVuY3Rpb24oKXt0cnl7cmV0dXJuXCJwcmV2aWV3XCI9PT1pbXBvcnQubWV0YS5lbnYuVkVSQ0VMX0VOVn1jYXRjaHt9dHJ5e3JldHVyblwicHJldmlld1wiPT09cHJvY2Vzcy5lbnYuVkVSQ0VMX0VOVn1jYXRjaHt9cmV0dXJuITF9KCkpLFwic3RyaW5nXCI9PXR5cGVvZiBpJiZcImF1dG9cIiE9PWkpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCB2YWx1ZSBmb3IgZW5jb2RlU291cmNlTWFwOiBcIi5jb25jYXQoaSxcIi4gRGlkIHlvdSBtZWFuICdhdXRvJz9cIikpO3RyeXtpZihkJiYhMSE9PXIucmVzdWx0U291cmNlTWFwKXJldHVybiB1PyhudWxsPT0oYz1udWxsPT1zP3ZvaWQgMDpzLmRlYnVnKXx8Yy5jYWxsKHMsXCJbQHNhbml0eS9wcmV2aWV3LWtpdF06IENyZWF0aW5nIHNvdXJjZSBtYXAgZW5hYmxlZCBjbGllbnRcIiksdCh7Li4ucCxyZXN1bHRTb3VyY2VNYXA6ci5yZXN1bHRTb3VyY2VNYXA/ci5yZXN1bHRTb3VyY2VNYXA6XCJ3aXRoS2V5QXJyYXlTZWxlY3RvclwiLHN0ZWdhOntlbmFibGVkOiEwLHN0dWRpb1VybDp1LGxvZ2dlcjpzLGZpbHRlcjpsP2U9Pmwoe3BhdGg6ZS5zb3VyY2VQYXRoLGZpbHRlckRlZmF1bHQ6KCk9PmUuZmlsdGVyRGVmYXVsdChlKX0pOnZvaWQgMH19KSk6KG51bGw9PShhPW51bGw9PXM/dm9pZCAwOnMuZXJyb3IpfHxhLmNhbGwocyxcIltAc2FuaXR5L3ByZXZpZXcta2l0XTogQ29udGVudCBzb3VyY2UgbWFwIGVuYWJsZWQgY2xpZW50IGlzIGVuYWJsZWQsIGJ1dCBubyBzdHVkaW9VcmwgaXMgcHJvdmlkZWQuIEZhbGxpbmcgYmFjayB0byBAc2FuaXR5L2NsaWVudFwiKSxlKHApKX1jYXRjaChlKXtjb25zb2xlLmVycm9yKFwiW0BzYW5pdHkvcHJldmlldy1raXRdOiBFcnJvciBjcmVhdGluZyBjbGllbnRcIixlLFwiZmFsbGluZyBiYWNrIHRvIG5vbi1lbWJlZGRlZCBzb3VyY2VtYXAgbW9kZVwiKX1yZXR1cm4gZShwKX07ZnVuY3Rpb24gbigpe3RyeXtyZXR1cm5cInRydWVcIj09PWltcG9ydC5tZXRhLmVudi5TQU5JVFlfU09VUkNFX01BUH1jYXRjaHt9dHJ5e3JldHVyblwidHJ1ZVwiPT09cHJvY2Vzcy5lbnYuU0FOSVRZX1NPVVJDRV9NQVB9Y2F0Y2h7fXJldHVybiExfWZ1bmN0aW9uIG8oKXt0cnl7cmV0dXJuIGltcG9ydC5tZXRhLmVudi5TQU5JVFlfU1RVRElPX1VSTH1jYXRjaHt9dHJ5e3JldHVybiBwcm9jZXNzLmVudi5TQU5JVFlfU1RVRElPX1VSTH1jYXRjaHt9fWV4cG9ydHtyIGFzIGNyZWF0ZUNsaWVudH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVDbGllbnQuanMubWFwXG4iXSwibmFtZXMiOlsiY3JlYXRlQ2xpZW50IiwiZSIsInQiLCJyIiwiYSIsImMiLCJlbmNvZGVTb3VyY2VNYXAiLCJpIiwibiIsImVuY29kZVNvdXJjZU1hcEF0UGF0aCIsImwiLCJzdHVkaW9VcmwiLCJ1IiwibyIsImxvZ2dlciIsInMiLCJwIiwiZCIsImVudiIsIlZFUkNFTF9FTlYiLCJwcm9jZXNzIiwiRXJyb3IiLCJjb25jYXQiLCJyZXN1bHRTb3VyY2VNYXAiLCJkZWJ1ZyIsImNhbGwiLCJzdGVnYSIsImVuYWJsZWQiLCJmaWx0ZXIiLCJwYXRoIiwic291cmNlUGF0aCIsImZpbHRlckRlZmF1bHQiLCJlcnJvciIsImNvbnNvbGUiLCJTQU5JVFlfU09VUkNFX01BUCIsIlNBTklUWV9TVFVESU9fVVJMIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sanity/preview-kit/dist/client/createClient.js\n");

/***/ })

};
;